<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Milkii0的秘密花园 • Posts by &#34;solr, 代码审计&#34; tag</title>
        <link>http://example.com</link>
        <description></description>
        <language>en</language>
        <pubDate>Fri, 10 Jun 2022 10:31:38 +0800</pubDate>
        <lastBuildDate>Fri, 10 Jun 2022 10:31:38 +0800</lastBuildDate>
        <category>web,HTTP</category>
        <category>redis,未授权,漏洞利用</category>
        <category>solr, 漏洞复现</category>
        <category>前后端分离</category>
        <category>文件上传靶场</category>
        <category>Java反序列化</category>
        <category>ysoserial调试</category>
        <category>木马,汇总</category>
        <category>pikachu,web靶场</category>
        <category>dorabox,靶场练习</category>
        <category>sql注入靶场</category>
        <category>webgoat</category>
        <category>solr, 代码审计</category>
        <category>CodeQL</category>
        <category>codeql, 搭建教程</category>
        <item>
            <guid isPermalink="true">http://example.com/2022/06/10/solr%E6%BC%8F%E6%B4%9E%E5%AE%A1%E8%AE%A1/</guid>
            <title>solr漏洞审计</title>
            <link>http://example.com/2022/06/10/solr%E6%BC%8F%E6%B4%9E%E5%AE%A1%E8%AE%A1/</link>
            <category>solr, 代码审计</category>
            <pubDate>Fri, 10 Jun 2022 10:31:38 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;环境搭建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#环境搭建&#34;&gt;#&lt;/a&gt; 环境搭建&lt;/h1&gt;
&lt;p&gt;各版本源码下载：&lt;br&gt;
&lt;a href=&#34;http://archive.apache.org/dist/lucene/solr/7.0.1/&#34;&gt;http://archive.apache.org/dist/lucene/solr/7.0.1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此处 win 环境，下载源码&lt;br&gt;
&lt;img src=&#34;:/312d3247700c41e7bc385411a9e8ada5&#34; alt=&#34;d90b95d958f7a8aa03ec037e23ff6565.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在源码根目录打开 cmd，运行 &lt;code&gt;ant ivy-bootstrap&lt;/code&gt; &lt;br&gt;
&lt;img src=&#34;:/6f5d62f573e04359872a5e2d522769cb&#34; alt=&#34;65611596abbf48fd002528219ce04da6.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;解压后用 idea 打开&lt;br&gt;
&lt;img src=&#34;:/cba08f47dd2648029ea82c1667c0a32e&#34; alt=&#34;6398b74ee6a4f3388ea89aa77e051942.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;（这里可以使用 ant 编译成 idea 项目后，再用 idea 直接打开，在项目根目录下运行 ant 命令即可）&lt;/p&gt;
&lt;p&gt;在 solr 目录下，运行 &lt;code&gt;ant server&lt;/code&gt;  创建 solr server&lt;br&gt;
&lt;img src=&#34;:/5c02f7c7549a46e2a814060569170417&#34; alt=&#34;568e847efbb2bd3f814629269b607938.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;报错： &lt;code&gt;Could  not find file C:\Users\HAN91\.ant\lib\ivy-2.3.0.jar to generate checksum&lt;/code&gt; &lt;br&gt;
ivy 下载&lt;br&gt;
&lt;a href=&#34;http://ant.apache.org/ivy/download.cgi&#34;&gt; http://ant.apache.org/ivy/download.cgi&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;漏洞原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#漏洞原理&#34;&gt;#&lt;/a&gt; 漏洞原理&lt;/h1&gt;
&lt;h2 id=&#34;cve-2017-12629&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cve-2017-12629&#34;&gt;#&lt;/a&gt; CVE-2017-12629&lt;/h2&gt;
&lt;h3 id=&#34;xxe&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#xxe&#34;&gt;#&lt;/a&gt; XXE&lt;/h3&gt;
&lt;p&gt;Lucene 包含了一个查询解析器支持 XML 格式进行数据查询，并且解析 xml 数据时，未设置任何防御措施，导致我们可引入任意恶意外部实体&lt;br&gt;
而 Solr 由于使用 Lucenne 作为核心语义分析引擎，因此受到影响&lt;/p&gt;
&lt;p&gt;漏洞点：&lt;br&gt;
 &lt;code&gt;org.apache.lucene.queryparser.xml.CoreParser#parseXML&lt;/code&gt; &lt;br&gt;
 此处为解析 xml 数据的方法，其中并未包含任何 xxe 防御措施&lt;br&gt;
因此可正常解析我们引入的恶意外部实体&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; Document &lt;span class=&#34;title&#34;&gt;parseXML&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(InputStream pXmlFile)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; ParserException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DocumentBuilder db = &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      db = dbf.newDocumentBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception se) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ParserException(&lt;span class=&#34;string&#34;&gt;&amp;quot;XML Parser configuration error&amp;quot;&lt;/span&gt;, se);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    org.w3c.dom.Document doc = &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      doc = db.parse(pXmlFile);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception se) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ParserException(&lt;span class=&#34;string&#34;&gt;&amp;quot;Error parsing XML stream:&amp;quot;&lt;/span&gt; + se, se);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; doc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;漏洞修复&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#漏洞修复&#34;&gt;#&lt;/a&gt; 漏洞修复&lt;/h3&gt;
&lt;p&gt;官方修复是增加 XXE 通用防御，这也是我们常用的 xxe 修复方法&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;DocumentBuilderFactory.setFearture(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://javax.xml.XMLConstants/feature/secure-processing&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以下列出一些通过设置解析器行为，达到对 xxe 进行限制的方法&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 这是优先选择. 如果不允许DTDs (doctypes) ,几乎可以阻止所有的XML实体攻击&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;setFeature(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://apache.org/xml/features/disallow-doctype-decl&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 如果不能完全禁用DTDs，最少采取以下措施，必须两项同时存在&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;setFeature(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://xml.org/sax/features/external-general-entities&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;// 防止外部实体POC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;setFeature(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://xml.org/sax/features/external-parameter-entities&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;// 防止参数实体POC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;rce&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rce&#34;&gt;#&lt;/a&gt; RCE&lt;/h3&gt;
&lt;p&gt;RCE 需要使用到 SolrCloud Collections API，所以 RCE 只影响 Solrcloud 分布式系统&lt;/p&gt;
&lt;p&gt;漏洞点：&lt;br&gt;
 &lt;code&gt;org.apache.solr.core.RunExecutableListener#exec&lt;/code&gt; &lt;br&gt;
&lt;img src=&#34;:/51de3416f045459f909444415033be1f&#34; alt=&#34;0f16537ae621dca652c50598b2934616.png&#34;&gt;&lt;br&gt;
 我们看见一下这行代码执行了命令，并传入了三个参数&lt;br&gt;
 &lt;code&gt;proc = Runtime.getRuntime().exec(cmd, envp ,dir);&lt;/code&gt; &lt;br&gt;
 查看 API&lt;br&gt;
cmdarray：命令字符串&lt;br&gt;
 envp：代表 “环境” 变量设置，如果 envp 是 null ，则子进程继承当前进程的环境设置&lt;br&gt;
 dir：新子进程的工作目录由 dir 指定 。 如果 dir 是 null ，则子进程继承当前进程的当前工作目录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;:/a75c9e8d1f58409c88e9f1ca628a3c1c&#34; alt=&#34;9ec0917d903603b1067a566e250c5627.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;那么我们怎么才能控制以上这三个参数呢？&lt;br&gt;
在初始化时，通过初始化传入的参数 args&lt;br&gt;
 分别获得这三个参数 &lt;code&gt;cmd,dir,envp&lt;/code&gt; &lt;br&gt;
&lt;img src=&#34;:/2417a9d2aee24484b0d8d60a7945c5bf&#34; alt=&#34;eec102985f87ff2f05623f84d74ab34c.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;找到调用 exec () 的有两处&lt;br&gt;
 &lt;code&gt;org.apache.solr.core.RunExecutableListener#postCommit&lt;/code&gt; &lt;br&gt;
 &lt;code&gt;org.apache.solr.core.RunExecutableListener#newSearcher&lt;/code&gt; &lt;br&gt;
&lt;img src=&#34;:/3ce9c774ef2d49e5a5e2ebdf53c84848&#34; alt=&#34;c52c3a71430c5dd42e23cbf7eba7973e.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;因此我们可以 config API 调用以上两个命令执行命令&lt;br&gt;
关于 config API 更多信息可查看传送门中放置的官网链接&lt;br&gt;
&lt;img src=&#34;:/4c612e57459d403384463b4165fc4786&#34; alt=&#34;fa07883023d57f29334905273587cf9b.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;漏洞修复-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#漏洞修复-2&#34;&gt;#&lt;/a&gt; 漏洞修复&lt;/h3&gt;
&lt;p&gt;官方修复直接将该类删除&lt;/p&gt;
&lt;h2 id=&#34;cve-2019-0193&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cve-2019-0193&#34;&gt;#&lt;/a&gt; CVE-2019-0193&lt;/h2&gt;
&lt;p&gt;DataImportHandler 是一个可选但流行的模块，用于从数据库和其他来源提取数据。它有一个特性，即整个 DIH (the Data Import Handler, 数据导入处理程序) 配置可以来自请求的 &lt;code&gt;dataConfig&lt;/code&gt;  参数&lt;/p&gt;
&lt;p&gt;DIH 管理屏幕的调试模式使用它来方便 DIH 配置的调试 / 开发。因为 DIH 配置可以包含脚本，并未对脚本进行任何过滤检测，所以这个参数存在安全风险&lt;/p&gt;
&lt;p&gt;从 Solr 的 8.2.0 版本开始，使用这个参数需要将 Java System 属性  &lt;code&gt;enable.dih.dataConfigParam&lt;/code&gt;  设置为  &lt;code&gt;true&lt;/code&gt; ，此时也将存在该漏洞&lt;/p&gt;
&lt;p&gt;DHI 和 script 官方文档链接放在传送门中&lt;/p&gt;
&lt;p&gt;我们可以根据官方文档的说明，插入脚本并执行，其中 entity 标签支持 jndi 以及 script&lt;br&gt;
&lt;img src=&#34;:/9366ca25d9524160843ca21a3d69b18d&#34; alt=&#34;a6303a016339679c882babc40deace8b.png&#34;&gt;&lt;br&gt;
 漏洞点：&lt;br&gt;
 &lt;code&gt;org.apache.solr.handler.dataimport.DataImportHandler&lt;/code&gt; &lt;br&gt;
 其中 &lt;code&gt;handleRequestBody()&lt;/code&gt;  函数接收了前端传入的 &lt;code&gt;dataConfig&lt;/code&gt; &lt;br&gt;
&lt;img src=&#34;:/5136fb3fb5994945a840fa8c82b62825&#34; alt=&#34;08710fb1d7d531e129962d80bb22941e.png&#34;&gt;&lt;br&gt;
 后面就不再分析了，因为这个漏洞是 solr 该模块允许执行脚本，官方文档中也描述了该模块以及脚本的使用&lt;/p&gt;
&lt;h3 id=&#34;漏洞修复-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#漏洞修复-3&#34;&gt;#&lt;/a&gt; 漏洞修复&lt;/h3&gt;
&lt;p&gt;官方修复增加 &lt;code&gt;enable.dih.dataConfigParam&lt;/code&gt;  参数，默认 = false，仅在启动 solr 时带上参数 &lt;code&gt;enable.dih.dataConfigParam=true&lt;/code&gt;  才可启动 debug 模式&lt;/p&gt;
&lt;h2 id=&#34;remote-streaming-fileread任意文件读取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#remote-streaming-fileread任意文件读取&#34;&gt;#&lt;/a&gt; Remote-Streaming-Fileread（任意文件读取）&lt;/h2&gt;
&lt;p&gt;官方文档中写明，solrconfig.xml 中 &lt;code&gt;enableRemoteStreaming=&amp;quot;true&amp;quot;&lt;/code&gt;  时允许远程流&lt;br&gt;
&lt;img src=&#34;:/b53eef83d3f047f78ea7b9607b951e0f&#34; alt=&#34;d4e2c6715cd93bccb5ba0645bf44d89c.png&#34;&gt;&lt;br&gt;
 因此我们可以通过 config API，启用远程读取流&lt;br&gt;
 &lt;code&gt;enableRemoteStreaming = “true”&lt;/code&gt; ，将允许任何人向任何 URL 或本地文件发送请求&lt;br&gt;
 &lt;code&gt;DumpRequestHandler = “true”&lt;/code&gt; ，它将允许任何人查看系统上的任何文件。&lt;br&gt;
漏洞点：&lt;br&gt;
 &lt;code&gt;solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.java&lt;/code&gt; &lt;br&gt;
&lt;img src=&#34;:/60256974dd3742f98a58144d8dd67750&#34; alt=&#34;d9c8060b808d32f29db7535380472c6e.png&#34;&gt;&lt;br&gt;
 其中通过以下代码获取前端传入数据&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;strs = params.getParams( CommonParams.STREAM_FILE );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在进行文件获取时，未对传入的 strs 进行任何检测和过滤，并生成 stream&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String file : strs ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ContentStreamBase stream = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ContentStreamBase.FileStream( &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; File(file) );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;( contentType != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          stream.setContentType( contentType );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        streams.add( stream );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;solr/solrj/src/java/org/apache/solr/common/params/CommonParams.java&lt;/code&gt;  中，写明了 &lt;code&gt;stream.file&lt;/code&gt;  即为传入的 &lt;code&gt;CommonParams.STREAM_FILE&lt;/code&gt; &lt;br&gt;
&lt;img src=&#34;:/24ec295b558e4aac8846e0ab3e142848&#34; alt=&#34;e0c12b5404c9aa9db8cd8eb2b87f7d3e.png&#34;&gt;&lt;br&gt;
 其中若传入 url 可导致 ssrf，原理同上&lt;/p&gt;
&lt;h3 id=&#34;修复建议&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#修复建议&#34;&gt;#&lt;/a&gt; 修复建议&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;控制 solr 访问权限，增加访问口令&lt;/li&gt;
&lt;li&gt;不对外网开放 solr&lt;/li&gt;
&lt;li&gt;关闭 ConfigAPI：在 bin 目录下的 solr.in.cmd 中加入一行 set SOLR_OPTS=% SOLR_OPTS% -Ddisable.configEdit=true；然后关闭远程读取文件流，默认不开启&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;cve-2019-17558&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cve-2019-17558&#34;&gt;#&lt;/a&gt; CVE-2019-17558&lt;/h2&gt;
&lt;p&gt;传送门：&lt;br&gt;
&lt;a href=&#34;https://www.pianshen.com/article/23101236137/&#34;&gt;本地部署 idea 调试环境&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://mp.weixin.qq.com/s/3WuWUGO61gM0dBpwqTfenQ&#34;&gt; Apache Solr 组件安全&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://rui0.cn/archives/993&#34;&gt; XXE 漏洞原理以及防御方式&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://blog.csdn.net/whatday/article/details/106959989/&#34;&gt; apache solr 远程代码执行漏洞 (cve-2019-0193)&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://solr.apache.org/guide/6_6/config-api.html&#34;&gt;config API&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://solr.apache.org/guide/8_1/uploading-structured-data-store-data-with-the-data-import-handler.html#dih-concepts-and-terminology&#34;&gt;DHI&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://solr.apache.org/guide/6_6/uploading-structured-data-store-data-with-the-data-import-handler.html#the-scripttransformer&#34;&gt;script&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://solr.apache.org/security.html&#34;&gt;solr 历史漏洞&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://solr.apache.org/guide/6_6/content-streams.html&#34;&gt; content-streams&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Copyright ©milkii0&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
