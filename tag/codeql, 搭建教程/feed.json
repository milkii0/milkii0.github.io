{
    "version": "https://jsonfeed.org/version/1",
    "title": "Milkii0的秘密花园 • All posts by \"codeql, 搭建教程\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/06/10/CodeQLforVSCode%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/",
            "url": "http://example.com/2022/06/10/CodeQLforVSCode%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/",
            "title": "CodeQLforVSCode搭建流程",
            "date_published": "2022-06-10T02:36:34.000Z",
            "content_html": "<p>[toc]</p>\n<h1 id=\"visual-studio-code安装\"><a class=\"markdownIt-Anchor\" href=\"#visual-studio-code安装\">#</a> Visual Studio Code 安装</h1>\n<p>都是免费的哈哈哈<br>\n<a href=\"https://code.visualstudio.com/Download\">官网下载</a><br>\n<img src=\"89f3979d3be08c5479bf1a9fac4ae8f4.png\" alt=\"89f3979d3be08c5479bf1a9fac4ae8f4.png\"></p>\n<h1 id=\"codeql安装\"><a class=\"markdownIt-Anchor\" href=\"#codeql安装\">#</a> CodeQL 安装</h1>\n<h2 id=\"使用chocolatey安装codeql-cli\"><a class=\"markdownIt-Anchor\" href=\"#使用chocolatey安装codeql-cli\">#</a> 使用 Chocolatey 安装 CodeQL cli</h2>\n<p>使用 choco 安装可透过指令执行且环境变数也会自动设定好<br>\n管理员权限打开 cmd<br>\n 运行 <code>choco install codeql</code> <br>\n<img src=\"8e97ed84bc39ad6f0c5ccda34d479d90.png\" alt=\"8e97ed84bc39ad6f0c5ccda34d479d90.png\"></p>\n<p>安装成功<br>\n<img src=\"c79f98196394ebe90a752eb4bf512411.png\" alt=\"c79f98196394ebe90a752eb4bf512411.png\"></p>\n<p>如果想要自定义安装目录的话，需要更改一下环境变量<br>\n ChocolateyInstall 就是默认的安装路径<br>\n<img src=\"03c3720b2dfed7a1702603e97ea56e19.png\" alt=\"03c3720b2dfed7a1702603e97ea56e19.png\"></p>\n<h2 id=\"gihub下载\"><a class=\"markdownIt-Anchor\" href=\"#gihub下载\">#</a> gihub 下载</h2>\n<p>先下载 codeql-cli<br>\n 选择对应操作系统下载即可<br>\n<img src=\"be05dbbd44da6e49e5a161a120478255.png\" alt=\"be05dbbd44da6e49e5a161a120478255.png\"></p>\n<p><a href=\"https://github.com/github/codeql-cli-binaries\">https://github.com/github/codeql-cli-binaries</a><br>\n 下载好解压至自己选定的文件夹，再添加系统变量<br>\n这里我将 codeql 文件夹名称改为 codeql-cli<br>\n<img src=\"cc76037dd0f7125ff2fa7ec3b2686824.png\" alt=\"cc76037dd0f7125ff2fa7ec3b2686824.png\"></p>\n<p>在命令行输入 codeql，如下图即配置成功<br>\n若提示找不到该命令，重启后再执行命令<br>\n<img src=\"f81317bf86bb5b8ece642a207391842b.png\" alt=\"f81317bf86bb5b8ece642a207391842b.png\"></p>\n<p>下载 codeql 规则库（使用 starter workspace 可跳过此步骤）<br>\n<a href=\"https://github.com/github/codeql\">https://github.com/github/codeql</a><br>\n 在 codeql 文件夹下打开 cmd<br>\n 执行 <code>git clone https://github.com/github/codeql codeql-repo</code> <br>\n 下载完后如图<br>\n<img src=\"3aeebb3aca934f76ef649ccf7d200fb6.png\" alt=\"3aeebb3aca934f76ef649ccf7d200fb6.png\"></p>\n<h1 id=\"下载之后安装codeql插件\"><a class=\"markdownIt-Anchor\" href=\"#下载之后安装codeql插件\">#</a> 下载之后安装 codeql 插件</h1>\n<p>有三种方法</p>\n<ol>\n<li>\n<p>在 VS 插件中搜索 codeql 点击安装<br>\n<img src=\"9536c545af16d13d030ff3c42f767471.png\" alt=\"9536c545af16d13d030ff3c42f767471.png\"></p>\n</li>\n<li>\n<p>浏览器打开<a href=\"https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-codeql\">商城</a>下载</p>\n</li>\n<li>\n<p>github 中下载<a href=\"https://github.com/github/vscode-codeql/releases\"> VSIX 文件</a><br>\n在 more actions 中选择从 VSIX 文件安装<br>\n<img src=\"c748a4d35418471f99408284979433eb.png\" alt=\"c748a4d35418471f99408284979433eb.png\"></p>\n</li>\n</ol>\n<h1 id=\"配置codeql-cli\"><a class=\"markdownIt-Anchor\" href=\"#配置codeql-cli\">#</a> 配置 codeql-cli</h1>\n<p>终端无法访问扩展管理的 cli<br>\n 可以自己下载 codeql, 并在插件中配置路径<br>\n这样终端可以访问<br>\n这个插件是使用 codeql-cli 编译并运行规则的，要确保下载的版本支持该插件即可<br>\n<img src=\"64d75944e23735a29f128c932e7824b7.png\" alt=\"64d75944e23735a29f128c932e7824b7.png\"></p>\n<p>Executable Path 输入 codeql.exe 所在路径<br>\n<img src=\"9ab953a7697bf20458868981a2523a3c.png\" alt=\"9ab953a7697bf20458868981a2523a3c.png\"></p>\n<h1 id=\"配置规则\"><a class=\"markdownIt-Anchor\" href=\"#配置规则\">#</a> 配置规则</h1>\n<p>两种方法建立 codeql workspace<br>\n 第一种就是把要审计的代码放入 codeql 中<br>\n第二种是把 codeql 加入要审计的代码的 workspace 中</p>\n<h2 id=\"使用starter-workspace也就是git仓库\"><a class=\"markdownIt-Anchor\" href=\"#使用starter-workspace也就是git仓库\">#</a> 使用‘starter workspace’，也就是 git 仓库</h2>\n<ol>\n<li>\n<p>下载 starter<br>\n <code>git clone --recursive https://github.com/github/vscode-codeql-starter/</code> <br>\n 或者<br>\n <code>git clone https://github.com/github/vscode-codeql-starter/</code> <br>\n 项目下载完成后，进入项目目录<br>\n <code>git submodule update --init </code> <br>\n <code>git submodule update --remote</code> <br>\n 确保包含需要的子模块<br>\n截图使用的是第一种方法<br>\n<img src=\":/c7bf21f2a552483780c58a4ee06b70a0\" alt=\"479934456f6c44228c2f3e8057ac0e86.png\"><br>\n 子模块需要定期更新<br>\n<img src=\":/3c8180aaa0b040ecaafd4217cbc18503\" alt=\"ef88b51020a9d4ed8fdb5bda8029fc94.png\"></p>\n</li>\n<li>\n<p>在 VS Code 中打开 starter workspace<br>\n<img src=\":/29486ddc144542318d779b859916c3fb\" alt=\"84a6738a5e83ddeb45752d064e986647.png\"><br>\n<img src=\":/b02d0248007c458a8554fcc54a7d04ea\" alt=\"4e682ce5e87fbc0dd1897081928067fd.png\"></p>\n</li>\n</ol>\n<p>注意：<br>\nstarter 子模块中包括 C/C++, C#, Java, JavaScript, Python, Ruby 以及 GO 的规则，在 vscode-codeql-starter\\ql 下<br>\n CodeQL 暂时无法扫描 php 代码</p>\n<h2 id=\"将codeql规则库加入现有的工作站\"><a class=\"markdownIt-Anchor\" href=\"#将codeql规则库加入现有的工作站\">#</a> 将 CodeQL 规则库加入现有的工作站</h2>\n<p><strong>此种方法未实现，仅按文档进行流程说明</strong></p>\n<p>将下载好的本地 CodeQL 库加入你的 workspace<br>\n<a href=\"https://github.com/github/codeql\">CodeQL 库下载链接</a></p>\n<ol>\n<li>\n<p>选择 File &gt; Add Folder to Workspace，加入下载好的 codeql 库<br>\n<img src=\":/97e2d507bde8497d9d9d5c54a79c7da3\" alt=\"3ccc9692c80a5e50bf93123ffbf04e4c.png\"></p>\n</li>\n<li>\n<p>每种语言都要创建一个新的文件夹<br>\n通过 New Folder 或者 Add Folder to Workspace 选项<br>\n放置你的自定义规则和规则库</p>\n</li>\n<li>\n<p>在每个语言目录下新建一个 qlpack.yml 文件<br>\n用来告诉 CodeQL，这个目录下的语言类型和依赖包<br>\n例如：<br>\n在 C<ins> 代码目录下自定义一个 CodeQL 文件夹名为’my-custom-cpp-pack’<br>\n在 C</ins> 代码目录下创建一个 qlpack.yml 文件，内容如下</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: my-custom-cpp-pack</span><br><span class=\"line\">version: 0.0.0</span><br><span class=\"line\">libraryPathDependencies: codeql/cpp-all</span><br></pre></td></tr></table></figure>\n<p><strong>注意：<br>\nGO 语言的规则库并不在 github/codeql 中<br>\n扫描 GO 代码，需要下载 https://github.com/github/codeql-go<br>\n 然后将规则像上面说的这样加入规则库<br>\n（starter 中都是包含的）</strong></p>\n<h1 id=\"运行codeql\"><a class=\"markdownIt-Anchor\" href=\"#运行codeql\">#</a> 运行 CodeQL</h1>\n<h2 id=\"选择数据库\"><a class=\"markdownIt-Anchor\" href=\"#选择数据库\">#</a> 选择数据库</h2>\n<p>扫描分析一个 project，我们需要建立一个 CodeQL 数据库<br>\n在侧边栏打开 CodeQL 数据库<br>\n如图有四种添加数据库的方法<br>\n<img src=\"b9557aadc5d02dcc220fc4f20977e102.png\" alt=\"b9557aadc5d02dcc220fc4f20977e102.png\"><br>\n 当添加数据库之后，会有数据库视图<br>\n可以右击列表中的项进行数据库交互<br>\n可以利用 Ctrl/Cmd+click 选择多个数据库</p>\n<h2 id=\"创建本地数据库\"><a class=\"markdownIt-Anchor\" href=\"#创建本地数据库\">#</a> 创建本地数据库</h2>\n<p>如果没有存在的数据库导入，也可以先创建一个本地数据库<br>\n有三种方法</p>\n<h3 id=\"通过coedql-cli创建一个数据库\"><a class=\"markdownIt-Anchor\" href=\"#通过coedql-cli创建一个数据库\">#</a> 通过 coedql-cli 创建一个数据库</h3>\n<pre><code>执行命令：\n`codeql database create &lt;database&gt; --language=&lt;language-identifier&gt;`\n</code></pre>\n<p>参数说明：<br>\n <code>&lt;database&gt;</code> ：创建数据库的路径，目录会在执行命令的时候被创建<br>\n <code>--language</code> : 指定数据库语言，输入标识符。当和–db-cluster 一起使用时，可以指定多个，用’,' 分隔，也可以进行多次指定。<br>\n <code>--db-cluster</code> ：为多种语言创建数据库<br>\n <code>--command</code> ：创建一个或多个编译语言数据库的时候使用。python 和 JavaScript/TypeScript 不需要该参数，如果编译语言不带该参数，codeql 会自动检测并编译<br>\n <code>--no-run-unnecessary-builds</code> ：为多语言创建数据库，且包括编译和非编译语言时，可以利用  <code>--no-run-unnecessary-builds</code>  来帮助非编译语言跳过 command 选项<br>\n<a href=\"https://codeql.github.com/docs/codeql-cli/manual/database-create/\">更多参数说明</a><br>\n CodeQL 支持以下语言</p>\n<table>\n<thead>\n<tr>\n<th>语言</th>\n<th>标识符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C/C++</td>\n<td>cpp</td>\n</tr>\n<tr>\n<td>C#</td>\n<td>csharp</td>\n</tr>\n<tr>\n<td>GO</td>\n<td>go</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>java</td>\n</tr>\n<tr>\n<td>JavaScript/TypeScript</td>\n<td>javascript</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>python</td>\n</tr>\n<tr>\n<td>Ruby</td>\n<td>ruby</td>\n</tr>\n</tbody>\n</table>\n<p>找了 codeql-repo 中的 python 案列测试创建数据库成功<br>\n<img src=\"48af0641ac03eb15ee8781d860f9e724.png\" alt=\"48af0641ac03eb15ee8781d860f9e724.png\"><br>\n<img src=\"18db53f51f1f4c80cbae05e19d286cb4.png\" alt=\"18db53f51f1f4c80cbae05e19d286cb4.png\"></p>\n<h4 id=\"官方给出的command案例\"><a class=\"markdownIt-Anchor\" href=\"#官方给出的command案例\">#</a> 官方给出的 command 案例</h4>\n<blockquote>\n<p>Specifying build commands</p>\n<p>The following examples are designed to give you an idea of some of the build commands that you can specify for compiled languages.</p>\n<blockquote>\n<p>Important</p>\n<p>The  <code>--command</code>  option accepts a single argument—if you need to use more than one command, specify  <code>--command</code>  multiple times.</p>\n<p>If you need to pass subcommands and options, the whole argument needs to be quoted to be interpreted correctly.</p>\n</blockquote>\n<ul>\n<li>\n<p>C/C++ project built using  <code>make</code> :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database create cpp-database --language=cpp --command=make</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>C# project built using  <code>dotnet build</code>  (.NET Core 3.0 or later):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database create csharp-database --language=csharp --command=&#x27;dotnet build /t:rebuild&#x27;</span><br></pre></td></tr></table></figure>\n<p>On Linux and macOS (but not Windows), you need to disable shared compilation when building C# projects with .NET Core 2 or earlier, so expand the command to:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database create csharp-database --language=csharp --command=&#x27;dotnet build /p:UseSharedCompilation=false /t:rebuild&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Go project built using the  <code>COEQL_EXTRACTOR_GO_BUILD_TRACING=on</code>  environment variable:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODEQL_EXTRACTOR_GO_BUILD_TRACING=on codeql database create go-database --language=go</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Go project built using a custom build script:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database create go-database --language=go --command=&#x27;./scripts/build.sh&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Java project built using Gradle:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database create java-database --language=java --command=&#x27;gradle clean test&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Java project built using Maven:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database create java-database --language=java --command=&#x27;mvn clean install&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Java project built using Ant:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database create java-database --language=java --command=&#x27;ant -f build.xml&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Project built using Bazel:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Navigate to the Bazel workspace.</span><br><span class=\"line\"></span><br><span class=\"line\"># Before building, remove cached objects</span><br><span class=\"line\"># and stop all running Bazel server processes.</span><br><span class=\"line\">bazel clean --expunge</span><br><span class=\"line\"></span><br><span class=\"line\"># Build using the following Bazel flags, to help CodeQL detect the build:</span><br><span class=\"line\"># `--spawn_strategy=local`: build locally, instead of using a distributed build</span><br><span class=\"line\"># `--nouse_action_cache`: turn off build caching, which might prevent recompilation of source code</span><br><span class=\"line\"># `--noremote_accept_cached`, `--noremote_upload_local_results`: avoid using a remote cache</span><br><span class=\"line\">codeql database create new-database --language=&lt;language&gt; \\</span><br><span class=\"line\">  --command=&#x27;bazel build --spawn_strategy=local --nouse_action_cache --noremote_accept_cached --noremote_upload_local_results //path/to/package:target&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># After building, stop all running Bazel server processes.</span><br><span class=\"line\"># This ensures future build commands start in a clean Bazel server process</span><br><span class=\"line\"># without CodeQL attached.</span><br><span class=\"line\">bazel shutdown</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Project built using a custom build script:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database create new-database --language=&lt;language&gt; --command=&#x27;./scripts/build.sh&#x27;</span><br></pre></td></tr></table></figure>\n<p>This command runs a custom script that contains all of the commands required to build the project.</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"剩下两种方法未测试仅给出说明链接\"><a class=\"markdownIt-Anchor\" href=\"#剩下两种方法未测试仅给出说明链接\">#</a> 剩下两种方法未测试，仅给出<a href=\"https://codeql.github.com/docs/codeql-for-visual-studio-code/analyzing-your-projects/\">说明链接</a></h3>\n<h2 id=\"编写运行规则建议通过官方给出的练习题进行练习\"><a class=\"markdownIt-Anchor\" href=\"#编写运行规则建议通过官方给出的练习题进行练习\">#</a> 编写运行规则，建议通过官方给出的练习题进行练习</h2>\n<h1 id=\"传送门\"><a class=\"markdownIt-Anchor\" href=\"#传送门\">#</a> 传送门</h1>\n<p><a href=\"https://codeql.github.com/docs/\">CodeQL 官方文档</a><br>\n<a href=\"https://lab.github.com/githubtraining\">练习室</a></p>\n",
            "tags": [
                "codeql, 搭建教程"
            ]
        }
    ]
}